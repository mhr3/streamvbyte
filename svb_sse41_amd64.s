//go:build !noasm && amd64
// Code generated by gocc rev-c5c9fd3-dirty -- DO NOT EDIT.
//
// Source file         : svb_sse41.c
// Clang version       : Apple clang version 16.0.0 (clang-1600.0.26.4)
// Target architecture : amd64
// Compiler options    : -msse4.1

#include "textflag.h"

DATA LCPI0_0<>+0x00(SB)/8, $0x0101010101010101
DATA LCPI0_0<>+0x08(SB)/8, $0x0101010101010101
GLOBL LCPI0_0<>(SB), (RODATA|NOPTR), $16

DATA LCPI0_1<>+0x00(SB)/8, $0x7f007f007f007f00
DATA LCPI0_1<>+0x08(SB)/8, $0x7f007f007f007f00
GLOBL LCPI0_1<>(SB), (RODATA|NOPTR), $16

TEXT Â·svb_encode(SB), 0, $16-40
	MOVQ in+0(FP), DI
	MOVQ in_len+8(FP), SI
	MOVQ in_cap+16(FP), DX
	MOVQ out+24(FP), CX
	NOP                              // (skipped)                            // push	rbp
	NOP                              // (skipped)                            // mov	rbp, rsp
	MOVQ R14, 0(SP)                  // <--                                  // push	r14
	MOVQ BX, 8(SP)                   // <--                                  // push	rbx
	ANDQ $-0x8, SP                   // <--                                  // and	rsp, -8
	MOVQ CX, DX                      // <--                                  // mov	rdx, rcx
	WORD $0x468d; BYTE $0x03         // LEAL 0x3(SI), AX                     // lea	eax, [rsi + 3]
	WORD $0xe8c1; BYTE $0x02         // SHRL $0x2, AX                        // shr	eax, 2
	ADDQ CX, AX                      // <--                                  // add	rax, rcx
	WORD $0xf189                     // MOVL SI, CX                          // mov	ecx, esi
	WORD $0xe183; BYTE $0xf8         // ANDL $-0x8, CX                       // and	ecx, -8
	JE   LBB0_1                      // <--                                  // je	.LBB0_1
	LEAQ 0(DI)(CX*4), CX             // <--                                  // lea	rcx, [rdi + 4*rcx]
	LONG $0xc0ef0f66                 // PXOR X0, X0                          // pxor	xmm0, xmm0
	MOVO LCPI0_0<>(SB), X1           // <--                                  // movdqa	xmm1, xmmword ptr [rip + .LCPI0_0]
	MOVO LCPI0_1<>(SB), X2           // <--                                  // movdqa	xmm2, xmmword ptr [rip + .LCPI0_1]
	LEAQ shuf_lut<>(SB), R9          // <--                                  // lea	r9, [rip + shuf_lut]
	LEAQ lengthTable_1234<>(SB), R10 // <--                                  // lea	r10, [rip + lengthTable_1234]
	MOVQ DX, R8                      // <--                                  // mov	r8, rdx

LBB0_62:
	MOVQ AX, R11                               // <--                                  // mov	r11, rax
	LONG $0x276f0ff3                           // MOVDQU 0(DI), X4                     // movdqu	xmm4, xmmword ptr [rdi]
	LONG $0x5f6f0ff3; BYTE $0x10               // MOVDQU 0x10(DI), X3                  // movdqu	xmm3, xmmword ptr [rdi + 16]
	LONG $0xec6f0f66                           // MOVDQA X4, X5                        // movdqa	xmm5, xmm4
	LONG $0xe8740f66                           // PCMPEQB X0, X5                       // pcmpeqb	xmm5, xmm0
	LONG $0xe9df0f66                           // PANDN X1, X5                         // pandn	xmm5, xmm1
	LONG $0xf36f0f66                           // MOVDQA X3, X6                        // movdqa	xmm6, xmm3
	LONG $0xf0740f66                           // PCMPEQB X0, X6                       // pcmpeqb	xmm6, xmm0
	LONG $0xf1df0f66                           // PANDN X1, X6                         // pandn	xmm6, xmm1
	LONG $0xee670f66                           // PACKUSWB X6, X5                      // packuswb	xmm5, xmm6
	LONG $0xe9ea0f66                           // PMINSW X1, X5                        // pminsw	xmm5, xmm1
	LONG $0xeadd0f66                           // PADDUSW X2, X5                       // paddusw	xmm5, xmm2
	LONG $0xddd70f66                           // PMOVMSKB X5, BX                      // pmovmskb	ebx, xmm5
	WORD $0xd889                               // MOVL BX, AX                          // mov	eax, ebx
	WORD $0xe083; BYTE $0x3f                   // ANDL $0x3f, AX                       // and	eax, 63
	WORD $0xe0c1; BYTE $0x04                   // SHLL $0x4, AX                        // shl	eax, 4
	WORD $0x8941; BYTE $0xde                   // MOVL BX, R14                         // mov	r14d, ebx
	LONG $0x04eec141                           // SHRL $0x4, R14                       // shr	r14d, 4
	LONG $0x380f4266; WORD $0x2400; BYTE $0x08 // PSHUFB 0(AX)(R9*1), X4               // pshufb	xmm4, xmmword ptr [rax + r9]
	LONG $0xf0e68141; WORD $0x0003; BYTE $0x00 // ANDL $svb_encode_alt+16(SB), R14     // and	r14d, 1008
	LONG $0x380f4366; WORD $0x1c00; BYTE $0x0e // PSHUFB 0(R14)(R9*1), X3              // pshufb	xmm3, xmmword ptr [r14 + r9]
	LONG $0x7f0f41f3; BYTE $0x23               // MOVDQU X4, 0(R11)                    // movdqu	xmmword ptr [r11], xmm4
	WORD $0xb60f; BYTE $0xc3                   // MOVZX BL, AX                         // movzx	eax, bl
	LONG $0x34b60f46; BYTE $0x10               // MOVZX 0(AX)(R10*1), R14              // movzx	r14d, byte ptr [rax + r10]
	LONG $0x7f0f43f3; WORD $0x331c             // MOVDQU X3, 0(R11)(R14*1)             // movdqu	xmmword ptr [r11 + r14], xmm3
	WORD $0xd889                               // MOVL BX, AX                          // mov	eax, ebx
	WORD $0xe8c1; BYTE $0x08                   // SHRL $0x8, AX                        // shr	eax, 8
	LONG $0x04b60f42; BYTE $0x10               // MOVZX 0(AX)(R10*1), AX               // movzx	eax, byte ptr [rax + r10]
	ADDQ R14, AX                               // <--                                  // add	rax, r14
	ADDQ R11, AX                               // <--                                  // add	rax, r11
	MOVW BX, 0(R8)                             // <--                                  // mov	word ptr [r8], bx
	ADDQ $0x2, R8                              // <--                                  // add	r8, 2
	ADDQ $0x20, DI                             // <--                                  // add	rdi, 32
	CMPQ DI, CX                                // <--                                  // cmp	rdi, rcx
	JNE  LBB0_62                               // <--                                  // jne	.LBB0_62
	MOVQ CX, DI                                // <--                                  // mov	rdi, rcx
	ANDQ $0x7, SI                              // <--                                  // and	rsi, 7
	JNE  LBB0_3                                // <--                                  // jne	.LBB0_3
	JMP  LBB0_60                               // <--                                  // jmp	.LBB0_60

LBB0_1:
	MOVQ DX, R8   // <--                                  // mov	r8, rdx
	ANDQ $0x7, SI // <--                                  // and	rsi, 7
	JE   LBB0_60  // <--                                  // je	.LBB0_60

LBB0_3:
	WORD $0x0f8b                 // MOVL 0(DI), CX                       // mov	ecx, dword ptr [rdi]
	CMPL CX, $0x100              // <--                                  // cmp	ecx, 256
	JAE  LBB0_4                  // <--                                  // jae	.LBB0_4
	MOVB CL, 0(AX)               // <--                                  // mov	byte ptr [rax], cl
	LONG $0x000001b9; BYTE $0x00 // MOVL $0x1, CX                        // mov	ecx, 1
	XORL R9, R9                  // <--                                  // xor	r9d, r9d
	ADDQ CX, AX                  // <--                                  // add	rax, rcx
	CMPL SI, $0x1                // <--                                  // cmp	esi, 1
	JNE  LBB0_11                 // <--                                  // jne	.LBB0_11
	JMP  LBB0_59                 // <--                                  // jmp	.LBB0_59

LBB0_4:
	CMPL CX, $0x10000            // <--                                  // cmp	ecx, 65536
	JAE  LBB0_5                  // <--                                  // jae	.LBB0_5
	MOVW CX, 0(AX)               // <--                                  // mov	word ptr [rax], cx
	WORD $0xb141; BYTE $0x01     // MOVL $0x1, R9                        // mov	r9b, 1
	LONG $0x000002b9; BYTE $0x00 // MOVL $0x2, CX                        // mov	ecx, 2
	ADDQ CX, AX                  // <--                                  // add	rax, rcx
	CMPL SI, $0x1                // <--                                  // cmp	esi, 1
	JNE  LBB0_11                 // <--                                  // jne	.LBB0_11
	JMP  LBB0_59                 // <--                                  // jmp	.LBB0_59

LBB0_5:
	CMPL CX, $0x1000000          // <--                                  // cmp	ecx, 16777216
	JAE  LBB0_6                  // <--                                  // jae	.LBB0_6
	MOVW CX, 0(AX)               // <--                                  // mov	word ptr [rax], cx
	WORD $0xe9c1; BYTE $0x10     // SHRL $0x10, CX                       // shr	ecx, 16
	MOVB CL, 0x2(AX)             // <--                                  // mov	byte ptr [rax + 2], cl
	WORD $0xb141; BYTE $0x02     // MOVL $0x2, R9                        // mov	r9b, 2
	LONG $0x000003b9; BYTE $0x00 // MOVL $0x3, CX                        // mov	ecx, 3
	ADDQ CX, AX                  // <--                                  // add	rax, rcx
	CMPL SI, $0x1                // <--                                  // cmp	esi, 1
	JNE  LBB0_11                 // <--                                  // jne	.LBB0_11
	JMP  LBB0_59                 // <--                                  // jmp	.LBB0_59

LBB0_6:
	WORD $0x0889                 // MOVL CX, 0(AX)                       // mov	dword ptr [rax], ecx
	WORD $0xb141; BYTE $0x03     // MOVL $0x3, R9                        // mov	r9b, 3
	LONG $0x000004b9; BYTE $0x00 // MOVL $0x4, CX                        // mov	ecx, 4
	ADDQ CX, AX                  // <--                                  // add	rax, rcx
	CMPL SI, $0x1                // <--                                  // cmp	esi, 1
	JE   LBB0_59                 // <--                                  // je	.LBB0_59

LBB0_11:
	WORD $0x4f8b; BYTE $0x04       // MOVL 0x4(DI), CX                     // mov	ecx, dword ptr [rdi + 4]
	CMPL CX, $0x100                // <--                                  // cmp	ecx, 256
	JAE  LBB0_12                   // <--                                  // jae	.LBB0_12
	MOVB CL, 0(AX)                 // <--                                  // mov	byte ptr [rax], cl
	LONG $0x0001ba41; WORD $0x0000 // MOVL $0x1, R10                       // mov	r10d, 1
	XORL CX, CX                    // <--                                  // xor	ecx, ecx
	JMP  LBB0_18                   // <--                                  // jmp	.LBB0_18

LBB0_12:
	CMPL CX, $0x10000              // <--                                  // cmp	ecx, 65536
	JAE  LBB0_13                   // <--                                  // jae	.LBB0_13
	MOVW CX, 0(AX)                 // <--                                  // mov	word ptr [rax], cx
	WORD $0x04b1                   // MOVL $0x4, CL                        // mov	cl, 4
	LONG $0x0002ba41; WORD $0x0000 // MOVL $0x2, R10                       // mov	r10d, 2
	JMP  LBB0_18                   // <--                                  // jmp	.LBB0_18

LBB0_13:
	CMPL CX, $0x1000000            // <--                                  // cmp	ecx, 16777216
	JAE  LBB0_14                   // <--                                  // jae	.LBB0_14
	MOVW CX, 0(AX)                 // <--                                  // mov	word ptr [rax], cx
	WORD $0xe9c1; BYTE $0x10       // SHRL $0x10, CX                       // shr	ecx, 16
	MOVB CL, 0x2(AX)               // <--                                  // mov	byte ptr [rax + 2], cl
	WORD $0x08b1                   // MOVL $0x8, CL                        // mov	cl, 8
	LONG $0x0003ba41; WORD $0x0000 // MOVL $0x3, R10                       // mov	r10d, 3
	JMP  LBB0_18                   // <--                                  // jmp	.LBB0_18

LBB0_14:
	WORD $0x0889                   // MOVL CX, 0(AX)                       // mov	dword ptr [rax], ecx
	WORD $0x0cb1                   // MOVL $0xc, CL                        // mov	cl, 12
	LONG $0x0004ba41; WORD $0x0000 // MOVL $0x4, R10                       // mov	r10d, 4

LBB0_18:
	ADDQ R10, AX                   // <--                                  // add	rax, r10
	WORD $0x0841; BYTE $0xc9       // ORL CL, R9                           // or	r9b, cl
	CMPL SI, $0x2                  // <--                                  // cmp	esi, 2
	JE   LBB0_59                   // <--                                  // je	.LBB0_59
	WORD $0x4f8b; BYTE $0x08       // MOVL 0x8(DI), CX                     // mov	ecx, dword ptr [rdi + 8]
	CMPL CX, $0x100                // <--                                  // cmp	ecx, 256
	JAE  LBB0_20                   // <--                                  // jae	.LBB0_20
	MOVB CL, 0(AX)                 // <--                                  // mov	byte ptr [rax], cl
	LONG $0x0001ba41; WORD $0x0000 // MOVL $0x1, R10                       // mov	r10d, 1
	XORL CX, CX                    // <--                                  // xor	ecx, ecx
	JMP  LBB0_26                   // <--                                  // jmp	.LBB0_26

LBB0_20:
	CMPL CX, $0x10000              // <--                                  // cmp	ecx, 65536
	JAE  LBB0_21                   // <--                                  // jae	.LBB0_21
	MOVW CX, 0(AX)                 // <--                                  // mov	word ptr [rax], cx
	WORD $0x10b1                   // MOVL $0x10, CL                       // mov	cl, 16
	LONG $0x0002ba41; WORD $0x0000 // MOVL $0x2, R10                       // mov	r10d, 2
	JMP  LBB0_26                   // <--                                  // jmp	.LBB0_26

LBB0_21:
	CMPL CX, $0x1000000            // <--                                  // cmp	ecx, 16777216
	JAE  LBB0_22                   // <--                                  // jae	.LBB0_22
	MOVW CX, 0(AX)                 // <--                                  // mov	word ptr [rax], cx
	WORD $0xe9c1; BYTE $0x10       // SHRL $0x10, CX                       // shr	ecx, 16
	MOVB CL, 0x2(AX)               // <--                                  // mov	byte ptr [rax + 2], cl
	WORD $0x20b1                   // MOVL $0x20, CL                       // mov	cl, 32
	LONG $0x0003ba41; WORD $0x0000 // MOVL $0x3, R10                       // mov	r10d, 3
	JMP  LBB0_26                   // <--                                  // jmp	.LBB0_26

LBB0_22:
	WORD $0x0889                   // MOVL CX, 0(AX)                       // mov	dword ptr [rax], ecx
	WORD $0x30b1                   // MOVL $0x30, CL                       // mov	cl, 48
	LONG $0x0004ba41; WORD $0x0000 // MOVL $0x4, R10                       // mov	r10d, 4

LBB0_26:
	ADDQ R10, AX                   // <--                                  // add	rax, r10
	WORD $0x0841; BYTE $0xc9       // ORL CL, R9                           // or	r9b, cl
	CMPL SI, $0x3                  // <--                                  // cmp	esi, 3
	JE   LBB0_59                   // <--                                  // je	.LBB0_59
	WORD $0x4f8b; BYTE $0x0c       // MOVL 0xc(DI), CX                     // mov	ecx, dword ptr [rdi + 12]
	CMPL CX, $0x100                // <--                                  // cmp	ecx, 256
	JAE  LBB0_28                   // <--                                  // jae	.LBB0_28
	MOVB CL, 0(AX)                 // <--                                  // mov	byte ptr [rax], cl
	LONG $0x0001ba41; WORD $0x0000 // MOVL $0x1, R10                       // mov	r10d, 1
	XORL CX, CX                    // <--                                  // xor	ecx, ecx
	JMP  LBB0_34                   // <--                                  // jmp	.LBB0_34

LBB0_28:
	CMPL CX, $0x10000              // <--                                  // cmp	ecx, 65536
	JAE  LBB0_29                   // <--                                  // jae	.LBB0_29
	MOVW CX, 0(AX)                 // <--                                  // mov	word ptr [rax], cx
	WORD $0x40b1                   // MOVL $0x40, CL                       // mov	cl, 64
	LONG $0x0002ba41; WORD $0x0000 // MOVL $0x2, R10                       // mov	r10d, 2
	JMP  LBB0_34                   // <--                                  // jmp	.LBB0_34

LBB0_29:
	CMPL CX, $0x1000000            // <--                                  // cmp	ecx, 16777216
	JAE  LBB0_30                   // <--                                  // jae	.LBB0_30
	MOVW CX, 0(AX)                 // <--                                  // mov	word ptr [rax], cx
	WORD $0xe9c1; BYTE $0x10       // SHRL $0x10, CX                       // shr	ecx, 16
	MOVB CL, 0x2(AX)               // <--                                  // mov	byte ptr [rax + 2], cl
	WORD $0x80b1                   // MOVL $0x80, CL                       // mov	cl, -128
	LONG $0x0003ba41; WORD $0x0000 // MOVL $0x3, R10                       // mov	r10d, 3
	JMP  LBB0_34                   // <--                                  // jmp	.LBB0_34

LBB0_30:
	WORD $0x0889                   // MOVL CX, 0(AX)                       // mov	dword ptr [rax], ecx
	WORD $0xc0b1                   // MOVL $0xc0, CL                       // mov	cl, -64
	LONG $0x0004ba41; WORD $0x0000 // MOVL $0x4, R10                       // mov	r10d, 4

LBB0_34:
	ADDQ R10, AX                 // <--                                  // add	rax, r10
	WORD $0x0841; BYTE $0xc9     // ORL CL, R9                           // or	r9b, cl
	CMPL SI, $0x4                // <--                                  // cmp	esi, 4
	JE   LBB0_59                 // <--                                  // je	.LBB0_59
	MOVB R9, 0(R8)               // <--                                  // mov	byte ptr [r8], r9b
	WORD $0x4f8b; BYTE $0x10     // MOVL 0x10(DI), CX                    // mov	ecx, dword ptr [rdi + 16]
	CMPL CX, $0x100              // <--                                  // cmp	ecx, 256
	JAE  LBB0_36                 // <--                                  // jae	.LBB0_36
	MOVB CL, 0(AX)               // <--                                  // mov	byte ptr [rax], cl
	LONG $0x000001b9; BYTE $0x00 // MOVL $0x1, CX                        // mov	ecx, 1
	XORL R9, R9                  // <--                                  // xor	r9d, r9d
	JMP  LBB0_42                 // <--                                  // jmp	.LBB0_42

LBB0_36:
	CMPL CX, $0x10000            // <--                                  // cmp	ecx, 65536
	JAE  LBB0_37                 // <--                                  // jae	.LBB0_37
	MOVW CX, 0(AX)               // <--                                  // mov	word ptr [rax], cx
	MOVW $0x1, R9                // <--                                  // mov	r9w, 1
	LONG $0x000002b9; BYTE $0x00 // MOVL $0x2, CX                        // mov	ecx, 2
	JMP  LBB0_42                 // <--                                  // jmp	.LBB0_42

LBB0_37:
	CMPL CX, $0x1000000          // <--                                  // cmp	ecx, 16777216
	JAE  LBB0_38                 // <--                                  // jae	.LBB0_38
	MOVW CX, 0(AX)               // <--                                  // mov	word ptr [rax], cx
	WORD $0xe9c1; BYTE $0x10     // SHRL $0x10, CX                       // shr	ecx, 16
	MOVB CL, 0x2(AX)             // <--                                  // mov	byte ptr [rax + 2], cl
	MOVW $0x2, R9                // <--                                  // mov	r9w, 2
	LONG $0x000003b9; BYTE $0x00 // MOVL $0x3, CX                        // mov	ecx, 3
	JMP  LBB0_42                 // <--                                  // jmp	.LBB0_42

LBB0_38:
	WORD $0x0889                 // MOVL CX, 0(AX)                       // mov	dword ptr [rax], ecx
	MOVW $0x3, R9                // <--                                  // mov	r9w, 3
	LONG $0x000004b9; BYTE $0x00 // MOVL $0x4, CX                        // mov	ecx, 4

LBB0_42:
	INCQ R8                        // <--                                  // inc	r8
	ADDQ CX, AX                    // <--                                  // add	rax, rcx
	CMPL SI, $0x5                  // <--                                  // cmp	esi, 5
	JE   LBB0_59                   // <--                                  // je	.LBB0_59
	WORD $0x4f8b; BYTE $0x14       // MOVL 0x14(DI), CX                    // mov	ecx, dword ptr [rdi + 20]
	CMPL CX, $0x100                // <--                                  // cmp	ecx, 256
	JAE  LBB0_44                   // <--                                  // jae	.LBB0_44
	MOVB CL, 0(AX)                 // <--                                  // mov	byte ptr [rax], cl
	LONG $0x0001ba41; WORD $0x0000 // MOVL $0x1, R10                       // mov	r10d, 1
	XORL CX, CX                    // <--                                  // xor	ecx, ecx
	JMP  LBB0_50                   // <--                                  // jmp	.LBB0_50

LBB0_44:
	CMPL CX, $0x10000              // <--                                  // cmp	ecx, 65536
	JAE  LBB0_45                   // <--                                  // jae	.LBB0_45
	MOVW CX, 0(AX)                 // <--                                  // mov	word ptr [rax], cx
	MOVW $0x1, CX                  // <--                                  // mov	cx, 1
	LONG $0x0002ba41; WORD $0x0000 // MOVL $0x2, R10                       // mov	r10d, 2
	JMP  LBB0_50                   // <--                                  // jmp	.LBB0_50

LBB0_45:
	CMPL CX, $0x1000000            // <--                                  // cmp	ecx, 16777216
	JAE  LBB0_46                   // <--                                  // jae	.LBB0_46
	MOVW CX, 0(AX)                 // <--                                  // mov	word ptr [rax], cx
	WORD $0xe9c1; BYTE $0x10       // SHRL $0x10, CX                       // shr	ecx, 16
	MOVB CL, 0x2(AX)               // <--                                  // mov	byte ptr [rax + 2], cl
	MOVW $0x2, CX                  // <--                                  // mov	cx, 2
	LONG $0x0003ba41; WORD $0x0000 // MOVL $0x3, R10                       // mov	r10d, 3
	JMP  LBB0_50                   // <--                                  // jmp	.LBB0_50

LBB0_46:
	WORD $0x0889                   // MOVL CX, 0(AX)                       // mov	dword ptr [rax], ecx
	MOVW $0x3, CX                  // <--                                  // mov	cx, 3
	LONG $0x0004ba41; WORD $0x0000 // MOVL $0x4, R10                       // mov	r10d, 4

LBB0_50:
	LONG $0xd9b70f44             // MOVZX CX, R11                        // movzx	r11d, cx
	WORD $0x02b1                 // MOVL $0x2, CL                        // mov	cl, 2
	WORD $0xd341; BYTE $0xe3     // SHLL CL, R11                         // shl	r11d, cl
	ADDQ R10, AX                 // <--                                  // add	rax, r10
	WORD $0x0845; BYTE $0xd9     // ORL R11, R9                          // or	r9b, r11b
	CMPL SI, $0x6                // <--                                  // cmp	esi, 6
	JE   LBB0_59                 // <--                                  // je	.LBB0_59
	WORD $0x4f8b; BYTE $0x18     // MOVL 0x18(DI), CX                    // mov	ecx, dword ptr [rdi + 24]
	CMPL CX, $0x100              // <--                                  // cmp	ecx, 256
	JAE  LBB0_52                 // <--                                  // jae	.LBB0_52
	MOVB CL, 0(AX)               // <--                                  // mov	byte ptr [rax], cl
	LONG $0x000001be; BYTE $0x00 // MOVL $0x1, SI                        // mov	esi, 1
	XORL CX, CX                  // <--                                  // xor	ecx, ecx
	JMP  LBB0_58                 // <--                                  // jmp	.LBB0_58

LBB0_52:
	CMPL CX, $0x10000            // <--                                  // cmp	ecx, 65536
	JAE  LBB0_53                 // <--                                  // jae	.LBB0_53
	MOVW CX, 0(AX)               // <--                                  // mov	word ptr [rax], cx
	MOVW $0x1, CX                // <--                                  // mov	cx, 1
	LONG $0x000002be; BYTE $0x00 // MOVL $0x2, SI                        // mov	esi, 2
	JMP  LBB0_58                 // <--                                  // jmp	.LBB0_58

LBB0_53:
	CMPL CX, $0x1000000          // <--                                  // cmp	ecx, 16777216
	JAE  LBB0_54                 // <--                                  // jae	.LBB0_54
	MOVW CX, 0(AX)               // <--                                  // mov	word ptr [rax], cx
	WORD $0xe9c1; BYTE $0x10     // SHRL $0x10, CX                       // shr	ecx, 16
	MOVB CL, 0x2(AX)             // <--                                  // mov	byte ptr [rax + 2], cl
	MOVW $0x2, CX                // <--                                  // mov	cx, 2
	LONG $0x000003be; BYTE $0x00 // MOVL $0x3, SI                        // mov	esi, 3
	JMP  LBB0_58                 // <--                                  // jmp	.LBB0_58

LBB0_54:
	WORD $0x0889                 // MOVL CX, 0(AX)                       // mov	dword ptr [rax], ecx
	MOVW $0x3, CX                // <--                                  // mov	cx, 3
	LONG $0x000004be; BYTE $0x00 // MOVL $0x4, SI                        // mov	esi, 4

LBB0_58:
	ADDQ SI, AX              // <--                                  // add	rax, rsi
	WORD $0xb70f; BYTE $0xf1 // MOVZX CX, SI                         // movzx	esi, cx
	WORD $0x04b1             // MOVL $0x4, CL                        // mov	cl, 4
	WORD $0xe6d3             // SHLL CL, SI                          // shl	esi, cl
	WORD $0x0841; BYTE $0xf1 // ORL SI, R9                           // or	r9b, sil

LBB0_59:
	MOVB R9, 0(R8) // <--                                  // mov	byte ptr [r8], r9b

LBB0_60:
	SUBQ DX, AX         // <--                                  // sub	rax, rdx
	NOP                 // (skipped)                            // lea	rsp, [rbp - 16]
	MOVQ 8(SP), BX      // <--                                  // pop	rbx
	MOVQ 0(SP), R14     // <--                                  // pop	r14
	NOP                 // (skipped)                            // pop	rbp
	MOVQ AX, ret+32(FP) // <--
	RET                 // <--                                  // ret

LCPI1_0:
LCPI1_1:
LCPI1_2:
LCPI1_3:
LCPI1_4:

DATA LCPI1_0<>+0x00(SB)/8, $0x0101010101010101
DATA LCPI1_0<>+0x08(SB)/8, $0x0101010101010101
GLOBL LCPI1_0<>(SB), (RODATA|NOPTR), $16

DATA LCPI1_1<>+0x00(SB)/8, $0x0804010208040102
DATA LCPI1_1<>+0x08(SB)/8, $0x0804010208040102
GLOBL LCPI1_1<>(SB), (RODATA|NOPTR), $16

DATA LCPI1_2<>+0x00(SB)/8, $0x0303030302020100
DATA LCPI1_2<>+0x08(SB)/8, $0x0303030303030303
GLOBL LCPI1_2<>(SB), (RODATA|NOPTR), $16

DATA LCPI1_3<>+0x00(SB)/8, $0x000000000d090501
DATA LCPI1_3<>+0x08(SB)/8, $0x0000000000000000
GLOBL LCPI1_3<>(SB), (RODATA|NOPTR), $16

DATA LCPI1_4<>+0x00(SB)/8, $0x0101010110400104
DATA LCPI1_4<>+0x08(SB)/8, $0x0000000000000000
GLOBL LCPI1_4<>(SB), (RODATA|NOPTR), $16

TEXT Â·svb_encode_alt(SB), 0, $8-40
	MOVQ in+0(FP), DI
	MOVQ in_len+8(FP), SI
	MOVQ in_cap+16(FP), DX
	MOVQ out+24(FP), CX
	NOP                    // (skipped)                            // push	rbp
	NOP                    // (skipped)                            // mov	rbp, rsp
	MOVQ BX, 0(SP)         // <--                                  // push	rbx
	ANDQ $-0x8, SP         // <--                                  // and	rsp, -8
	LONG $0x034e8d44       // LEAL 0x3(SI), R9                     // lea	r9d, [rsi + 3]
	LONG $0x02e9c141       // SHRL $0x2, R9                        // shr	r9d, 2
	ADDQ CX, R9            // <--                                  // add	r9, rcx
	CMPL SI, $0x4          // <--                                  // cmp	esi, 4
	JAE  LBB1_32           // <--                                  // jae	.LBB1_32
	MOVQ R9, AX            // <--                                  // mov	rax, r9
	MOVQ CX, DX            // <--                                  // mov	rdx, rcx
	JMP  LBB1_2            // <--                                  // jmp	.LBB1_2

LBB1_32:
	WORD $0x8941; BYTE $0xf0                  // MOVL SI, R8                          // mov	r8d, esi
	LONG $0x02e8c141                          // SHRL $0x2, R8                        // shr	r8d, 2
	LONG $0xc0ef0f66                          // PXOR X0, X0                          // pxor	xmm0, xmm0
	MOVO LCPI1_0<>(SB), X1                    // <--                                  // movdqa	xmm1, xmmword ptr [rip + .LCPI1_0]
	MOVO LCPI1_1<>(SB), X2                    // <--                                  // movdqa	xmm2, xmmword ptr [rip + .LCPI1_1]
	MOVO LCPI1_2<>(SB), X3                    // <--                                  // movdqa	xmm3, xmmword ptr [rip + .LCPI1_2]
	MOVO LCPI1_3<>(SB), X4                    // <--                                  // movdqa	xmm4, xmmword ptr [rip + .LCPI1_3]
	MOVO LCPI1_4<>(SB), X5                    // <--                                  // movdqa	xmm5, xmmword ptr [rip + .LCPI1_4]
	LEAQ lengthTable_0124<>(SB), R10          // <--                                  // lea	r10, [rip + lengthTable_0124]
	LEAQ encodingShuffleTable_0124<>(SB), R11 // <--                                  // lea	r11, [rip + encodingShuffleTable_0124]
	MOVQ CX, DX                               // <--                                  // mov	rdx, rcx

LBB1_33:
	LONG $0x376f0ff3                           // MOVDQU 0(DI), X6                     // movdqu	xmm6, xmmword ptr [rdi]
	LONG $0xfe6f0f66                           // MOVDQA X6, X7                        // movdqa	xmm7, xmm6
	LONG $0xf8740f66                           // PCMPEQB X0, X7                       // pcmpeqb	xmm7, xmm0
	LONG $0xf9df0f66                           // PANDN X1, X7                         // pandn	xmm7, xmm1
	LONG $0xfaf50f66                           // PMADDWD X2, X7                       // pmaddwd	xmm7, xmm2
	LONG $0x6f0f4466; BYTE $0xc3               // MOVDQA X3, X8                        // movdqa	xmm8, xmm3
	LONG $0x380f4466; WORD $0xc700             // PSHUFB X7, X8                        // pshufb	xmm8, xmm7
	LONG $0x380f4466; WORD $0xc400             // PSHUFB X4, X8                        // pshufb	xmm8, xmm4
	LONG $0xf50f4466; BYTE $0xc5               // PMADDWD X5, X8                       // pmaddwd	xmm8, xmm5
	LONG $0x3a0f4466; WORD $0xc314; BYTE $0x01 // PEXTRB $0x1, X8, BX                  // pextrb	ebx, xmm8, 1
	LONG $0x04b60f42; BYTE $0x13               // MOVZX 0(BX)(R10*1), AX               // movzx	eax, byte ptr [rbx + r10]
	SHLQ $0x4, BX                              // <--                                  // shl	rbx, 4
	LONG $0x380f4266; WORD $0x3400; BYTE $0x1b // PSHUFB 0(BX)(R11*1), X6              // pshufb	xmm6, xmmword ptr [rbx + r11]
	LONG $0x7f0f41f3; BYTE $0x31               // MOVDQU X6, 0(R9)                     // movdqu	xmmword ptr [r9], xmm6
	LONG $0x3a0f4466; WORD $0x0214; BYTE $0x01 // PEXTRB $0x1, X8, 0(DX)               // pextrb	byte ptr [rdx], xmm8, 1
	ADDQ R9, AX                                // <--                                  // add	rax, r9
	INCQ DX                                    // <--                                  // inc	rdx
	ADDQ $0x10, DI                             // <--                                  // add	rdi, 16
	MOVQ AX, R9                                // <--                                  // mov	r9, rax
	WORD $0xff41; BYTE $0xc8                   // DECL R8                              // dec	r8d
	JNE  LBB1_33                               // <--                                  // jne	.LBB1_33

LBB1_2:
	LONG $0x03c6f640               // TESTL $0x3, SI                       // test	sil, 3
	JE   LBB1_31                   // <--                                  // je	.LBB1_31
	WORD $0xe683; BYTE $0x03       // ANDL $0x3, SI                        // and	esi, 3
	WORD $0x8b44; BYTE $0x07       // MOVL 0(DI), R8                       // mov	r8d, dword ptr [rdi]
	WORD $0x8545; BYTE $0xc0       // TESTL R8, R8                         // test	r8d, r8d
	JE   LBB1_4                    // <--                                  // je	.LBB1_4
	CMPL R8, $0xff                 // <--                                  // cmp	r8d, 255
	JA   LBB1_7                    // <--                                  // ja	.LBB1_7
	MOVB R8, 0(AX)                 // <--                                  // mov	byte ptr [rax], r8b
	WORD $0xb041; BYTE $0x01       // MOVL $0x1, R8                        // mov	r8b, 1
	LONG $0x0001b941; WORD $0x0000 // MOVL $0x1, R9                        // mov	r9d, 1
	ADDQ R9, AX                    // <--                                  // add	rax, r9
	CMPL SI, $0x1                  // <--                                  // cmp	esi, 1
	JNE  LBB1_12                   // <--                                  // jne	.LBB1_12
	JMP  LBB1_30                   // <--                                  // jmp	.LBB1_30

LBB1_4:
	XORL R8, R8   // <--                                  // xor	r8d, r8d
	CMPL SI, $0x1 // <--                                  // cmp	esi, 1
	JNE  LBB1_12  // <--                                  // jne	.LBB1_12
	JMP  LBB1_30  // <--                                  // jmp	.LBB1_30

LBB1_7:
	CMPL R8, $0xffff               // <--                                  // cmp	r8d, 65535
	JA   LBB1_9                    // <--                                  // ja	.LBB1_9
	MOVW R8, 0(AX)                 // <--                                  // mov	word ptr [rax], r8w
	WORD $0xb041; BYTE $0x02       // MOVL $0x2, R8                        // mov	r8b, 2
	LONG $0x0002b941; WORD $0x0000 // MOVL $0x2, R9                        // mov	r9d, 2
	ADDQ R9, AX                    // <--                                  // add	rax, r9
	CMPL SI, $0x1                  // <--                                  // cmp	esi, 1
	JNE  LBB1_12                   // <--                                  // jne	.LBB1_12
	JMP  LBB1_30                   // <--                                  // jmp	.LBB1_30

LBB1_9:
	WORD $0x8944; BYTE $0x00       // MOVL R8, 0(AX)                       // mov	dword ptr [rax], r8d
	WORD $0xb041; BYTE $0x03       // MOVL $0x3, R8                        // mov	r8b, 3
	LONG $0x0004b941; WORD $0x0000 // MOVL $0x4, R9                        // mov	r9d, 4
	ADDQ R9, AX                    // <--                                  // add	rax, r9
	CMPL SI, $0x1                  // <--                                  // cmp	esi, 1
	JE   LBB1_30                   // <--                                  // je	.LBB1_30

LBB1_12:
	LONG $0x044f8b44               // MOVL 0x4(DI), R9                     // mov	r9d, dword ptr [rdi + 4]
	WORD $0x8545; BYTE $0xc9       // TESTL R9, R9                         // test	r9d, r9d
	JE   LBB1_13                   // <--                                  // je	.LBB1_13
	CMPL R9, $0x100                // <--                                  // cmp	r9d, 256
	JAE  LBB1_15                   // <--                                  // jae	.LBB1_15
	MOVB R9, 0(AX)                 // <--                                  // mov	byte ptr [rax], r9b
	WORD $0xb141; BYTE $0x04       // MOVL $0x4, R9                        // mov	r9b, 4
	LONG $0x0001ba41; WORD $0x0000 // MOVL $0x1, R10                       // mov	r10d, 1
	JMP  LBB1_19                   // <--                                  // jmp	.LBB1_19

LBB1_13:
	XORL R9, R9              // <--                                  // xor	r9d, r9d
	WORD $0x0845; BYTE $0xc8 // ORL R9, R8                           // or	r8b, r9b
	CMPL SI, $0x2            // <--                                  // cmp	esi, 2
	JNE  LBB1_21             // <--                                  // jne	.LBB1_21
	JMP  LBB1_30             // <--                                  // jmp	.LBB1_30

LBB1_15:
	CMPL R9, $0x10000              // <--                                  // cmp	r9d, 65536
	JAE  LBB1_16                   // <--                                  // jae	.LBB1_16
	MOVW R9, 0(AX)                 // <--                                  // mov	word ptr [rax], r9w
	WORD $0xb141; BYTE $0x08       // MOVL $0x8, R9                        // mov	r9b, 8
	LONG $0x0002ba41; WORD $0x0000 // MOVL $0x2, R10                       // mov	r10d, 2
	JMP  LBB1_19                   // <--                                  // jmp	.LBB1_19

LBB1_16:
	WORD $0x8944; BYTE $0x08       // MOVL R9, 0(AX)                       // mov	dword ptr [rax], r9d
	WORD $0xb141; BYTE $0x0c       // MOVL $0xc, R9                        // mov	r9b, 12
	LONG $0x0004ba41; WORD $0x0000 // MOVL $0x4, R10                       // mov	r10d, 4

LBB1_19:
	ADDQ R10, AX             // <--                                  // add	rax, r10
	WORD $0x0845; BYTE $0xc8 // ORL R9, R8                           // or	r8b, r9b
	CMPL SI, $0x2            // <--                                  // cmp	esi, 2
	JE   LBB1_30             // <--                                  // je	.LBB1_30

LBB1_21:
	WORD $0x778b; BYTE $0x08     // MOVL 0x8(DI), SI                     // mov	esi, dword ptr [rdi + 8]
	WORD $0xf685                 // TESTL SI, SI                         // test	esi, esi
	JE   LBB1_22                 // <--                                  // je	.LBB1_22
	CMPL SI, $0x100              // <--                                  // cmp	esi, 256
	JAE  LBB1_24                 // <--                                  // jae	.LBB1_24
	MOVB SI, 0(AX)               // <--                                  // mov	byte ptr [rax], sil
	WORD $0xb640; BYTE $0x10     // MOVL $0x10, SI                       // mov	sil, 16
	LONG $0x000001bf; BYTE $0x00 // MOVL $0x1, DI                        // mov	edi, 1
	JMP  LBB1_28                 // <--                                  // jmp	.LBB1_28

LBB1_22:
	XORL SI, SI  // <--                                  // xor	esi, esi
	JMP  LBB1_29 // <--                                  // jmp	.LBB1_29

LBB1_24:
	CMPL SI, $0x10000            // <--                                  // cmp	esi, 65536
	JAE  LBB1_25                 // <--                                  // jae	.LBB1_25
	MOVW SI, 0(AX)               // <--                                  // mov	word ptr [rax], si
	WORD $0xb640; BYTE $0x20     // MOVL $0x20, SI                       // mov	sil, 32
	LONG $0x000002bf; BYTE $0x00 // MOVL $0x2, DI                        // mov	edi, 2
	JMP  LBB1_28                 // <--                                  // jmp	.LBB1_28

LBB1_25:
	WORD $0x3089                 // MOVL SI, 0(AX)                       // mov	dword ptr [rax], esi
	WORD $0xb640; BYTE $0x30     // MOVL $0x30, SI                       // mov	sil, 48
	LONG $0x000004bf; BYTE $0x00 // MOVL $0x4, DI                        // mov	edi, 4

LBB1_28:
	ADDQ DI, AX // <--                                  // add	rax, rdi

LBB1_29:
	WORD $0x0841; BYTE $0xf0 // ORL SI, R8                           // or	r8b, sil

LBB1_30:
	MOVB R8, 0(DX) // <--                                  // mov	byte ptr [rdx], r8b

LBB1_31:
	SUBQ CX, AX         // <--                                  // sub	rax, rcx
	NOP                 // (skipped)                            // lea	rsp, [rbp - 8]
	MOVQ 0(SP), BX      // <--                                  // pop	rbx
	NOP                 // (skipped)                            // pop	rbp
	MOVQ AX, ret+32(FP) // <--
	RET                 // <--                                  // ret

TEXT Â·svb_decode(SB), 0, $40-48
	MOVQ in+0(FP), DI
	MOVQ in_len+8(FP), SI
	MOVQ in_cap+16(FP), DX
	MOVQ count+24(FP), CX
	MOVQ out+32(FP), R8
	WORD $0x8548; BYTE $0xc9 // TESTQ CX, CX                         // test	rcx, rcx
	JLE  LBB2_1              // <--                                  // jle	.LBB2_1
	NOP                      // (skipped)                            // push	rbp
	NOP                      // (skipped)                            // mov	rbp, rsp
	MOVQ R15, 0(SP)          // <--                                  // push	r15
	MOVQ R14, 8(SP)          // <--                                  // push	r14
	MOVQ R13, 16(SP)         // <--                                  // push	r13
	MOVQ R12, 24(SP)         // <--                                  // push	r12
	MOVQ BX, 32(SP)          // <--                                  // push	rbx
	ANDQ $-0x8, SP           // <--                                  // and	rsp, -8
	MOVQ CX, R14             // <--                                  // mov	r14, rcx
	LEAQ 0x3(CX), AX         // <--                                  // lea	rax, [rcx + 3]
	SHRQ $0x2, AX            // <--                                  // shr	rax, 2
	CMPQ AX, SI              // <--                                  // cmp	rax, rsi
	JBE  LBB2_5              // <--                                  // jbe	.LBB2_5
	XORL AX, AX              // <--                                  // xor	eax, eax
	JMP  LBB2_25             // <--                                  // jmp	.LBB2_25

LBB2_1:
	XORL AX, AX         // <--                                  // xor	eax, eax
	MOVQ AX, ret+40(FP) // <--
	RET                 // <--                                  // ret

LBB2_5:
	WORD $0xc289    // MOVL AX, DX                          // mov	edx, eax
	ADDQ DI, DX     // <--                                  // add	rdx, rdi
	CMPQ R14, $0x20 // <--                                  // cmp	r14, 32
	JB   LBB2_11    // <--                                  // jb	.LBB2_11
	MOVQ R14, R9    // <--                                  // mov	r9, r14
	SHRQ $0x5, R9   // <--                                  // shr	r9, 5
	MOVQ 0(DI), AX  // <--                                  // mov	rax, qword ptr [rdi]
	CMPQ R9, $0x1   // <--                                  // cmp	r9, 1
	JNE  LBB2_8     // <--                                  // jne	.LBB2_8
	MOVQ R8, SI     // <--                                  // mov	rsi, r8
	JMP  LBB2_10    // <--                                  // jmp	.LBB2_10

LBB2_8:
	LONG $0x0001ba41; WORD $0x0000    // MOVL $0x1, R10                       // mov	r10d, 1
	LEAQ shuffleTable_1234<>(SB), R11 // <--                                  // lea	r11, [rip + shuffleTable_1234]
	LEAQ lengthTable_1234<>(SB), BX   // <--                                  // lea	rbx, [rip + lengthTable_1234]
	MOVQ R8, SI                       // <--                                  // mov	rsi, r8

LBB2_9:
	MOVQ 0(DI)(R10*8), R13                     // <--                                  // mov	r13, qword ptr [rdi + 8*r10]
	LONG $0xf8b60f44                           // MOVZX AL, R15                        // movzx	r15d, al
	LONG $0x026f0ff3                           // MOVDQU 0(DX), X0                     // movdqu	xmm0, xmmword ptr [rdx]
	LONG $0x24b60f45; BYTE $0x1f               // MOVZX 0(R15)(BX*1), R12              // movzx	r12d, byte ptr [r15 + rbx]
	SHLQ $0x4, R15                             // <--                                  // shl	r15, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x1f // PSHUFB 0(R15)(R11*1), X0             // pshufb	xmm0, xmmword ptr [r15 + r11]
	LEAQ 0(DX)(R12*1), R15                     // <--                                  // lea	r15, [rdx + r12]
	LONG $0x067f0ff3                           // MOVDQU X0, 0(SI)                     // movdqu	xmmword ptr [rsi], xmm0
	WORD $0xb60f; BYTE $0xcc                   // MOVZX AH, CX                         // movzx	ecx, ah
	LONG $0x6f0f42f3; WORD $0x2204             // MOVDQU 0(DX)(R12*1), X0              // movdqu	xmm0, xmmword ptr [rdx + r12]
	LONG $0x1914b60f                           // MOVZX 0(CX)(BX*1), DX                // movzx	edx, byte ptr [rcx + rbx]
	SHLQ $0x4, CX                              // <--                                  // shl	rcx, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x19 // PSHUFB 0(CX)(R11*1), X0              // pshufb	xmm0, xmmword ptr [rcx + r11]
	LEAQ 0(R15)(DX*1), CX                      // <--                                  // lea	rcx, [r15 + rdx]
	LONG $0x467f0ff3; BYTE $0x10               // MOVDQU X0, 0x10(SI)                  // movdqu	xmmword ptr [rsi + 16], xmm0
	WORD $0x8941; BYTE $0xc4                   // MOVL AX, R12                         // mov	r12d, eax
	LONG $0x10ecc141                           // SHRL $0x10, R12                      // shr	r12d, 16
	LONG $0xe4b60f45                           // MOVZX R12, R12                       // movzx	r12d, r12b
	LONG $0x6f0f42f3; WORD $0x3a04             // MOVDQU 0(DX)(R15*1), X0              // movdqu	xmm0, xmmword ptr [rdx + r15]
	LONG $0x14b60f41; BYTE $0x1c               // MOVZX 0(R12)(BX*1), DX               // movzx	edx, byte ptr [r12 + rbx]
	SHLQ $0x4, R12                             // <--                                  // shl	r12, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x1c // PSHUFB 0(R12)(R11*1), X0             // pshufb	xmm0, xmmword ptr [r12 + r11]
	LONG $0x467f0ff3; BYTE $0x20               // MOVDQU X0, 0x20(SI)                  // movdqu	xmmword ptr [rsi + 32], xmm0
	WORD $0x8941; BYTE $0xc7                   // MOVL AX, R15                         // mov	r15d, eax
	LONG $0x18efc141                           // SHRL $0x18, R15                      // shr	r15d, 24
	LONG $0x046f0ff3; BYTE $0x0a               // MOVDQU 0(DX)(CX*1), X0               // movdqu	xmm0, xmmword ptr [rdx + rcx]
	LONG $0x24b60f45; BYTE $0x1f               // MOVZX 0(R15)(BX*1), R12              // movzx	r12d, byte ptr [r15 + rbx]
	SHLQ $0x4, R15                             // <--                                  // shl	r15, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x1f // PSHUFB 0(R15)(R11*1), X0             // pshufb	xmm0, xmmword ptr [r15 + r11]
	ADDQ DX, CX                                // <--                                  // add	rcx, rdx
	LEAQ 0(CX)(R12*1), DX                      // <--                                  // lea	rdx, [rcx + r12]
	LONG $0x467f0ff3; BYTE $0x30               // MOVDQU X0, 0x30(SI)                  // movdqu	xmmword ptr [rsi + 48], xmm0
	MOVQ AX, R15                               // <--                                  // mov	r15, rax
	SHRQ $0x20, R15                            // <--                                  // shr	r15, 32
	LONG $0xffb60f45                           // MOVZX R15, R15                       // movzx	r15d, r15b
	LONG $0x6f0f41f3; WORD $0x0c04             // MOVDQU 0(R12)(CX*1), X0              // movdqu	xmm0, xmmword ptr [r12 + rcx]
	LONG $0x0cb60f41; BYTE $0x1f               // MOVZX 0(R15)(BX*1), CX               // movzx	ecx, byte ptr [r15 + rbx]
	SHLQ $0x4, R15                             // <--                                  // shl	r15, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x1f // PSHUFB 0(R15)(R11*1), X0             // pshufb	xmm0, xmmword ptr [r15 + r11]
	LONG $0x467f0ff3; BYTE $0x40               // MOVDQU X0, 0x40(SI)                  // movdqu	xmmword ptr [rsi + 64], xmm0
	MOVQ AX, R15                               // <--                                  // mov	r15, rax
	SHRQ $0x28, R15                            // <--                                  // shr	r15, 40
	LONG $0xffb60f45                           // MOVZX R15, R15                       // movzx	r15d, r15b
	LONG $0x046f0ff3; BYTE $0x11               // MOVDQU 0(CX)(DX*1), X0               // movdqu	xmm0, xmmword ptr [rcx + rdx]
	LONG $0x24b60f45; BYTE $0x1f               // MOVZX 0(R15)(BX*1), R12              // movzx	r12d, byte ptr [r15 + rbx]
	SHLQ $0x4, R15                             // <--                                  // shl	r15, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x1f // PSHUFB 0(R15)(R11*1), X0             // pshufb	xmm0, xmmword ptr [r15 + r11]
	ADDQ DX, CX                                // <--                                  // add	rcx, rdx
	LEAQ 0(CX)(R12*1), R15                     // <--                                  // lea	r15, [rcx + r12]
	LONG $0x467f0ff3; BYTE $0x50               // MOVDQU X0, 0x50(SI)                  // movdqu	xmmword ptr [rsi + 80], xmm0
	MOVQ AX, DX                                // <--                                  // mov	rdx, rax
	SHRQ $0x30, DX                             // <--                                  // shr	rdx, 48
	WORD $0xb60f; BYTE $0xd2                   // MOVZX DL, DX                         // movzx	edx, dl
	LONG $0x6f0f41f3; WORD $0x0c04             // MOVDQU 0(R12)(CX*1), X0              // movdqu	xmm0, xmmword ptr [r12 + rcx]
	LONG $0x1a0cb60f                           // MOVZX 0(DX)(BX*1), CX                // movzx	ecx, byte ptr [rdx + rbx]
	SHLQ $0x4, DX                              // <--                                  // shl	rdx, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x1a // PSHUFB 0(DX)(R11*1), X0              // pshufb	xmm0, xmmword ptr [rdx + r11]
	LONG $0x467f0ff3; BYTE $0x60               // MOVDQU X0, 0x60(SI)                  // movdqu	xmmword ptr [rsi + 96], xmm0
	SHRQ $0x38, AX                             // <--                                  // shr	rax, 56
	LONG $0x6f0f42f3; WORD $0x3904             // MOVDQU 0(CX)(R15*1), X0              // movdqu	xmm0, xmmword ptr [rcx + r15]
	LONG $0x1814b60f                           // MOVZX 0(AX)(BX*1), DX                // movzx	edx, byte ptr [rax + rbx]
	SHLQ $0x4, AX                              // <--                                  // shl	rax, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x18 // PSHUFB 0(AX)(R11*1), X0              // pshufb	xmm0, xmmword ptr [rax + r11]
	MOVQ R13, AX                               // <--                                  // mov	rax, r13
	ADDQ CX, DX                                // <--                                  // add	rdx, rcx
	ADDQ R15, DX                               // <--                                  // add	rdx, r15
	LONG $0x467f0ff3; BYTE $0x70               // MOVDQU X0, 0x70(SI)                  // movdqu	xmmword ptr [rsi + 112], xmm0
	SUBQ $-0x80, SI                            // <--                                  // sub	rsi, -128
	INCQ R10                                   // <--                                  // inc	r10
	CMPQ R9, R10                               // <--                                  // cmp	r9, r10
	JNE  LBB2_9                                // <--                                  // jne	.LBB2_9

LBB2_10:
	WORD $0xb60f; BYTE $0xc8                   // MOVZX AL, CX                         // movzx	ecx, al
	LONG $0x026f0ff3                           // MOVDQU 0(DX), X0                     // movdqu	xmm0, xmmword ptr [rdx]
	LEAQ shuffleTable_1234<>(SB), R15          // <--                                  // lea	r15, [rip + shuffleTable_1234]
	LEAQ lengthTable_1234<>(SB), R9            // <--                                  // lea	r9, [rip + lengthTable_1234]
	LONG $0x14b60f46; BYTE $0x09               // MOVZX 0(CX)(R9*1), R10               // movzx	r10d, byte ptr [rcx + r9]
	SHLQ $0x4, CX                              // <--                                  // shl	rcx, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x39 // PSHUFB 0(CX)(R15*1), X0              // pshufb	xmm0, xmmword ptr [rcx + r15]
	LEAQ 0(DX)(R10*1), CX                      // <--                                  // lea	rcx, [rdx + r10]
	LONG $0x067f0ff3                           // MOVDQU X0, 0(SI)                     // movdqu	xmmword ptr [rsi], xmm0
	WORD $0xb60f; BYTE $0xdc                   // MOVZX AH, BX                         // movzx	ebx, ah
	LONG $0x6f0f42f3; WORD $0x1204             // MOVDQU 0(DX)(R10*1), X0              // movdqu	xmm0, xmmword ptr [rdx + r10]
	LONG $0x14b60f42; BYTE $0x0b               // MOVZX 0(BX)(R9*1), DX                // movzx	edx, byte ptr [rbx + r9]
	SHLQ $0x4, BX                              // <--                                  // shl	rbx, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x3b // PSHUFB 0(BX)(R15*1), X0              // pshufb	xmm0, xmmword ptr [rbx + r15]
	LEAQ 0(CX)(DX*1), R10                      // <--                                  // lea	r10, [rcx + rdx]
	LONG $0x467f0ff3; BYTE $0x10               // MOVDQU X0, 0x10(SI)                  // movdqu	xmmword ptr [rsi + 16], xmm0
	WORD $0x8941; BYTE $0xc3                   // MOVL AX, R11                         // mov	r11d, eax
	LONG $0x10ebc141                           // SHRL $0x10, R11                      // shr	r11d, 16
	LONG $0xdbb60f45                           // MOVZX R11, R11                       // movzx	r11d, r11b
	LONG $0x046f0ff3; BYTE $0x0a               // MOVDQU 0(DX)(CX*1), X0               // movdqu	xmm0, xmmword ptr [rdx + rcx]
	LONG $0x0cb60f43; BYTE $0x0b               // MOVZX 0(R11)(R9*1), CX               // movzx	ecx, byte ptr [r11 + r9]
	SHLQ $0x4, R11                             // <--                                  // shl	r11, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x3b // PSHUFB 0(R11)(R15*1), X0             // pshufb	xmm0, xmmword ptr [r11 + r15]
	LEAQ 0(R10)(CX*1), DX                      // <--                                  // lea	rdx, [r10 + rcx]
	LONG $0x467f0ff3; BYTE $0x20               // MOVDQU X0, 0x20(SI)                  // movdqu	xmmword ptr [rsi + 32], xmm0
	WORD $0x8941; BYTE $0xc3                   // MOVL AX, R11                         // mov	r11d, eax
	LONG $0x18ebc141                           // SHRL $0x18, R11                      // shr	r11d, 24
	LONG $0x6f0f42f3; WORD $0x1104             // MOVDQU 0(CX)(R10*1), X0              // movdqu	xmm0, xmmword ptr [rcx + r10]
	LONG $0x0cb60f43; BYTE $0x0b               // MOVZX 0(R11)(R9*1), CX               // movzx	ecx, byte ptr [r11 + r9]
	SHLQ $0x4, R11                             // <--                                  // shl	r11, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x3b // PSHUFB 0(R11)(R15*1), X0             // pshufb	xmm0, xmmword ptr [r11 + r15]
	LONG $0x467f0ff3; BYTE $0x30               // MOVDQU X0, 0x30(SI)                  // movdqu	xmmword ptr [rsi + 48], xmm0
	MOVQ AX, R10                               // <--                                  // mov	r10, rax
	SHRQ $0x20, R10                            // <--                                  // shr	r10, 32
	LONG $0xd2b60f45                           // MOVZX R10, R10                       // movzx	r10d, r10b
	LONG $0x046f0ff3; BYTE $0x11               // MOVDQU 0(CX)(DX*1), X0               // movdqu	xmm0, xmmword ptr [rcx + rdx]
	LONG $0x1cb60f47; BYTE $0x0a               // MOVZX 0(R10)(R9*1), R11              // movzx	r11d, byte ptr [r10 + r9]
	SHLQ $0x4, R10                             // <--                                  // shl	r10, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x3a // PSHUFB 0(R10)(R15*1), X0             // pshufb	xmm0, xmmword ptr [r10 + r15]
	ADDQ DX, CX                                // <--                                  // add	rcx, rdx
	LEAQ 0(CX)(R11*1), DX                      // <--                                  // lea	rdx, [rcx + r11]
	LONG $0x467f0ff3; BYTE $0x40               // MOVDQU X0, 0x40(SI)                  // movdqu	xmmword ptr [rsi + 64], xmm0
	MOVQ AX, R10                               // <--                                  // mov	r10, rax
	SHRQ $0x28, R10                            // <--                                  // shr	r10, 40
	LONG $0xd2b60f45                           // MOVZX R10, R10                       // movzx	r10d, r10b
	LONG $0x6f0f41f3; WORD $0x0b04             // MOVDQU 0(R11)(CX*1), X0              // movdqu	xmm0, xmmword ptr [r11 + rcx]
	LONG $0x0cb60f43; BYTE $0x0a               // MOVZX 0(R10)(R9*1), CX               // movzx	ecx, byte ptr [r10 + r9]
	SHLQ $0x4, R10                             // <--                                  // shl	r10, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x3a // PSHUFB 0(R10)(R15*1), X0             // pshufb	xmm0, xmmword ptr [r10 + r15]
	LONG $0x467f0ff3; BYTE $0x50               // MOVDQU X0, 0x50(SI)                  // movdqu	xmmword ptr [rsi + 80], xmm0
	MOVQ AX, R10                               // <--                                  // mov	r10, rax
	SHRQ $0x30, R10                            // <--                                  // shr	r10, 48
	LONG $0xd2b60f45                           // MOVZX R10, R10                       // movzx	r10d, r10b
	LONG $0x046f0ff3; BYTE $0x11               // MOVDQU 0(CX)(DX*1), X0               // movdqu	xmm0, xmmword ptr [rcx + rdx]
	LONG $0x1cb60f47; BYTE $0x0a               // MOVZX 0(R10)(R9*1), R11              // movzx	r11d, byte ptr [r10 + r9]
	SHLQ $0x4, R10                             // <--                                  // shl	r10, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x3a // PSHUFB 0(R10)(R15*1), X0             // pshufb	xmm0, xmmword ptr [r10 + r15]
	ADDQ DX, CX                                // <--                                  // add	rcx, rdx
	LONG $0x467f0ff3; BYTE $0x60               // MOVDQU X0, 0x60(SI)                  // movdqu	xmmword ptr [rsi + 96], xmm0
	SHRQ $0x38, AX                             // <--                                  // shr	rax, 56
	LONG $0x6f0f41f3; WORD $0x0b04             // MOVDQU 0(R11)(CX*1), X0              // movdqu	xmm0, xmmword ptr [r11 + rcx]
	LONG $0x14b60f42; BYTE $0x08               // MOVZX 0(AX)(R9*1), DX                // movzx	edx, byte ptr [rax + r9]
	SHLQ $0x4, AX                              // <--                                  // shl	rax, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x38 // PSHUFB 0(AX)(R15*1), X0              // pshufb	xmm0, xmmword ptr [rax + r15]
	ADDQ R11, DX                               // <--                                  // add	rdx, r11
	ADDQ CX, DX                                // <--                                  // add	rdx, rcx
	LONG $0x467f0ff3; BYTE $0x70               // MOVDQU X0, 0x70(SI)                  // movdqu	xmmword ptr [rsi + 112], xmm0

LBB2_11:
	WORD $0x8944; BYTE $0xf0     // MOVL R14, AX                         // mov	eax, r14d
	WORD $0xe083; BYTE $0xe0     // ANDL $-0x20, AX                      // and	eax, -32
	LEAQ 0(R8)(AX*4), AX         // <--                                  // lea	rax, [r8 + 4*rax]
	WORD $0x8944; BYTE $0xf6     // MOVL R14, SI                         // mov	esi, r14d
	WORD $0xe683; BYTE $0x1f     // ANDL $0x1f, SI                       // and	esi, 31
	JE   LBB2_24                 // <--                                  // je	.LBB2_24
	WORD $0x8548; BYTE $0xd2     // TESTQ DX, DX                         // test	rdx, rdx
	JE   LBB2_24                 // <--                                  // je	.LBB2_24
	SHRQ $0x2, R14               // <--                                  // shr	r14, 2
	LONG $0xf8e68341             // ANDL $-0x8, R14                      // and	r14d, -8
	LONG $0x0cb60f46; BYTE $0x37 // MOVZX 0(DI)(R14*1), R9               // movzx	r9d, byte ptr [rdi + r14]
	ADDQ R14, DI                 // <--                                  // add	rdi, r14
	INCQ DI                      // <--                                  // inc	rdi
	XORL CX, CX                  // <--                                  // xor	ecx, ecx
	JMP  LBB2_14                 // <--                                  // jmp	.LBB2_14

LBB2_20:
	LONG $0x12b70f44               // MOVZX 0(DX), R10                     // movzx	r10d, word ptr [rdx]
	LONG $0x0002bb41; WORD $0x0000 // MOVL $0x2, R11                       // mov	r11d, 2

LBB2_23:
	ADDQ R11, DX             // <--                                  // add	rdx, r11
	WORD $0x8944; BYTE $0x10 // MOVL R10, 0(AX)                      // mov	dword ptr [rax], r10d
	ADDQ $0x4, AX            // <--                                  // add	rax, 4
	WORD $0xc180; BYTE $0x02 // ADDL $0x2, CL                        // add	cl, 2
	WORD $0xceff             // DECL SI                              // dec	esi
	JE   LBB2_24             // <--                                  // je	.LBB2_24

LBB2_14:
	WORD $0xf980; BYTE $0x08 // CMPL CL, $0x8                        // cmp	cl, 8
	JNE  LBB2_16             // <--                                  // jne	.LBB2_16
	LONG $0x0fb60f44         // MOVZX 0(DI), R9                      // movzx	r9d, byte ptr [rdi]
	INCQ DI                  // <--                                  // inc	rdi
	XORL CX, CX              // <--                                  // xor	ecx, ecx

LBB2_16:
	WORD $0x8945; BYTE $0xca       // MOVL R9, R10                         // mov	r10d, r9d
	WORD $0xd341; BYTE $0xea       // SHRL CL, R10                         // shr	r10d, cl
	LONG $0x03c2f641               // TESTL $0x3, R10                      // test	r10b, 3
	JE   LBB2_21                   // <--                                  // je	.LBB2_21
	LONG $0x03e28341               // ANDL $0x3, R10                       // and	r10d, 3
	CMPL R10, $0x1                 // <--                                  // cmp	r10d, 1
	JE   LBB2_20                   // <--                                  // je	.LBB2_20
	CMPL R10, $0x2                 // <--                                  // cmp	r10d, 2
	JNE  LBB2_22                   // <--                                  // jne	.LBB2_22
	LONG $0x1ab70f44               // MOVZX 0(DX), R11                     // movzx	r11d, word ptr [rdx]
	LONG $0x52b60f44; BYTE $0x02   // MOVZX 0x2(DX), R10                   // movzx	r10d, byte ptr [rdx + 2]
	LONG $0x10e2c141               // SHLL $0x10, R10                      // shl	r10d, 16
	WORD $0x0945; BYTE $0xda       // ORL R11, R10                         // or	r10d, r11d
	LONG $0x0003bb41; WORD $0x0000 // MOVL $0x3, R11                       // mov	r11d, 3
	JMP  LBB2_23                   // <--                                  // jmp	.LBB2_23

LBB2_21:
	LONG $0x12b60f44               // MOVZX 0(DX), R10                     // movzx	r10d, byte ptr [rdx]
	LONG $0x0001bb41; WORD $0x0000 // MOVL $0x1, R11                       // mov	r11d, 1
	JMP  LBB2_23                   // <--                                  // jmp	.LBB2_23

LBB2_22:
	WORD $0x8b44; BYTE $0x12       // MOVL 0(DX), R10                      // mov	r10d, dword ptr [rdx]
	LONG $0x0004bb41; WORD $0x0000 // MOVL $0x4, R11                       // mov	r11d, 4
	JMP  LBB2_23                   // <--                                  // jmp	.LBB2_23

LBB2_24:
	SUBQ R8, AX              // <--                                  // sub	rax, r8
	SARQ $0x2, AX            // <--                                  // sar	rax, 2
	WORD $0x8548; BYTE $0xd2 // TESTQ DX, DX                         // test	rdx, rdx
	LONG $0xc2440f48         // CMOVE DX, AX                         // cmove	rax, rdx

LBB2_25:
	NOP                 // (skipped)                            // lea	rsp, [rbp - 40]
	MOVQ 32(SP), BX     // <--                                  // pop	rbx
	MOVQ 24(SP), R12    // <--                                  // pop	r12
	MOVQ 16(SP), R13    // <--                                  // pop	r13
	MOVQ 8(SP), R14     // <--                                  // pop	r14
	MOVQ 0(SP), R15     // <--                                  // pop	r15
	NOP                 // (skipped)                            // pop	rbp
	MOVQ AX, ret+40(FP) // <--
	RET                 // <--                                  // ret

TEXT Â·svb_decode_alt(SB), 0, $64-48
	MOVQ in+0(FP), DI
	MOVQ in_len+8(FP), SI
	MOVQ in_cap+16(FP), DX
	MOVQ count+24(FP), CX
	MOVQ out+32(FP), R8
	WORD $0x8548; BYTE $0xc9 // TESTQ CX, CX                         // test	rcx, rcx
	JLE  LBB3_3              // <--                                  // jle	.LBB3_3
	LEAQ 0x3(CX), AX         // <--                                  // lea	rax, [rcx + 3]
	SHRQ $0x2, AX            // <--                                  // shr	rax, 2
	CMPQ AX, SI              // <--                                  // cmp	rax, rsi
	JBE  LBB3_4              // <--                                  // jbe	.LBB3_4

LBB3_3:
	XORL AX, AX         // <--                                  // xor	eax, eax
	MOVQ AX, ret+40(FP) // <--
	RET                 // <--                                  // ret

LBB3_4:
	NOP              // (skipped)                            // push	rbp
	NOP              // (skipped)                            // mov	rbp, rsp
	MOVQ R15, 24(SP) // <--                                  // push	r15
	MOVQ R14, 32(SP) // <--                                  // push	r14
	MOVQ R13, 40(SP) // <--                                  // push	r13
	MOVQ R12, 48(SP) // <--                                  // push	r12
	MOVQ BX, 56(SP)  // <--                                  // push	rbx
	ANDQ $-0x8, SP   // <--                                  // and	rsp, -8
	NOP              // (skipped)                            // sub	rsp, 24
	WORD $0xc289     // MOVL AX, DX                          // mov	edx, eax
	ADDQ DI, DX      // <--                                  // add	rdx, rdi
	CMPQ CX, $0x20   // <--                                  // cmp	rcx, 32
	JB   LBB3_11     // <--                                  // jb	.LBB3_11
	MOVQ CX, R9      // <--                                  // mov	r9, rcx
	SHRQ $0x5, R9    // <--                                  // shr	r9, 5
	MOVQ 0(DI), AX   // <--                                  // mov	rax, qword ptr [rdi]
	CMPQ R9, $0x1    // <--                                  // cmp	r9, 1
	JNE  LBB3_7      // <--                                  // jne	.LBB3_7
	MOVQ R8, SI      // <--                                  // mov	rsi, r8
	JMP  LBB3_10     // <--                                  // jmp	.LBB3_10

LBB3_7:
	MOVQ CX, 0x8(SP)                 // <--                                  // mov	qword ptr [rsp + 8], rcx
	LONG $0x0001ba41; WORD $0x0000   // MOVL $0x1, R10                       // mov	r10d, 1
	LEAQ lengthTable_0124<>(SB), R11 // <--                                  // lea	r11, [rip + lengthTable_0124]
	LEAQ shuffleTable_0124<>(SB), BX // <--                                  // lea	rbx, [rip + shuffleTable_0124]
	MOVQ R8, 0x10(SP)                // <--                                  // mov	qword ptr [rsp + 16], r8
	MOVQ R8, SI                      // <--                                  // mov	rsi, r8

LBB3_8:
	MOVQ 0(DI)(R10*8), R14                     // <--                                  // mov	r14, qword ptr [rdi + 8*r10]
	LONG $0xf8b60f44                           // MOVZX AL, R15                        // movzx	r15d, al
	LONG $0x24b60f47; BYTE $0x1f               // MOVZX 0(R15)(R11*1), R12             // movzx	r12d, byte ptr [r15 + r11]
	LONG $0x026f0ff3                           // MOVDQU 0(DX), X0                     // movdqu	xmm0, xmmword ptr [rdx]
	SHLQ $0x4, R15                             // <--                                  // shl	r15, 4
	LONG $0x380f4166; WORD $0x0400; BYTE $0x1f // PSHUFB 0(R15)(BX*1), X0              // pshufb	xmm0, xmmword ptr [r15 + rbx]
	LEAQ 0(DX)(R12*1), R15                     // <--                                  // lea	r15, [rdx + r12]
	LONG $0x067f0ff3                           // MOVDQU X0, 0(SI)                     // movdqu	xmmword ptr [rsi], xmm0
	WORD $0xb60f; BYTE $0xcc                   // MOVZX AH, CX                         // movzx	ecx, ah
	LONG $0x2cb60f46; BYTE $0x19               // MOVZX 0(CX)(R11*1), R13              // movzx	r13d, byte ptr [rcx + r11]
	LONG $0x6f0f42f3; WORD $0x2204             // MOVDQU 0(DX)(R12*1), X0              // movdqu	xmm0, xmmword ptr [rdx + r12]
	SHLQ $0x4, CX                              // <--                                  // shl	rcx, 4
	LONG $0x00380f66; WORD $0x1904             // PSHUFB 0(CX)(BX*1), X0               // pshufb	xmm0, xmmword ptr [rcx + rbx]
	LEAQ 0(R15)(R13*1), CX                     // <--                                  // lea	rcx, [r15 + r13]
	LONG $0x467f0ff3; BYTE $0x10               // MOVDQU X0, 0x10(SI)                  // movdqu	xmmword ptr [rsi + 16], xmm0
	WORD $0xc289                               // MOVL AX, DX                          // mov	edx, eax
	WORD $0xeac1; BYTE $0x10                   // SHRL $0x10, DX                       // shr	edx, 16
	WORD $0xb60f; BYTE $0xd2                   // MOVZX DL, DX                         // movzx	edx, dl
	LONG $0x24b60f46; BYTE $0x1a               // MOVZX 0(DX)(R11*1), R12              // movzx	r12d, byte ptr [rdx + r11]
	LONG $0x6f0f43f3; WORD $0x3d44; BYTE $0x00 // MOVDQU 0(R13)(R15*1), X0             // movdqu	xmm0, xmmword ptr [r13 + r15]
	SHLQ $0x4, DX                              // <--                                  // shl	rdx, 4
	LONG $0x00380f66; WORD $0x1a04             // PSHUFB 0(DX)(BX*1), X0               // pshufb	xmm0, xmmword ptr [rdx + rbx]
	LONG $0x467f0ff3; BYTE $0x20               // MOVDQU X0, 0x20(SI)                  // movdqu	xmmword ptr [rsi + 32], xmm0
	WORD $0xc289                               // MOVL AX, DX                          // mov	edx, eax
	WORD $0xeac1; BYTE $0x18                   // SHRL $0x18, DX                       // shr	edx, 24
	LONG $0x3cb60f46; BYTE $0x1a               // MOVZX 0(DX)(R11*1), R15              // movzx	r15d, byte ptr [rdx + r11]
	LONG $0x6f0f41f3; WORD $0x0c04             // MOVDQU 0(R12)(CX*1), X0              // movdqu	xmm0, xmmword ptr [r12 + rcx]
	SHLQ $0x4, DX                              // <--                                  // shl	rdx, 4
	LONG $0x00380f66; WORD $0x1a04             // PSHUFB 0(DX)(BX*1), X0               // pshufb	xmm0, xmmword ptr [rdx + rbx]
	ADDQ R12, CX                               // <--                                  // add	rcx, r12
	LEAQ 0(CX)(R15*1), DX                      // <--                                  // lea	rdx, [rcx + r15]
	LONG $0x467f0ff3; BYTE $0x30               // MOVDQU X0, 0x30(SI)                  // movdqu	xmmword ptr [rsi + 48], xmm0
	MOVQ AX, R12                               // <--                                  // mov	r12, rax
	SHRQ $0x20, R12                            // <--                                  // shr	r12, 32
	LONG $0xe4b60f45                           // MOVZX R12, R12                       // movzx	r12d, r12b
	LONG $0x2cb60f47; BYTE $0x1c               // MOVZX 0(R12)(R11*1), R13             // movzx	r13d, byte ptr [r12 + r11]
	LONG $0x6f0f41f3; WORD $0x0f04             // MOVDQU 0(R15)(CX*1), X0              // movdqu	xmm0, xmmword ptr [r15 + rcx]
	SHLQ $0x4, R12                             // <--                                  // shl	r12, 4
	LONG $0x380f4166; WORD $0x0400; BYTE $0x1c // PSHUFB 0(R12)(BX*1), X0              // pshufb	xmm0, xmmword ptr [r12 + rbx]
	LONG $0x467f0ff3; BYTE $0x40               // MOVDQU X0, 0x40(SI)                  // movdqu	xmmword ptr [rsi + 64], xmm0
	MOVQ AX, CX                                // <--                                  // mov	rcx, rax
	SHRQ $0x28, CX                             // <--                                  // shr	rcx, 40
	WORD $0xb60f; BYTE $0xc9                   // MOVZX CL, CX                         // movzx	ecx, cl
	LONG $0x3cb60f46; BYTE $0x19               // MOVZX 0(CX)(R11*1), R15              // movzx	r15d, byte ptr [rcx + r11]
	LONG $0x6f0f41f3; WORD $0x1544; BYTE $0x00 // MOVDQU 0(R13)(DX*1), X0              // movdqu	xmm0, xmmword ptr [r13 + rdx]
	SHLQ $0x4, CX                              // <--                                  // shl	rcx, 4
	LONG $0x00380f66; WORD $0x1904             // PSHUFB 0(CX)(BX*1), X0               // pshufb	xmm0, xmmword ptr [rcx + rbx]
	LEAQ 0(DX)(R13*1), CX                      // <--                                  // lea	rcx, [rdx + r13]
	LEAQ 0(CX)(R15*1), R12                     // <--                                  // lea	r12, [rcx + r15]
	LONG $0x467f0ff3; BYTE $0x50               // MOVDQU X0, 0x50(SI)                  // movdqu	xmmword ptr [rsi + 80], xmm0
	MOVQ AX, DX                                // <--                                  // mov	rdx, rax
	SHRQ $0x30, DX                             // <--                                  // shr	rdx, 48
	WORD $0xb60f; BYTE $0xd2                   // MOVZX DL, DX                         // movzx	edx, dl
	LONG $0x2cb60f46; BYTE $0x1a               // MOVZX 0(DX)(R11*1), R13              // movzx	r13d, byte ptr [rdx + r11]
	LONG $0x6f0f41f3; WORD $0x0f04             // MOVDQU 0(R15)(CX*1), X0              // movdqu	xmm0, xmmword ptr [r15 + rcx]
	SHLQ $0x4, DX                              // <--                                  // shl	rdx, 4
	LONG $0x00380f66; WORD $0x1a04             // PSHUFB 0(DX)(BX*1), X0               // pshufb	xmm0, xmmword ptr [rdx + rbx]
	LONG $0x467f0ff3; BYTE $0x60               // MOVDQU X0, 0x60(SI)                  // movdqu	xmmword ptr [rsi + 96], xmm0
	SHRQ $0x38, AX                             // <--                                  // shr	rax, 56
	LONG $0x14b60f42; BYTE $0x18               // MOVZX 0(AX)(R11*1), DX               // movzx	edx, byte ptr [rax + r11]
	LONG $0x6f0f43f3; WORD $0x2544; BYTE $0x00 // MOVDQU 0(R13)(R12*1), X0             // movdqu	xmm0, xmmword ptr [r13 + r12]
	SHLQ $0x4, AX                              // <--                                  // shl	rax, 4
	LONG $0x00380f66; WORD $0x1804             // PSHUFB 0(AX)(BX*1), X0               // pshufb	xmm0, xmmword ptr [rax + rbx]
	MOVQ R14, AX                               // <--                                  // mov	rax, r14
	ADDQ R13, DX                               // <--                                  // add	rdx, r13
	ADDQ R12, DX                               // <--                                  // add	rdx, r12
	LONG $0x467f0ff3; BYTE $0x70               // MOVDQU X0, 0x70(SI)                  // movdqu	xmmword ptr [rsi + 112], xmm0
	SUBQ $-0x80, SI                            // <--                                  // sub	rsi, -128
	INCQ R10                                   // <--                                  // inc	r10
	CMPQ R9, R10                               // <--                                  // cmp	r9, r10
	JNE  LBB3_8                                // <--                                  // jne	.LBB3_8
	MOVQ 0x10(SP), R8                          // <--                                  // mov	r8, qword ptr [rsp + 16]
	MOVQ 0x8(SP), CX                           // <--                                  // mov	rcx, qword ptr [rsp + 8]

LBB3_10:
	LONG $0xd8b60f44                           // MOVZX AL, R11                        // movzx	r11d, al
	LEAQ lengthTable_0124<>(SB), R14           // <--                                  // lea	r14, [rip + lengthTable_0124]
	LONG $0x14b60f47; BYTE $0x33               // MOVZX 0(R11)(R14*1), R10             // movzx	r10d, byte ptr [r11 + r14]
	LONG $0x026f0ff3                           // MOVDQU 0(DX), X0                     // movdqu	xmm0, xmmword ptr [rdx]
	SHLQ $0x4, R11                             // <--                                  // shl	r11, 4
	LEAQ shuffleTable_0124<>(SB), R9           // <--                                  // lea	r9, [rip + shuffleTable_0124]
	LONG $0x380f4366; WORD $0x0400; BYTE $0x0b // PSHUFB 0(R11)(R9*1), X0              // pshufb	xmm0, xmmword ptr [r11 + r9]
	LEAQ 0(DX)(R10*1), R15                     // <--                                  // lea	r15, [rdx + r10]
	LONG $0x067f0ff3                           // MOVDQU X0, 0(SI)                     // movdqu	xmmword ptr [rsi], xmm0
	WORD $0xb60f; BYTE $0xdc                   // MOVZX AH, BX                         // movzx	ebx, ah
	LONG $0x1cb60f46; BYTE $0x33               // MOVZX 0(BX)(R14*1), R11              // movzx	r11d, byte ptr [rbx + r14]
	LONG $0x6f0f42f3; WORD $0x1204             // MOVDQU 0(DX)(R10*1), X0              // movdqu	xmm0, xmmword ptr [rdx + r10]
	SHLQ $0x4, BX                              // <--                                  // shl	rbx, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x0b // PSHUFB 0(BX)(R9*1), X0               // pshufb	xmm0, xmmword ptr [rbx + r9]
	LEAQ 0(R15)(R11*1), DX                     // <--                                  // lea	rdx, [r15 + r11]
	LONG $0x467f0ff3; BYTE $0x10               // MOVDQU X0, 0x10(SI)                  // movdqu	xmmword ptr [rsi + 16], xmm0
	WORD $0x8941; BYTE $0xc2                   // MOVL AX, R10                         // mov	r10d, eax
	LONG $0x10eac141                           // SHRL $0x10, R10                      // shr	r10d, 16
	LONG $0xd2b60f45                           // MOVZX R10, R10                       // movzx	r10d, r10b
	LONG $0x1cb60f43; BYTE $0x32               // MOVZX 0(R10)(R14*1), BX              // movzx	ebx, byte ptr [r10 + r14]
	LONG $0x6f0f43f3; WORD $0x3b04             // MOVDQU 0(R11)(R15*1), X0             // movdqu	xmm0, xmmword ptr [r11 + r15]
	SHLQ $0x4, R10                             // <--                                  // shl	r10, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x0a // PSHUFB 0(R10)(R9*1), X0              // pshufb	xmm0, xmmword ptr [r10 + r9]
	LEAQ 0(DX)(BX*1), R15                      // <--                                  // lea	r15, [rdx + rbx]
	LONG $0x467f0ff3; BYTE $0x20               // MOVDQU X0, 0x20(SI)                  // movdqu	xmmword ptr [rsi + 32], xmm0
	WORD $0x8941; BYTE $0xc2                   // MOVL AX, R10                         // mov	r10d, eax
	LONG $0x18eac141                           // SHRL $0x18, R10                      // shr	r10d, 24
	LONG $0x1cb60f47; BYTE $0x32               // MOVZX 0(R10)(R14*1), R11             // movzx	r11d, byte ptr [r10 + r14]
	LONG $0x046f0ff3; BYTE $0x13               // MOVDQU 0(BX)(DX*1), X0               // movdqu	xmm0, xmmword ptr [rbx + rdx]
	SHLQ $0x4, R10                             // <--                                  // shl	r10, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x0a // PSHUFB 0(R10)(R9*1), X0              // pshufb	xmm0, xmmword ptr [r10 + r9]
	LONG $0x467f0ff3; BYTE $0x30               // MOVDQU X0, 0x30(SI)                  // movdqu	xmmword ptr [rsi + 48], xmm0
	MOVQ AX, DX                                // <--                                  // mov	rdx, rax
	SHRQ $0x20, DX                             // <--                                  // shr	rdx, 32
	WORD $0xb60f; BYTE $0xd2                   // MOVZX DL, DX                         // movzx	edx, dl
	LONG $0x14b60f46; BYTE $0x32               // MOVZX 0(DX)(R14*1), R10              // movzx	r10d, byte ptr [rdx + r14]
	LONG $0x6f0f43f3; WORD $0x3b04             // MOVDQU 0(R11)(R15*1), X0             // movdqu	xmm0, xmmword ptr [r11 + r15]
	SHLQ $0x4, DX                              // <--                                  // shl	rdx, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x0a // PSHUFB 0(DX)(R9*1), X0               // pshufb	xmm0, xmmword ptr [rdx + r9]
	ADDQ R11, R15                              // <--                                  // add	r15, r11
	LEAQ 0(R15)(R10*1), DX                     // <--                                  // lea	rdx, [r15 + r10]
	LONG $0x467f0ff3; BYTE $0x40               // MOVDQU X0, 0x40(SI)                  // movdqu	xmmword ptr [rsi + 64], xmm0
	MOVQ AX, R11                               // <--                                  // mov	r11, rax
	SHRQ $0x28, R11                            // <--                                  // shr	r11, 40
	LONG $0xdbb60f45                           // MOVZX R11, R11                       // movzx	r11d, r11b
	LONG $0x1cb60f43; BYTE $0x33               // MOVZX 0(R11)(R14*1), BX              // movzx	ebx, byte ptr [r11 + r14]
	LONG $0x6f0f43f3; WORD $0x3a04             // MOVDQU 0(R10)(R15*1), X0             // movdqu	xmm0, xmmword ptr [r10 + r15]
	SHLQ $0x4, R11                             // <--                                  // shl	r11, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x0b // PSHUFB 0(R11)(R9*1), X0              // pshufb	xmm0, xmmword ptr [r11 + r9]
	LONG $0x467f0ff3; BYTE $0x50               // MOVDQU X0, 0x50(SI)                  // movdqu	xmmword ptr [rsi + 80], xmm0
	MOVQ AX, R10                               // <--                                  // mov	r10, rax
	SHRQ $0x30, R10                            // <--                                  // shr	r10, 48
	LONG $0xdab60f45                           // MOVZX R10, R11                       // movzx	r11d, r10b
	LONG $0x14b60f47; BYTE $0x33               // MOVZX 0(R11)(R14*1), R10             // movzx	r10d, byte ptr [r11 + r14]
	LONG $0x046f0ff3; BYTE $0x13               // MOVDQU 0(BX)(DX*1), X0               // movdqu	xmm0, xmmword ptr [rbx + rdx]
	SHLQ $0x4, R11                             // <--                                  // shl	r11, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x0b // PSHUFB 0(R11)(R9*1), X0              // pshufb	xmm0, xmmword ptr [r11 + r9]
	LEAQ 0(DX)(BX*1), R11                      // <--                                  // lea	r11, [rdx + rbx]
	LONG $0x467f0ff3; BYTE $0x60               // MOVDQU X0, 0x60(SI)                  // movdqu	xmmword ptr [rsi + 96], xmm0
	SHRQ $0x38, AX                             // <--                                  // shr	rax, 56
	LONG $0x14b60f42; BYTE $0x30               // MOVZX 0(AX)(R14*1), DX               // movzx	edx, byte ptr [rax + r14]
	LONG $0x6f0f43f3; WORD $0x1a04             // MOVDQU 0(R10)(R11*1), X0             // movdqu	xmm0, xmmword ptr [r10 + r11]
	SHLQ $0x4, AX                              // <--                                  // shl	rax, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x08 // PSHUFB 0(AX)(R9*1), X0               // pshufb	xmm0, xmmword ptr [rax + r9]
	ADDQ R10, DX                               // <--                                  // add	rdx, r10
	ADDQ R11, DX                               // <--                                  // add	rdx, r11
	LONG $0x467f0ff3; BYTE $0x70               // MOVDQU X0, 0x70(SI)                  // movdqu	xmmword ptr [rsi + 112], xmm0

LBB3_11:
	WORD $0xc889                 // MOVL CX, AX                          // mov	eax, ecx
	WORD $0xe083; BYTE $0xe0     // ANDL $-0x20, AX                      // and	eax, -32
	LEAQ 0(R8)(AX*4), AX         // <--                                  // lea	rax, [r8 + 4*rax]
	WORD $0xce89                 // MOVL CX, SI                          // mov	esi, ecx
	WORD $0xe683; BYTE $0x1f     // ANDL $0x1f, SI                       // and	esi, 31
	JE   LBB3_23                 // <--                                  // je	.LBB3_23
	WORD $0x8548; BYTE $0xd2     // TESTQ DX, DX                         // test	rdx, rdx
	JE   LBB3_23                 // <--                                  // je	.LBB3_23
	SHRQ $0x2, CX                // <--                                  // shr	rcx, 2
	WORD $0xe183; BYTE $0xf8     // ANDL $-0x8, CX                       // and	ecx, -8
	LONG $0x0cb60f44; BYTE $0x0f // MOVZX 0(DI)(CX*1), R9                // movzx	r9d, byte ptr [rdi + rcx]
	ADDQ CX, DI                  // <--                                  // add	rdi, rcx
	INCQ DI                      // <--                                  // inc	rdi
	XORL CX, CX                  // <--                                  // xor	ecx, ecx
	JMP  LBB3_16                 // <--                                  // jmp	.LBB3_16

LBB3_14:
	LONG $0x12b70f44 // MOVZX 0(DX), R10                     // movzx	r10d, word ptr [rdx]
	ADDQ $0x2, DX    // <--                                  // add	rdx, 2

LBB3_15:
	WORD $0x8944; BYTE $0x10 // MOVL R10, 0(AX)                      // mov	dword ptr [rax], r10d
	ADDQ $0x4, AX            // <--                                  // add	rax, 4
	WORD $0xc180; BYTE $0x02 // ADDL $0x2, CL                        // add	cl, 2
	WORD $0xceff             // DECL SI                              // dec	esi
	JE   LBB3_23             // <--                                  // je	.LBB3_23

LBB3_16:
	WORD $0xf980; BYTE $0x08 // CMPL CL, $0x8                        // cmp	cl, 8
	JNE  LBB3_18             // <--                                  // jne	.LBB3_18
	LONG $0x0fb60f44         // MOVZX 0(DI), R9                      // movzx	r9d, byte ptr [rdi]
	INCQ DI                  // <--                                  // inc	rdi
	XORL CX, CX              // <--                                  // xor	ecx, ecx

LBB3_18:
	WORD $0x8945; BYTE $0xcb // MOVL R9, R11                         // mov	r11d, r9d
	WORD $0xd341; BYTE $0xeb // SHRL CL, R11                         // shr	r11d, cl
	WORD $0x8945; BYTE $0xda // MOVL R11, R10                        // mov	r10d, r11d
	LONG $0x03e28341         // ANDL $0x3, R10                       // and	r10d, 3
	LONG $0x03c3f641         // TESTL $0x3, R11                      // test	r11b, 3
	JE   LBB3_15             // <--                                  // je	.LBB3_15
	CMPL R10, $0x2           // <--                                  // cmp	r10d, 2
	JE   LBB3_14             // <--                                  // je	.LBB3_14
	CMPL R10, $0x1           // <--                                  // cmp	r10d, 1
	JNE  LBB3_22             // <--                                  // jne	.LBB3_22
	LONG $0x12b60f44         // MOVZX 0(DX), R10                     // movzx	r10d, byte ptr [rdx]
	INCQ DX                  // <--                                  // inc	rdx
	JMP  LBB3_15             // <--                                  // jmp	.LBB3_15

LBB3_22:
	WORD $0x8b44; BYTE $0x12 // MOVL 0(DX), R10                      // mov	r10d, dword ptr [rdx]
	ADDQ $0x4, DX            // <--                                  // add	rdx, 4
	JMP  LBB3_15             // <--                                  // jmp	.LBB3_15

LBB3_23:
	SUBQ R8, AX              // <--                                  // sub	rax, r8
	SARQ $0x2, AX            // <--                                  // sar	rax, 2
	WORD $0x8548; BYTE $0xd2 // TESTQ DX, DX                         // test	rdx, rdx
	LONG $0xc2440f48         // CMOVE DX, AX                         // cmove	rax, rdx
	NOP                      // (skipped)                            // lea	rsp, [rbp - 40]
	MOVQ 56(SP), BX          // <--                                  // pop	rbx
	MOVQ 48(SP), R12         // <--                                  // pop	r12
	MOVQ 40(SP), R13         // <--                                  // pop	r13
	MOVQ 32(SP), R14         // <--                                  // pop	r14
	MOVQ 24(SP), R15         // <--                                  // pop	r15
	NOP                      // (skipped)                            // pop	rbp
	MOVQ AX, ret+40(FP)      // <--
	RET                      // <--                                  // ret

LCPI4_0:
LCPI4_1:

DATA LCPI4_0<>+0x00(SB)/8, $0x0101010101010101
DATA LCPI4_0<>+0x08(SB)/8, $0x0101010101010101
GLOBL LCPI4_0<>(SB), (RODATA|NOPTR), $16

DATA LCPI4_1<>+0x00(SB)/8, $0x7f007f007f007f00
DATA LCPI4_1<>+0x08(SB)/8, $0x7f007f007f007f00
GLOBL LCPI4_1<>(SB), (RODATA|NOPTR), $16

TEXT Â·svb_delta_encode(SB), 0, $16-48
	MOVQ    in+0(FP), DI
	MOVQ    in_len+8(FP), SI
	MOVQ    in_cap+16(FP), DX
	MOVLQZX prev+24(FP), CX
	MOVQ    out+32(FP), R8
	NOP                                 // (skipped)                            // push	rbp
	NOP                                 // (skipped)                            // mov	rbp, rsp
	MOVQ    R14, 0(SP)                  // <--                                  // push	r14
	MOVQ    BX, 8(SP)                   // <--                                  // push	rbx
	ANDQ    $-0x8, SP                   // <--                                  // and	rsp, -8
	WORD    $0x468d; BYTE $0x03         // LEAL 0x3(SI), AX                     // lea	eax, [rsi + 3]
	WORD    $0xe8c1; BYTE $0x02         // SHRL $0x2, AX                        // shr	eax, 2
	ADDQ    R8, AX                      // <--                                  // add	rax, r8
	LONG    $0xc16e0f66                 // MOVD CX, X0                          // movd	xmm0, ecx
	LONG    $0xc0700f66; BYTE $0x00     // PSHUFD $0x0, X0, X0                  // pshufd	xmm0, xmm0, 0
	WORD    $0xf189                     // MOVL SI, CX                          // mov	ecx, esi
	WORD    $0xe183; BYTE $0xf8         // ANDL $-0x8, CX                       // and	ecx, -8
	JE      LBB4_1                      // <--                                  // je	.LBB4_1
	LEAQ    0(DI)(CX*4), CX             // <--                                  // lea	rcx, [rdi + 4*rcx]
	LONG    $0xc9ef0f66                 // PXOR X1, X1                          // pxor	xmm1, xmm1
	MOVO    LCPI4_0<>(SB), X2           // <--                                  // movdqa	xmm2, xmmword ptr [rip + .LCPI4_0]
	MOVO    LCPI4_1<>(SB), X3           // <--                                  // movdqa	xmm3, xmmword ptr [rip + .LCPI4_1]
	LEAQ    shuf_lut<>(SB), R9          // <--                                  // lea	r9, [rip + shuf_lut]
	LEAQ    lengthTable_1234<>(SB), R10 // <--                                  // lea	r10, [rip + lengthTable_1234]
	MOVQ    R8, DX                      // <--                                  // mov	rdx, r8
	LONG    $0xe86f0f66                 // MOVDQA X0, X5                        // movdqa	xmm5, xmm0

LBB4_62:
	MOVQ AX, R11                               // <--                                  // mov	r11, rax
	LONG $0x276f0ff3                           // MOVDQU 0(DI), X4                     // movdqu	xmm4, xmmword ptr [rdi]
	LONG $0x476f0ff3; BYTE $0x10               // MOVDQU 0x10(DI), X0                  // movdqu	xmm0, xmmword ptr [rdi + 16]
	LONG $0xf46f0f66                           // MOVDQA X4, X6                        // movdqa	xmm6, xmm4
	LONG $0x0f3a0f66; WORD $0x0cf5             // PALIGNR $0xc, X5, X6                 // palignr	xmm6, xmm5, 12
	LONG $0xf86f0f66                           // MOVDQA X0, X7                        // movdqa	xmm7, xmm0
	LONG $0x0f3a0f66; WORD $0x0cfc             // PALIGNR $0xc, X4, X7                 // palignr	xmm7, xmm4, 12
	LONG $0xe6fa0f66                           // PSUBD X6, X4                         // psubd	xmm4, xmm6
	LONG $0xe86f0f66                           // MOVDQA X0, X5                        // movdqa	xmm5, xmm0
	LONG $0xeffa0f66                           // PSUBD X7, X5                         // psubd	xmm5, xmm7
	LONG $0xf46f0f66                           // MOVDQA X4, X6                        // movdqa	xmm6, xmm4
	LONG $0xf1740f66                           // PCMPEQB X1, X6                       // pcmpeqb	xmm6, xmm1
	LONG $0xf2df0f66                           // PANDN X2, X6                         // pandn	xmm6, xmm2
	LONG $0xfd6f0f66                           // MOVDQA X5, X7                        // movdqa	xmm7, xmm5
	LONG $0xf9740f66                           // PCMPEQB X1, X7                       // pcmpeqb	xmm7, xmm1
	LONG $0xfadf0f66                           // PANDN X2, X7                         // pandn	xmm7, xmm2
	LONG $0xf7670f66                           // PACKUSWB X7, X6                      // packuswb	xmm6, xmm7
	LONG $0xf2ea0f66                           // PMINSW X2, X6                        // pminsw	xmm6, xmm2
	LONG $0xf3dd0f66                           // PADDUSW X3, X6                       // paddusw	xmm6, xmm3
	LONG $0xded70f66                           // PMOVMSKB X6, BX                      // pmovmskb	ebx, xmm6
	WORD $0xd889                               // MOVL BX, AX                          // mov	eax, ebx
	WORD $0xe083; BYTE $0x3f                   // ANDL $0x3f, AX                       // and	eax, 63
	WORD $0xe0c1; BYTE $0x04                   // SHLL $0x4, AX                        // shl	eax, 4
	WORD $0x8941; BYTE $0xde                   // MOVL BX, R14                         // mov	r14d, ebx
	LONG $0x04eec141                           // SHRL $0x4, R14                       // shr	r14d, 4
	LONG $0xf0e68141; WORD $0x0003; BYTE $0x00 // ANDL $svb_encode_alt+16(SB), R14     // and	r14d, 1008
	LONG $0x380f4266; WORD $0x2400; BYTE $0x08 // PSHUFB 0(AX)(R9*1), X4               // pshufb	xmm4, xmmword ptr [rax + r9]
	LONG $0x380f4366; WORD $0x2c00; BYTE $0x0e // PSHUFB 0(R14)(R9*1), X5              // pshufb	xmm5, xmmword ptr [r14 + r9]
	LONG $0x7f0f41f3; BYTE $0x23               // MOVDQU X4, 0(R11)                    // movdqu	xmmword ptr [r11], xmm4
	WORD $0xb60f; BYTE $0xc3                   // MOVZX BL, AX                         // movzx	eax, bl
	LONG $0x34b60f46; BYTE $0x10               // MOVZX 0(AX)(R10*1), R14              // movzx	r14d, byte ptr [rax + r10]
	LONG $0x7f0f43f3; WORD $0x332c             // MOVDQU X5, 0(R11)(R14*1)             // movdqu	xmmword ptr [r11 + r14], xmm5
	WORD $0xd889                               // MOVL BX, AX                          // mov	eax, ebx
	WORD $0xe8c1; BYTE $0x08                   // SHRL $0x8, AX                        // shr	eax, 8
	LONG $0x04b60f42; BYTE $0x10               // MOVZX 0(AX)(R10*1), AX               // movzx	eax, byte ptr [rax + r10]
	ADDQ R14, AX                               // <--                                  // add	rax, r14
	ADDQ R11, AX                               // <--                                  // add	rax, r11
	MOVW BX, 0(DX)                             // <--                                  // mov	word ptr [rdx], bx
	ADDQ $0x2, DX                              // <--                                  // add	rdx, 2
	ADDQ $0x20, DI                             // <--                                  // add	rdi, 32
	LONG $0xe86f0f66                           // MOVDQA X0, X5                        // movdqa	xmm5, xmm0
	CMPQ DI, CX                                // <--                                  // cmp	rdi, rcx
	JNE  LBB4_62                               // <--                                  // jne	.LBB4_62
	MOVQ CX, DI                                // <--                                  // mov	rdi, rcx
	ANDQ $0x7, SI                              // <--                                  // and	rsi, 7
	JNE  LBB4_3                                // <--                                  // jne	.LBB4_3
	JMP  LBB4_60                               // <--                                  // jmp	.LBB4_60

LBB4_1:
	MOVQ R8, DX   // <--                                  // mov	rdx, r8
	ANDQ $0x7, SI // <--                                  // and	rsi, 7
	JE   LBB4_60  // <--                                  // je	.LBB4_60

LBB4_3:
	LONG $0x3a0f4166; WORD $0xc116; BYTE $0x03 // PEXTRD $0x3, X0, R9                  // pextrd	r9d, xmm0, 3
	WORD $0x8b44; BYTE $0x17                   // MOVL 0(DI), R10                      // mov	r10d, dword ptr [rdi]
	WORD $0x8944; BYTE $0xd1                   // MOVL R10, CX                         // mov	ecx, r10d
	WORD $0x2944; BYTE $0xc9                   // SUBL R9, CX                          // sub	ecx, r9d
	CMPL CX, $0x100                            // <--                                  // cmp	ecx, 256
	JAE  LBB4_4                                // <--                                  // jae	.LBB4_4
	MOVB CL, 0(AX)                             // <--                                  // mov	byte ptr [rax], cl
	LONG $0x000001b9; BYTE $0x00               // MOVL $0x1, CX                        // mov	ecx, 1
	XORL R9, R9                                // <--                                  // xor	r9d, r9d
	ADDQ CX, AX                                // <--                                  // add	rax, rcx
	CMPL SI, $0x1                              // <--                                  // cmp	esi, 1
	JNE  LBB4_11                               // <--                                  // jne	.LBB4_11
	JMP  LBB4_59                               // <--                                  // jmp	.LBB4_59

LBB4_4:
	CMPL CX, $0x10000            // <--                                  // cmp	ecx, 65536
	JAE  LBB4_5                  // <--                                  // jae	.LBB4_5
	MOVW CX, 0(AX)               // <--                                  // mov	word ptr [rax], cx
	WORD $0xb141; BYTE $0x01     // MOVL $0x1, R9                        // mov	r9b, 1
	LONG $0x000002b9; BYTE $0x00 // MOVL $0x2, CX                        // mov	ecx, 2
	ADDQ CX, AX                  // <--                                  // add	rax, rcx
	CMPL SI, $0x1                // <--                                  // cmp	esi, 1
	JNE  LBB4_11                 // <--                                  // jne	.LBB4_11
	JMP  LBB4_59                 // <--                                  // jmp	.LBB4_59

LBB4_5:
	CMPL CX, $0x1000000          // <--                                  // cmp	ecx, 16777216
	JAE  LBB4_6                  // <--                                  // jae	.LBB4_6
	MOVW CX, 0(AX)               // <--                                  // mov	word ptr [rax], cx
	WORD $0xe9c1; BYTE $0x10     // SHRL $0x10, CX                       // shr	ecx, 16
	MOVB CL, 0x2(AX)             // <--                                  // mov	byte ptr [rax + 2], cl
	WORD $0xb141; BYTE $0x02     // MOVL $0x2, R9                        // mov	r9b, 2
	LONG $0x000003b9; BYTE $0x00 // MOVL $0x3, CX                        // mov	ecx, 3
	ADDQ CX, AX                  // <--                                  // add	rax, rcx
	CMPL SI, $0x1                // <--                                  // cmp	esi, 1
	JNE  LBB4_11                 // <--                                  // jne	.LBB4_11
	JMP  LBB4_59                 // <--                                  // jmp	.LBB4_59

LBB4_6:
	WORD $0x0889                 // MOVL CX, 0(AX)                       // mov	dword ptr [rax], ecx
	WORD $0xb141; BYTE $0x03     // MOVL $0x3, R9                        // mov	r9b, 3
	LONG $0x000004b9; BYTE $0x00 // MOVL $0x4, CX                        // mov	ecx, 4
	ADDQ CX, AX                  // <--                                  // add	rax, rcx
	CMPL SI, $0x1                // <--                                  // cmp	esi, 1
	JE   LBB4_59                 // <--                                  // je	.LBB4_59

LBB4_11:
	WORD $0x4f8b; BYTE $0x04       // MOVL 0x4(DI), CX                     // mov	ecx, dword ptr [rdi + 4]
	WORD $0x8941; BYTE $0xcb       // MOVL CX, R11                         // mov	r11d, ecx
	WORD $0x2945; BYTE $0xd3       // SUBL R10, R11                        // sub	r11d, r10d
	CMPL R11, $0x100               // <--                                  // cmp	r11d, 256
	JAE  LBB4_12                   // <--                                  // jae	.LBB4_12
	MOVB R11, 0(AX)                // <--                                  // mov	byte ptr [rax], r11b
	LONG $0x0001bb41; WORD $0x0000 // MOVL $0x1, R11                       // mov	r11d, 1
	XORL R10, R10                  // <--                                  // xor	r10d, r10d
	JMP  LBB4_18                   // <--                                  // jmp	.LBB4_18

LBB4_12:
	CMPL R11, $0x10000             // <--                                  // cmp	r11d, 65536
	JAE  LBB4_13                   // <--                                  // jae	.LBB4_13
	MOVW R11, 0(AX)                // <--                                  // mov	word ptr [rax], r11w
	WORD $0xb241; BYTE $0x04       // MOVL $0x4, R10                       // mov	r10b, 4
	LONG $0x0002bb41; WORD $0x0000 // MOVL $0x2, R11                       // mov	r11d, 2
	JMP  LBB4_18                   // <--                                  // jmp	.LBB4_18

LBB4_13:
	CMPL R11, $0x1000000           // <--                                  // cmp	r11d, 16777216
	JAE  LBB4_14                   // <--                                  // jae	.LBB4_14
	MOVW R11, 0(AX)                // <--                                  // mov	word ptr [rax], r11w
	LONG $0x10ebc141               // SHRL $0x10, R11                      // shr	r11d, 16
	MOVB R11, 0x2(AX)              // <--                                  // mov	byte ptr [rax + 2], r11b
	WORD $0xb241; BYTE $0x08       // MOVL $0x8, R10                       // mov	r10b, 8
	LONG $0x0003bb41; WORD $0x0000 // MOVL $0x3, R11                       // mov	r11d, 3
	JMP  LBB4_18                   // <--                                  // jmp	.LBB4_18

LBB4_14:
	WORD $0x8944; BYTE $0x18       // MOVL R11, 0(AX)                      // mov	dword ptr [rax], r11d
	WORD $0xb241; BYTE $0x0c       // MOVL $0xc, R10                       // mov	r10b, 12
	LONG $0x0004bb41; WORD $0x0000 // MOVL $0x4, R11                       // mov	r11d, 4

LBB4_18:
	ADDQ R11, AX                   // <--                                  // add	rax, r11
	WORD $0x0845; BYTE $0xd1       // ORL R10, R9                          // or	r9b, r10b
	CMPL SI, $0x2                  // <--                                  // cmp	esi, 2
	JE   LBB4_59                   // <--                                  // je	.LBB4_59
	LONG $0x085f8b44               // MOVL 0x8(DI), R11                    // mov	r11d, dword ptr [rdi + 8]
	WORD $0x8945; BYTE $0xda       // MOVL R11, R10                        // mov	r10d, r11d
	WORD $0x2941; BYTE $0xca       // SUBL CX, R10                         // sub	r10d, ecx
	CMPL R10, $0x100               // <--                                  // cmp	r10d, 256
	JAE  LBB4_20                   // <--                                  // jae	.LBB4_20
	MOVB R10, 0(AX)                // <--                                  // mov	byte ptr [rax], r10b
	LONG $0x0001ba41; WORD $0x0000 // MOVL $0x1, R10                       // mov	r10d, 1
	XORL CX, CX                    // <--                                  // xor	ecx, ecx
	JMP  LBB4_26                   // <--                                  // jmp	.LBB4_26

LBB4_20:
	CMPL R10, $0x10000             // <--                                  // cmp	r10d, 65536
	JAE  LBB4_21                   // <--                                  // jae	.LBB4_21
	MOVW R10, 0(AX)                // <--                                  // mov	word ptr [rax], r10w
	WORD $0x10b1                   // MOVL $0x10, CL                       // mov	cl, 16
	LONG $0x0002ba41; WORD $0x0000 // MOVL $0x2, R10                       // mov	r10d, 2
	JMP  LBB4_26                   // <--                                  // jmp	.LBB4_26

LBB4_21:
	CMPL R10, $0x1000000           // <--                                  // cmp	r10d, 16777216
	JAE  LBB4_22                   // <--                                  // jae	.LBB4_22
	MOVW R10, 0(AX)                // <--                                  // mov	word ptr [rax], r10w
	LONG $0x10eac141               // SHRL $0x10, R10                      // shr	r10d, 16
	MOVB R10, 0x2(AX)              // <--                                  // mov	byte ptr [rax + 2], r10b
	WORD $0x20b1                   // MOVL $0x20, CL                       // mov	cl, 32
	LONG $0x0003ba41; WORD $0x0000 // MOVL $0x3, R10                       // mov	r10d, 3
	JMP  LBB4_26                   // <--                                  // jmp	.LBB4_26

LBB4_22:
	WORD $0x8944; BYTE $0x10       // MOVL R10, 0(AX)                      // mov	dword ptr [rax], r10d
	WORD $0x30b1                   // MOVL $0x30, CL                       // mov	cl, 48
	LONG $0x0004ba41; WORD $0x0000 // MOVL $0x4, R10                       // mov	r10d, 4

LBB4_26:
	ADDQ R10, AX                   // <--                                  // add	rax, r10
	WORD $0x0841; BYTE $0xc9       // ORL CL, R9                           // or	r9b, cl
	CMPL SI, $0x3                  // <--                                  // cmp	esi, 3
	JE   LBB4_59                   // <--                                  // je	.LBB4_59
	LONG $0x0c578b44               // MOVL 0xc(DI), R10                    // mov	r10d, dword ptr [rdi + 12]
	WORD $0x8944; BYTE $0xd1       // MOVL R10, CX                         // mov	ecx, r10d
	WORD $0x2944; BYTE $0xd9       // SUBL R11, CX                         // sub	ecx, r11d
	CMPL CX, $0x100                // <--                                  // cmp	ecx, 256
	JAE  LBB4_28                   // <--                                  // jae	.LBB4_28
	MOVB CL, 0(AX)                 // <--                                  // mov	byte ptr [rax], cl
	LONG $0x0001bb41; WORD $0x0000 // MOVL $0x1, R11                       // mov	r11d, 1
	XORL CX, CX                    // <--                                  // xor	ecx, ecx
	JMP  LBB4_34                   // <--                                  // jmp	.LBB4_34

LBB4_28:
	CMPL CX, $0x10000              // <--                                  // cmp	ecx, 65536
	JAE  LBB4_29                   // <--                                  // jae	.LBB4_29
	MOVW CX, 0(AX)                 // <--                                  // mov	word ptr [rax], cx
	WORD $0x40b1                   // MOVL $0x40, CL                       // mov	cl, 64
	LONG $0x0002bb41; WORD $0x0000 // MOVL $0x2, R11                       // mov	r11d, 2
	JMP  LBB4_34                   // <--                                  // jmp	.LBB4_34

LBB4_29:
	CMPL CX, $0x1000000            // <--                                  // cmp	ecx, 16777216
	JAE  LBB4_30                   // <--                                  // jae	.LBB4_30
	MOVW CX, 0(AX)                 // <--                                  // mov	word ptr [rax], cx
	WORD $0xe9c1; BYTE $0x10       // SHRL $0x10, CX                       // shr	ecx, 16
	MOVB CL, 0x2(AX)               // <--                                  // mov	byte ptr [rax + 2], cl
	WORD $0x80b1                   // MOVL $0x80, CL                       // mov	cl, -128
	LONG $0x0003bb41; WORD $0x0000 // MOVL $0x3, R11                       // mov	r11d, 3
	JMP  LBB4_34                   // <--                                  // jmp	.LBB4_34

LBB4_30:
	WORD $0x0889                   // MOVL CX, 0(AX)                       // mov	dword ptr [rax], ecx
	WORD $0xc0b1                   // MOVL $0xc0, CL                       // mov	cl, -64
	LONG $0x0004bb41; WORD $0x0000 // MOVL $0x4, R11                       // mov	r11d, 4

LBB4_34:
	ADDQ R11, AX                   // <--                                  // add	rax, r11
	WORD $0x0841; BYTE $0xc9       // ORL CL, R9                           // or	r9b, cl
	CMPL SI, $0x4                  // <--                                  // cmp	esi, 4
	JE   LBB4_59                   // <--                                  // je	.LBB4_59
	MOVB R9, 0(DX)                 // <--                                  // mov	byte ptr [rdx], r9b
	WORD $0x4f8b; BYTE $0x10       // MOVL 0x10(DI), CX                    // mov	ecx, dword ptr [rdi + 16]
	WORD $0x8941; BYTE $0xc9       // MOVL CX, R9                          // mov	r9d, ecx
	WORD $0x2945; BYTE $0xd1       // SUBL R10, R9                         // sub	r9d, r10d
	CMPL R9, $0x100                // <--                                  // cmp	r9d, 256
	JAE  LBB4_36                   // <--                                  // jae	.LBB4_36
	MOVB R9, 0(AX)                 // <--                                  // mov	byte ptr [rax], r9b
	LONG $0x0001ba41; WORD $0x0000 // MOVL $0x1, R10                       // mov	r10d, 1
	XORL R9, R9                    // <--                                  // xor	r9d, r9d
	JMP  LBB4_42                   // <--                                  // jmp	.LBB4_42

LBB4_36:
	CMPL R9, $0x10000              // <--                                  // cmp	r9d, 65536
	JAE  LBB4_37                   // <--                                  // jae	.LBB4_37
	MOVW R9, 0(AX)                 // <--                                  // mov	word ptr [rax], r9w
	MOVW $0x1, R9                  // <--                                  // mov	r9w, 1
	LONG $0x0002ba41; WORD $0x0000 // MOVL $0x2, R10                       // mov	r10d, 2
	JMP  LBB4_42                   // <--                                  // jmp	.LBB4_42

LBB4_37:
	CMPL R9, $0x1000000            // <--                                  // cmp	r9d, 16777216
	JAE  LBB4_38                   // <--                                  // jae	.LBB4_38
	MOVW R9, 0(AX)                 // <--                                  // mov	word ptr [rax], r9w
	LONG $0x10e9c141               // SHRL $0x10, R9                       // shr	r9d, 16
	MOVB R9, 0x2(AX)               // <--                                  // mov	byte ptr [rax + 2], r9b
	MOVW $0x2, R9                  // <--                                  // mov	r9w, 2
	LONG $0x0003ba41; WORD $0x0000 // MOVL $0x3, R10                       // mov	r10d, 3
	JMP  LBB4_42                   // <--                                  // jmp	.LBB4_42

LBB4_38:
	WORD $0x8944; BYTE $0x08       // MOVL R9, 0(AX)                       // mov	dword ptr [rax], r9d
	MOVW $0x3, R9                  // <--                                  // mov	r9w, 3
	LONG $0x0004ba41; WORD $0x0000 // MOVL $0x4, R10                       // mov	r10d, 4

LBB4_42:
	INCQ DX                        // <--                                  // inc	rdx
	ADDQ R10, AX                   // <--                                  // add	rax, r10
	CMPL SI, $0x5                  // <--                                  // cmp	esi, 5
	JE   LBB4_59                   // <--                                  // je	.LBB4_59
	LONG $0x14578b44               // MOVL 0x14(DI), R10                   // mov	r10d, dword ptr [rdi + 20]
	WORD $0x8945; BYTE $0xd3       // MOVL R10, R11                        // mov	r11d, r10d
	WORD $0x2941; BYTE $0xcb       // SUBL CX, R11                         // sub	r11d, ecx
	CMPL R11, $0x100               // <--                                  // cmp	r11d, 256
	JAE  LBB4_44                   // <--                                  // jae	.LBB4_44
	MOVB R11, 0(AX)                // <--                                  // mov	byte ptr [rax], r11b
	LONG $0x0001bb41; WORD $0x0000 // MOVL $0x1, R11                       // mov	r11d, 1
	XORL CX, CX                    // <--                                  // xor	ecx, ecx
	JMP  LBB4_50                   // <--                                  // jmp	.LBB4_50

LBB4_44:
	CMPL R11, $0x10000             // <--                                  // cmp	r11d, 65536
	JAE  LBB4_45                   // <--                                  // jae	.LBB4_45
	MOVW R11, 0(AX)                // <--                                  // mov	word ptr [rax], r11w
	MOVW $0x1, CX                  // <--                                  // mov	cx, 1
	LONG $0x0002bb41; WORD $0x0000 // MOVL $0x2, R11                       // mov	r11d, 2
	JMP  LBB4_50                   // <--                                  // jmp	.LBB4_50

LBB4_45:
	CMPL R11, $0x1000000           // <--                                  // cmp	r11d, 16777216
	JAE  LBB4_46                   // <--                                  // jae	.LBB4_46
	MOVW R11, 0(AX)                // <--                                  // mov	word ptr [rax], r11w
	LONG $0x10ebc141               // SHRL $0x10, R11                      // shr	r11d, 16
	MOVB R11, 0x2(AX)              // <--                                  // mov	byte ptr [rax + 2], r11b
	MOVW $0x2, CX                  // <--                                  // mov	cx, 2
	LONG $0x0003bb41; WORD $0x0000 // MOVL $0x3, R11                       // mov	r11d, 3
	JMP  LBB4_50                   // <--                                  // jmp	.LBB4_50

LBB4_46:
	WORD $0x8944; BYTE $0x18       // MOVL R11, 0(AX)                      // mov	dword ptr [rax], r11d
	MOVW $0x3, CX                  // <--                                  // mov	cx, 3
	LONG $0x0004bb41; WORD $0x0000 // MOVL $0x4, R11                       // mov	r11d, 4

LBB4_50:
	WORD $0xb70f; BYTE $0xd9     // MOVZX CX, BX                         // movzx	ebx, cx
	WORD $0x02b1                 // MOVL $0x2, CL                        // mov	cl, 2
	WORD $0xe3d3                 // SHLL CL, BX                          // shl	ebx, cl
	ADDQ R11, AX                 // <--                                  // add	rax, r11
	WORD $0x0841; BYTE $0xd9     // ORL BL, R9                           // or	r9b, bl
	CMPL SI, $0x6                // <--                                  // cmp	esi, 6
	JE   LBB4_59                 // <--                                  // je	.LBB4_59
	WORD $0x4f8b; BYTE $0x18     // MOVL 0x18(DI), CX                    // mov	ecx, dword ptr [rdi + 24]
	WORD $0x2944; BYTE $0xd1     // SUBL R10, CX                         // sub	ecx, r10d
	CMPL CX, $0x100              // <--                                  // cmp	ecx, 256
	JAE  LBB4_52                 // <--                                  // jae	.LBB4_52
	MOVB CL, 0(AX)               // <--                                  // mov	byte ptr [rax], cl
	LONG $0x000001be; BYTE $0x00 // MOVL $0x1, SI                        // mov	esi, 1
	XORL CX, CX                  // <--                                  // xor	ecx, ecx
	JMP  LBB4_58                 // <--                                  // jmp	.LBB4_58

LBB4_52:
	CMPL CX, $0x10000            // <--                                  // cmp	ecx, 65536
	JAE  LBB4_53                 // <--                                  // jae	.LBB4_53
	MOVW CX, 0(AX)               // <--                                  // mov	word ptr [rax], cx
	MOVW $0x1, CX                // <--                                  // mov	cx, 1
	LONG $0x000002be; BYTE $0x00 // MOVL $0x2, SI                        // mov	esi, 2
	JMP  LBB4_58                 // <--                                  // jmp	.LBB4_58

LBB4_53:
	CMPL CX, $0x1000000          // <--                                  // cmp	ecx, 16777216
	JAE  LBB4_54                 // <--                                  // jae	.LBB4_54
	MOVW CX, 0(AX)               // <--                                  // mov	word ptr [rax], cx
	WORD $0xe9c1; BYTE $0x10     // SHRL $0x10, CX                       // shr	ecx, 16
	MOVB CL, 0x2(AX)             // <--                                  // mov	byte ptr [rax + 2], cl
	MOVW $0x2, CX                // <--                                  // mov	cx, 2
	LONG $0x000003be; BYTE $0x00 // MOVL $0x3, SI                        // mov	esi, 3
	JMP  LBB4_58                 // <--                                  // jmp	.LBB4_58

LBB4_54:
	WORD $0x0889                 // MOVL CX, 0(AX)                       // mov	dword ptr [rax], ecx
	MOVW $0x3, CX                // <--                                  // mov	cx, 3
	LONG $0x000004be; BYTE $0x00 // MOVL $0x4, SI                        // mov	esi, 4

LBB4_58:
	ADDQ SI, AX              // <--                                  // add	rax, rsi
	WORD $0xb70f; BYTE $0xf1 // MOVZX CX, SI                         // movzx	esi, cx
	WORD $0x04b1             // MOVL $0x4, CL                        // mov	cl, 4
	WORD $0xe6d3             // SHLL CL, SI                          // shl	esi, cl
	WORD $0x0841; BYTE $0xf1 // ORL SI, R9                           // or	r9b, sil

LBB4_59:
	MOVB R9, 0(DX) // <--                                  // mov	byte ptr [rdx], r9b

LBB4_60:
	SUBQ R8, AX         // <--                                  // sub	rax, r8
	NOP                 // (skipped)                            // lea	rsp, [rbp - 16]
	MOVQ 8(SP), BX      // <--                                  // pop	rbx
	MOVQ 0(SP), R14     // <--                                  // pop	r14
	NOP                 // (skipped)                            // pop	rbp
	MOVQ AX, ret+40(FP) // <--
	RET                 // <--                                  // ret

LCPI5_0:
LCPI5_1:
LCPI5_2:
LCPI5_3:
LCPI5_4:

DATA LCPI5_0<>+0x00(SB)/8, $0x0101010101010101
DATA LCPI5_0<>+0x08(SB)/8, $0x0101010101010101
GLOBL LCPI5_0<>(SB), (RODATA|NOPTR), $16

DATA LCPI5_1<>+0x00(SB)/8, $0x0804010208040102
DATA LCPI5_1<>+0x08(SB)/8, $0x0804010208040102
GLOBL LCPI5_1<>(SB), (RODATA|NOPTR), $16

DATA LCPI5_2<>+0x00(SB)/8, $0x0303030302020100
DATA LCPI5_2<>+0x08(SB)/8, $0x0303030303030303
GLOBL LCPI5_2<>(SB), (RODATA|NOPTR), $16

DATA LCPI5_3<>+0x00(SB)/8, $0x000000000d090501
DATA LCPI5_3<>+0x08(SB)/8, $0x0000000000000000
GLOBL LCPI5_3<>(SB), (RODATA|NOPTR), $16

DATA LCPI5_4<>+0x00(SB)/8, $0x0101010110400104
DATA LCPI5_4<>+0x08(SB)/8, $0x0000000000000000
GLOBL LCPI5_4<>(SB), (RODATA|NOPTR), $16

TEXT Â·svb_delta_encode_alt(SB), 0, $8-48
	MOVQ    in+0(FP), DI
	MOVQ    in_len+8(FP), SI
	MOVQ    in_cap+16(FP), DX
	MOVLQZX prev+24(FP), CX
	MOVQ    out+32(FP), R8
	NOP                             // (skipped)                            // push	rbp
	NOP                             // (skipped)                            // mov	rbp, rsp
	MOVQ    BX, 0(SP)               // <--                                  // push	rbx
	ANDQ    $-0x8, SP               // <--                                  // and	rsp, -8
	LONG    $0x034e8d44             // LEAL 0x3(SI), R9                     // lea	r9d, [rsi + 3]
	LONG    $0x02e9c141             // SHRL $0x2, R9                        // shr	r9d, 2
	ADDQ    R8, R9                  // <--                                  // add	r9, r8
	LONG    $0xc16e0f66             // MOVD CX, X0                          // movd	xmm0, ecx
	LONG    $0xc0700f66; BYTE $0x00 // PSHUFD $0x0, X0, X0                  // pshufd	xmm0, xmm0, 0
	CMPL    SI, $0x4                // <--                                  // cmp	esi, 4
	JAE     LBB5_32                 // <--                                  // jae	.LBB5_32
	MOVQ    R9, AX                  // <--                                  // mov	rax, r9
	MOVQ    R8, CX                  // <--                                  // mov	rcx, r8
	JMP     LBB5_2                  // <--                                  // jmp	.LBB5_2

LBB5_32:
	WORD $0xf289                              // MOVL SI, DX                          // mov	edx, esi
	WORD $0xeac1; BYTE $0x02                  // SHRL $0x2, DX                        // shr	edx, 2
	LONG $0xc9ef0f66                          // PXOR X1, X1                          // pxor	xmm1, xmm1
	MOVO LCPI5_0<>(SB), X2                    // <--                                  // movdqa	xmm2, xmmword ptr [rip + .LCPI5_0]
	MOVO LCPI5_1<>(SB), X3                    // <--                                  // movdqa	xmm3, xmmword ptr [rip + .LCPI5_1]
	MOVO LCPI5_2<>(SB), X4                    // <--                                  // movdqa	xmm4, xmmword ptr [rip + .LCPI5_2]
	MOVO LCPI5_3<>(SB), X5                    // <--                                  // movdqa	xmm5, xmmword ptr [rip + .LCPI5_3]
	MOVO LCPI5_4<>(SB), X6                    // <--                                  // movdqa	xmm6, xmmword ptr [rip + .LCPI5_4]
	LEAQ lengthTable_0124<>(SB), R10          // <--                                  // lea	r10, [rip + lengthTable_0124]
	LEAQ encodingShuffleTable_0124<>(SB), R11 // <--                                  // lea	r11, [rip + encodingShuffleTable_0124]
	LONG $0xf86f0f66                          // MOVDQA X0, X7                        // movdqa	xmm7, xmm0
	MOVQ R8, CX                               // <--                                  // mov	rcx, r8

LBB5_33:
	LONG $0x076f0ff3                           // MOVDQU 0(DI), X0                     // movdqu	xmm0, xmmword ptr [rdi]
	LONG $0x6f0f4466; BYTE $0xc0               // MOVDQA X0, X8                        // movdqa	xmm8, xmm0
	LONG $0x3a0f4466; WORD $0xc70f; BYTE $0x0c // PALIGNR $0xc, X7, X8                 // palignr	xmm8, xmm7, 12
	LONG $0xf86f0f66                           // MOVDQA X0, X7                        // movdqa	xmm7, xmm0
	LONG $0xfa0f4166; BYTE $0xf8               // PSUBD X8, X7                         // psubd	xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xc7               // MOVDQA X7, X8                        // movdqa	xmm8, xmm7
	LONG $0x740f4466; BYTE $0xc1               // PCMPEQB X1, X8                       // pcmpeqb	xmm8, xmm1
	LONG $0xdf0f4466; BYTE $0xc2               // PANDN X2, X8                         // pandn	xmm8, xmm2
	LONG $0xf50f4466; BYTE $0xc3               // PMADDWD X3, X8                       // pmaddwd	xmm8, xmm3
	LONG $0x6f0f4466; BYTE $0xcc               // MOVDQA X4, X9                        // movdqa	xmm9, xmm4
	LONG $0x380f4566; WORD $0xc800             // PSHUFB X8, X9                        // pshufb	xmm9, xmm8
	LONG $0x380f4466; WORD $0xcd00             // PSHUFB X5, X9                        // pshufb	xmm9, xmm5
	LONG $0xf50f4466; BYTE $0xce               // PMADDWD X6, X9                       // pmaddwd	xmm9, xmm6
	LONG $0x3a0f4466; WORD $0xcb14; BYTE $0x01 // PEXTRB $0x1, X9, BX                  // pextrb	ebx, xmm9, 1
	LONG $0x04b60f42; BYTE $0x13               // MOVZX 0(BX)(R10*1), AX               // movzx	eax, byte ptr [rbx + r10]
	SHLQ $0x4, BX                              // <--                                  // shl	rbx, 4
	LONG $0x380f4266; WORD $0x3c00; BYTE $0x1b // PSHUFB 0(BX)(R11*1), X7              // pshufb	xmm7, xmmword ptr [rbx + r11]
	LONG $0x7f0f41f3; BYTE $0x39               // MOVDQU X7, 0(R9)                     // movdqu	xmmword ptr [r9], xmm7
	LONG $0x3a0f4466; WORD $0x0914; BYTE $0x01 // PEXTRB $0x1, X9, 0(CX)               // pextrb	byte ptr [rcx], xmm9, 1
	ADDQ R9, AX                                // <--                                  // add	rax, r9
	INCQ CX                                    // <--                                  // inc	rcx
	ADDQ $0x10, DI                             // <--                                  // add	rdi, 16
	LONG $0xf86f0f66                           // MOVDQA X0, X7                        // movdqa	xmm7, xmm0
	MOVQ AX, R9                                // <--                                  // mov	r9, rax
	WORD $0xcaff                               // DECL DX                              // dec	edx
	JNE  LBB5_33                               // <--                                  // jne	.LBB5_33

LBB5_2:
	LONG $0x03c6f640                           // TESTL $0x3, SI                       // test	sil, 3
	JE   LBB5_31                               // <--                                  // je	.LBB5_31
	LONG $0x3a0f4166; WORD $0xc116; BYTE $0x03 // PEXTRD $0x3, X0, R9                  // pextrd	r9d, xmm0, 3
	WORD $0xe683; BYTE $0x03                   // ANDL $0x3, SI                        // and	esi, 3
	WORD $0x8b44; BYTE $0x17                   // MOVL 0(DI), R10                      // mov	r10d, dword ptr [rdi]
	WORD $0x8944; BYTE $0xd2                   // MOVL R10, DX                         // mov	edx, r10d
	WORD $0x2944; BYTE $0xca                   // SUBL R9, DX                          // sub	edx, r9d
	JNE  LBB5_5                                // <--                                  // jne	.LBB5_5
	XORL DX, DX                                // <--                                  // xor	edx, edx
	CMPL SI, $0x1                              // <--                                  // cmp	esi, 1
	JNE  LBB5_12                               // <--                                  // jne	.LBB5_12
	JMP  LBB5_30                               // <--                                  // jmp	.LBB5_30

LBB5_5:
	CMPL DX, $0xff                 // <--                                  // cmp	edx, 255
	JA   LBB5_7                    // <--                                  // ja	.LBB5_7
	MOVB DL, 0(AX)                 // <--                                  // mov	byte ptr [rax], dl
	WORD $0x01b2                   // MOVL $0x1, DL                        // mov	dl, 1
	LONG $0x0001b941; WORD $0x0000 // MOVL $0x1, R9                        // mov	r9d, 1
	ADDQ R9, AX                    // <--                                  // add	rax, r9
	CMPL SI, $0x1                  // <--                                  // cmp	esi, 1
	JNE  LBB5_12                   // <--                                  // jne	.LBB5_12
	JMP  LBB5_30                   // <--                                  // jmp	.LBB5_30

LBB5_7:
	CMPL DX, $0xffff               // <--                                  // cmp	edx, 65535
	JA   LBB5_9                    // <--                                  // ja	.LBB5_9
	MOVW DX, 0(AX)                 // <--                                  // mov	word ptr [rax], dx
	WORD $0x02b2                   // MOVL $0x2, DL                        // mov	dl, 2
	LONG $0x0002b941; WORD $0x0000 // MOVL $0x2, R9                        // mov	r9d, 2
	ADDQ R9, AX                    // <--                                  // add	rax, r9
	CMPL SI, $0x1                  // <--                                  // cmp	esi, 1
	JNE  LBB5_12                   // <--                                  // jne	.LBB5_12
	JMP  LBB5_30                   // <--                                  // jmp	.LBB5_30

LBB5_9:
	WORD $0x1089                   // MOVL DX, 0(AX)                       // mov	dword ptr [rax], edx
	WORD $0x03b2                   // MOVL $0x3, DL                        // mov	dl, 3
	LONG $0x0004b941; WORD $0x0000 // MOVL $0x4, R9                        // mov	r9d, 4
	ADDQ R9, AX                    // <--                                  // add	rax, r9
	CMPL SI, $0x1                  // <--                                  // cmp	esi, 1
	JE   LBB5_30                   // <--                                  // je	.LBB5_30

LBB5_12:
	LONG $0x044f8b44         // MOVL 0x4(DI), R9                     // mov	r9d, dword ptr [rdi + 4]
	WORD $0x8945; BYTE $0xcb // MOVL R9, R11                         // mov	r11d, r9d
	WORD $0x2945; BYTE $0xd3 // SUBL R10, R11                        // sub	r11d, r10d
	JNE  LBB5_14             // <--                                  // jne	.LBB5_14
	XORL R10, R10            // <--                                  // xor	r10d, r10d
	WORD $0x0844; BYTE $0xd2 // ORL R10, DL                          // or	dl, r10b
	CMPL SI, $0x2            // <--                                  // cmp	esi, 2
	JNE  LBB5_21             // <--                                  // jne	.LBB5_21
	JMP  LBB5_30             // <--                                  // jmp	.LBB5_30

LBB5_14:
	CMPL R11, $0x100               // <--                                  // cmp	r11d, 256
	JAE  LBB5_15                   // <--                                  // jae	.LBB5_15
	MOVB R11, 0(AX)                // <--                                  // mov	byte ptr [rax], r11b
	WORD $0xb241; BYTE $0x04       // MOVL $0x4, R10                       // mov	r10b, 4
	LONG $0x0001bb41; WORD $0x0000 // MOVL $0x1, R11                       // mov	r11d, 1
	JMP  LBB5_19                   // <--                                  // jmp	.LBB5_19

LBB5_15:
	CMPL R11, $0x10000             // <--                                  // cmp	r11d, 65536
	JAE  LBB5_16                   // <--                                  // jae	.LBB5_16
	MOVW R11, 0(AX)                // <--                                  // mov	word ptr [rax], r11w
	WORD $0xb241; BYTE $0x08       // MOVL $0x8, R10                       // mov	r10b, 8
	LONG $0x0002bb41; WORD $0x0000 // MOVL $0x2, R11                       // mov	r11d, 2
	JMP  LBB5_19                   // <--                                  // jmp	.LBB5_19

LBB5_16:
	WORD $0x8944; BYTE $0x18       // MOVL R11, 0(AX)                      // mov	dword ptr [rax], r11d
	WORD $0xb241; BYTE $0x0c       // MOVL $0xc, R10                       // mov	r10b, 12
	LONG $0x0004bb41; WORD $0x0000 // MOVL $0x4, R11                       // mov	r11d, 4

LBB5_19:
	ADDQ R11, AX             // <--                                  // add	rax, r11
	WORD $0x0844; BYTE $0xd2 // ORL R10, DL                          // or	dl, r10b
	CMPL SI, $0x2            // <--                                  // cmp	esi, 2
	JE   LBB5_30             // <--                                  // je	.LBB5_30

LBB5_21:
	WORD $0x778b; BYTE $0x08 // MOVL 0x8(DI), SI                     // mov	esi, dword ptr [rdi + 8]
	WORD $0x2944; BYTE $0xce // SUBL R9, SI                          // sub	esi, r9d
	JNE  LBB5_23             // <--                                  // jne	.LBB5_23
	XORL SI, SI              // <--                                  // xor	esi, esi
	JMP  LBB5_29             // <--                                  // jmp	.LBB5_29

LBB5_23:
	CMPL SI, $0x100              // <--                                  // cmp	esi, 256
	JAE  LBB5_24                 // <--                                  // jae	.LBB5_24
	MOVB SI, 0(AX)               // <--                                  // mov	byte ptr [rax], sil
	WORD $0xb640; BYTE $0x10     // MOVL $0x10, SI                       // mov	sil, 16
	LONG $0x000001bf; BYTE $0x00 // MOVL $0x1, DI                        // mov	edi, 1
	JMP  LBB5_28                 // <--                                  // jmp	.LBB5_28

LBB5_24:
	CMPL SI, $0x10000            // <--                                  // cmp	esi, 65536
	JAE  LBB5_25                 // <--                                  // jae	.LBB5_25
	MOVW SI, 0(AX)               // <--                                  // mov	word ptr [rax], si
	WORD $0xb640; BYTE $0x20     // MOVL $0x20, SI                       // mov	sil, 32
	LONG $0x000002bf; BYTE $0x00 // MOVL $0x2, DI                        // mov	edi, 2
	JMP  LBB5_28                 // <--                                  // jmp	.LBB5_28

LBB5_25:
	WORD $0x3089                 // MOVL SI, 0(AX)                       // mov	dword ptr [rax], esi
	WORD $0xb640; BYTE $0x30     // MOVL $0x30, SI                       // mov	sil, 48
	LONG $0x000004bf; BYTE $0x00 // MOVL $0x4, DI                        // mov	edi, 4

LBB5_28:
	ADDQ DI, AX // <--                                  // add	rax, rdi

LBB5_29:
	WORD $0x0840; BYTE $0xf2 // ORL SI, DL                           // or	dl, sil

LBB5_30:
	MOVB DL, 0(CX) // <--                                  // mov	byte ptr [rcx], dl

LBB5_31:
	SUBQ R8, AX         // <--                                  // sub	rax, r8
	NOP                 // (skipped)                            // lea	rsp, [rbp - 8]
	MOVQ 0(SP), BX      // <--                                  // pop	rbx
	NOP                 // (skipped)                            // pop	rbp
	MOVQ AX, ret+40(FP) // <--
	RET                 // <--                                  // ret

TEXT Â·svb_delta_decode(SB), 0, $64-56
	MOVQ    in+0(FP), DI
	MOVQ    in_len+8(FP), SI
	MOVQ    in_cap+16(FP), DX
	MOVQ    count+24(FP), CX
	MOVLQZX prev+32(FP), R8
	MOVQ    out+40(FP), R9
	WORD    $0x8548; BYTE $0xc9 // TESTQ CX, CX                         // test	rcx, rcx
	JLE     LBB6_3              // <--                                  // jle	.LBB6_3
	LEAQ    0x3(CX), AX         // <--                                  // lea	rax, [rcx + 3]
	SHRQ    $0x2, AX            // <--                                  // shr	rax, 2
	CMPQ    AX, SI              // <--                                  // cmp	rax, rsi
	JBE     LBB6_4              // <--                                  // jbe	.LBB6_4

LBB6_3:
	XORL AX, AX         // <--                                  // xor	eax, eax
	MOVQ AX, ret+48(FP) // <--
	RET                 // <--                                  // ret

LBB6_4:
	NOP                          // (skipped)                            // push	rbp
	NOP                          // (skipped)                            // mov	rbp, rsp
	MOVQ R15, 24(SP)             // <--                                  // push	r15
	MOVQ R14, 32(SP)             // <--                                  // push	r14
	MOVQ R13, 40(SP)             // <--                                  // push	r13
	MOVQ R12, 48(SP)             // <--                                  // push	r12
	MOVQ BX, 56(SP)              // <--                                  // push	rbx
	ANDQ $-0x8, SP               // <--                                  // and	rsp, -8
	NOP                          // (skipped)                            // sub	rsp, 24
	WORD $0xc289                 // MOVL AX, DX                          // mov	edx, eax
	ADDQ DI, DX                  // <--                                  // add	rdx, rdi
	CMPQ CX, $0x20               // <--                                  // cmp	rcx, 32
	JB   LBB6_16                 // <--                                  // jb	.LBB6_16
	MOVQ CX, R15                 // <--                                  // mov	r15, rcx
	SHRQ $0x5, R15               // <--                                  // shr	r15, 5
	LONG $0x6e0f4166; BYTE $0xc0 // MOVD R8, X0                          // movd	xmm0, r8d
	LONG $0xc8700f66; BYTE $0x00 // PSHUFD $0x0, X0, X1                  // pshufd	xmm1, xmm0, 0
	MOVQ 0(DI), BX               // <--                                  // mov	rbx, qword ptr [rdi]
	CMPQ R15, $0x1               // <--                                  // cmp	r15, 1
	MOVQ R9, 0x10(SP)            // <--                                  // mov	qword ptr [rsp + 16], r9
	MOVQ CX, 0x8(SP)             // <--                                  // mov	qword ptr [rsp + 8], rcx
	JNE  LBB6_9                  // <--                                  // jne	.LBB6_9
	MOVQ R9, AX                  // <--                                  // mov	rax, r9
	MOVQ BX, CX                  // <--                                  // mov	rcx, rbx

LBB6_7:
	WORD $0x8548; BYTE $0xc9                   // TESTQ CX, CX                         // test	rcx, rcx
	JE   LBB6_14                               // <--                                  // je	.LBB6_14
	LONG $0xc9b60f44                           // MOVZX CL, R9                         // movzx	r9d, cl
	LONG $0x026f0ff3                           // MOVDQU 0(DX), X0                     // movdqu	xmm0, xmmword ptr [rdx]
	LEAQ shuffleTable_1234<>(SB), R14          // <--                                  // lea	r14, [rip + shuffleTable_1234]
	LEAQ lengthTable_1234<>(SB), R10           // <--                                  // lea	r10, [rip + lengthTable_1234]
	LONG $0x1cb60f43; BYTE $0x11               // MOVZX 0(R9)(R10*1), BX               // movzx	ebx, byte ptr [r9 + r10]
	SHLQ $0x4, R9                              // <--                                  // shl	r9, 4
	LONG $0x380f4366; WORD $0x0400; BYTE $0x31 // PSHUFB 0(R9)(R14*1), X0              // pshufb	xmm0, xmmword ptr [r9 + r14]
	LEAQ 0(DX)(BX*1), R11                      // <--                                  // lea	r11, [rdx + rbx]
	LONG $0xd06f0f66                           // MOVDQA X0, X2                        // movdqa	xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xd0fe0f66                           // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0xc26f0f66                           // MOVDQA X2, X0                        // movdqa	xmm0, xmm2
	LONG $0xf8730f66; BYTE $0x08               // PSLLDQ $0x8, X0                      // pslldq	xmm0, 8
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xd0fe0f66                           // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0x107f0ff3                           // MOVDQU X2, 0(AX)                     // movdqu	xmmword ptr [rax], xmm2
	WORD $0xb60f; BYTE $0xf5                   // MOVZX CH, SI                         // movzx	esi, ch
	LONG $0x046f0ff3; BYTE $0x1a               // MOVDQU 0(DX)(BX*1), X0               // movdqu	xmm0, xmmword ptr [rdx + rbx]
	LONG $0x14b60f42; BYTE $0x16               // MOVZX 0(SI)(R10*1), DX               // movzx	edx, byte ptr [rsi + r10]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x36 // PSHUFB 0(SI)(R14*1), X0              // pshufb	xmm0, xmmword ptr [rsi + r14]
	LEAQ 0(R11)(DX*1), BX                      // <--                                  // lea	rbx, [r11 + rdx]
	LONG $0xc86f0f66                           // MOVDQA X0, X1                        // movdqa	xmm1, xmm0
	LONG $0xf9730f66; BYTE $0x04               // PSLLDQ $0x4, X1                      // pslldq	xmm1, 4
	LONG $0xd2700f66; BYTE $0xff               // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xc8fe0f66                           // PADDD X0, X1                         // paddd	xmm1, xmm0
	LONG $0xc16f0f66                           // MOVDQA X1, X0                        // movdqa	xmm0, xmm1
	LONG $0xf8730f66; BYTE $0x08               // PSLLDQ $0x8, X0                      // pslldq	xmm0, 8
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0xc8fe0f66                           // PADDD X0, X1                         // paddd	xmm1, xmm0
	LONG $0x487f0ff3; BYTE $0x10               // MOVDQU X1, 0x10(AX)                  // movdqu	xmmword ptr [rax + 16], xmm1
	WORD $0xce89                               // MOVL CX, SI                          // mov	esi, ecx
	WORD $0xeec1; BYTE $0x10                   // SHRL $0x10, SI                       // shr	esi, 16
	LONG $0xf6b60f40                           // MOVZX SI, SI                         // movzx	esi, sil
	LONG $0x6f0f42f3; WORD $0x1a04             // MOVDQU 0(DX)(R11*1), X0              // movdqu	xmm0, xmmword ptr [rdx + r11]
	LONG $0x0cb60f46; BYTE $0x16               // MOVZX 0(SI)(R10*1), R9               // movzx	r9d, byte ptr [rsi + r10]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x36 // PSHUFB 0(SI)(R14*1), X0              // pshufb	xmm0, xmmword ptr [rsi + r14]
	LEAQ 0(BX)(R9*1), DX                       // <--                                  // lea	rdx, [rbx + r9]
	LONG $0xd06f0f66                           // MOVDQA X0, X2                        // movdqa	xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xd0fe0f66                           // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0xc26f0f66                           // MOVDQA X2, X0                        // movdqa	xmm0, xmm2
	LONG $0xf8730f66; BYTE $0x08               // PSLLDQ $0x8, X0                      // pslldq	xmm0, 8
	LONG $0xc2fe0f66                           // PADDD X2, X0                         // paddd	xmm0, xmm2
	LONG $0xc1fe0f66                           // PADDD X1, X0                         // paddd	xmm0, xmm1
	LONG $0x407f0ff3; BYTE $0x20               // MOVDQU X0, 0x20(AX)                  // movdqu	xmmword ptr [rax + 32], xmm0
	WORD $0xce89                               // MOVL CX, SI                          // mov	esi, ecx
	WORD $0xeec1; BYTE $0x18                   // SHRL $0x18, SI                       // shr	esi, 24
	LONG $0x6f0f41f3; WORD $0x190c             // MOVDQU 0(R9)(BX*1), X1               // movdqu	xmm1, xmmword ptr [r9 + rbx]
	LONG $0x1cb60f46; BYTE $0x16               // MOVZX 0(SI)(R10*1), R11              // movzx	r11d, byte ptr [rsi + r10]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0c00; BYTE $0x36 // PSHUFB 0(SI)(R14*1), X1              // pshufb	xmm1, xmmword ptr [rsi + r14]
	LONG $0xd16f0f66                           // MOVDQA X1, X2                        // movdqa	xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc0700f66; BYTE $0xff               // PSHUFD $0xff, X0, X0                 // pshufd	xmm0, xmm0, 255
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xca6f0f66                           // MOVDQA X2, X1                        // movdqa	xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0xc8fe0f66                           // PADDD X0, X1                         // paddd	xmm1, xmm0
	LONG $0x487f0ff3; BYTE $0x30               // MOVDQU X1, 0x30(AX)                  // movdqu	xmmword ptr [rax + 48], xmm1
	MOVQ CX, SI                                // <--                                  // mov	rsi, rcx
	SHRQ $0x20, SI                             // <--                                  // shr	rsi, 32
	LONG $0xf6b60f40                           // MOVZX SI, SI                         // movzx	esi, sil
	LONG $0x6f0f41f3; WORD $0x1304             // MOVDQU 0(R11)(DX*1), X0              // movdqu	xmm0, xmmword ptr [r11 + rdx]
	LONG $0x0cb60f46; BYTE $0x16               // MOVZX 0(SI)(R10*1), R9               // movzx	r9d, byte ptr [rsi + r10]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x36 // PSHUFB 0(SI)(R14*1), X0              // pshufb	xmm0, xmmword ptr [rsi + r14]
	LEAQ 0(DX)(R11*1), SI                      // <--                                  // lea	rsi, [rdx + r11]
	LEAQ 0(SI)(R9*1), DX                       // <--                                  // lea	rdx, [rsi + r9]
	LONG $0xd06f0f66                           // MOVDQA X0, X2                        // movdqa	xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xd0fe0f66                           // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0xc26f0f66                           // MOVDQA X2, X0                        // movdqa	xmm0, xmm2
	LONG $0xf8730f66; BYTE $0x08               // PSLLDQ $0x8, X0                      // pslldq	xmm0, 8
	LONG $0xc2fe0f66                           // PADDD X2, X0                         // paddd	xmm0, xmm2
	LONG $0xc1fe0f66                           // PADDD X1, X0                         // paddd	xmm0, xmm1
	LONG $0x407f0ff3; BYTE $0x40               // MOVDQU X0, 0x40(AX)                  // movdqu	xmmword ptr [rax + 64], xmm0
	MOVQ CX, R11                               // <--                                  // mov	r11, rcx
	SHRQ $0x28, R11                            // <--                                  // shr	r11, 40
	LONG $0xdbb60f41                           // MOVZX R11, BX                        // movzx	ebx, r11b
	LONG $0x6f0f41f3; WORD $0x310c             // MOVDQU 0(R9)(SI*1), X1               // movdqu	xmm1, xmmword ptr [r9 + rsi]
	LONG $0x1cb60f46; BYTE $0x13               // MOVZX 0(BX)(R10*1), R11              // movzx	r11d, byte ptr [rbx + r10]
	SHLQ $0x4, BX                              // <--                                  // shl	rbx, 4
	LONG $0x380f4266; WORD $0x0c00; BYTE $0x33 // PSHUFB 0(BX)(R14*1), X1              // pshufb	xmm1, xmmword ptr [rbx + r14]
	LONG $0xd16f0f66                           // MOVDQA X1, X2                        // movdqa	xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc0700f66; BYTE $0xff               // PSHUFD $0xff, X0, X0                 // pshufd	xmm0, xmm0, 255
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xca6f0f66                           // MOVDQA X2, X1                        // movdqa	xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0xc8fe0f66                           // PADDD X0, X1                         // paddd	xmm1, xmm0
	LONG $0x487f0ff3; BYTE $0x50               // MOVDQU X1, 0x50(AX)                  // movdqu	xmmword ptr [rax + 80], xmm1
	MOVQ CX, SI                                // <--                                  // mov	rsi, rcx
	SHRQ $0x30, SI                             // <--                                  // shr	rsi, 48
	LONG $0xf6b60f40                           // MOVZX SI, SI                         // movzx	esi, sil
	LONG $0x6f0f41f3; WORD $0x1304             // MOVDQU 0(R11)(DX*1), X0              // movdqu	xmm0, xmmword ptr [r11 + rdx]
	LONG $0x0cb60f46; BYTE $0x16               // MOVZX 0(SI)(R10*1), R9               // movzx	r9d, byte ptr [rsi + r10]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x36 // PSHUFB 0(SI)(R14*1), X0              // pshufb	xmm0, xmmword ptr [rsi + r14]
	LEAQ 0(DX)(R11*1), SI                      // <--                                  // lea	rsi, [rdx + r11]
	LONG $0xd06f0f66                           // MOVDQA X0, X2                        // movdqa	xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xd0fe0f66                           // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0xc26f0f66                           // MOVDQA X2, X0                        // movdqa	xmm0, xmm2
	LONG $0xf8730f66; BYTE $0x08               // PSLLDQ $0x8, X0                      // pslldq	xmm0, 8
	LONG $0xc2fe0f66                           // PADDD X2, X0                         // paddd	xmm0, xmm2
	LONG $0xc1fe0f66                           // PADDD X1, X0                         // paddd	xmm0, xmm1
	LONG $0x407f0ff3; BYTE $0x60               // MOVDQU X0, 0x60(AX)                  // movdqu	xmmword ptr [rax + 96], xmm0
	SHRQ $0x38, CX                             // <--                                  // shr	rcx, 56
	LONG $0x6f0f41f3; WORD $0x310c             // MOVDQU 0(R9)(SI*1), X1               // movdqu	xmm1, xmmword ptr [r9 + rsi]
	LONG $0x14b60f42; BYTE $0x11               // MOVZX 0(CX)(R10*1), DX               // movzx	edx, byte ptr [rcx + r10]
	SHLQ $0x4, CX                              // <--                                  // shl	rcx, 4
	LONG $0x380f4266; WORD $0x0c00; BYTE $0x31 // PSHUFB 0(CX)(R14*1), X1              // pshufb	xmm1, xmmword ptr [rcx + r14]
	ADDQ R9, DX                                // <--                                  // add	rdx, r9
	ADDQ SI, DX                                // <--                                  // add	rdx, rsi
	LONG $0xd16f0f66                           // MOVDQA X1, X2                        // movdqa	xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc0700f66; BYTE $0xff               // PSHUFD $0xff, X0, X0                 // pshufd	xmm0, xmm0, 255
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xca6f0f66                           // MOVDQA X2, X1                        // movdqa	xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0xc8fe0f66                           // PADDD X0, X1                         // paddd	xmm1, xmm0
	LONG $0x487f0ff3; BYTE $0x70               // MOVDQU X1, 0x70(AX)                  // movdqu	xmmword ptr [rax + 112], xmm1
	JMP  LBB6_15                               // <--                                  // jmp	.LBB6_15

LBB6_9:
	LONG $0x0001ba41; WORD $0x0000    // MOVL $0x1, R10                       // mov	r10d, 1
	LONG $0xc0ef0f66                  // PXOR X0, X0                          // pxor	xmm0, xmm0
	LEAQ shuffleTable_1234<>(SB), R11 // <--                                  // lea	r11, [rip + shuffleTable_1234]
	MOVQ R9, AX                       // <--                                  // mov	rax, r9
	LEAQ lengthTable_1234<>(SB), R14  // <--                                  // lea	r14, [rip + lengthTable_1234]
	JMP  LBB6_12                      // <--                                  // jmp	.LBB6_12

LBB6_10:
	LONG $0xe3b60f44                           // MOVZX BL, R12                        // movzx	r12d, bl
	LONG $0x126f0ff3                           // MOVDQU 0(DX), X2                     // movdqu	xmm2, xmmword ptr [rdx]
	LONG $0x2cb60f47; BYTE $0x34               // MOVZX 0(R12)(R14*1), R13             // movzx	r13d, byte ptr [r12 + r14]
	SHLQ $0x4, R12                             // <--                                  // shl	r12, 4
	LONG $0x380f4366; WORD $0x1400; BYTE $0x1c // PSHUFB 0(R12)(R11*1), X2             // pshufb	xmm2, xmmword ptr [r12 + r11]
	LEAQ 0(DX)(R13*1), R12                     // <--                                  // lea	r12, [rdx + r13]
	LONG $0xda6f0f66                           // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66                           // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66                           // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x08               // PSLLDQ $0x8, X2                      // pslldq	xmm2, 8
	LONG $0xd9fe0f66                           // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xdafe0f66                           // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0x187f0ff3                           // MOVDQU X3, 0(AX)                     // movdqu	xmmword ptr [rax], xmm3
	WORD $0xb60f; BYTE $0xf7                   // MOVZX BH, SI                         // movzx	esi, bh
	LONG $0x6f0f42f3; WORD $0x2a0c             // MOVDQU 0(DX)(R13*1), X1              // movdqu	xmm1, xmmword ptr [rdx + r13]
	LONG $0x2cb60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R13              // movzx	r13d, byte ptr [rsi + r14]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0c00; BYTE $0x1e // PSHUFB 0(SI)(R11*1), X1              // pshufb	xmm1, xmmword ptr [rsi + r11]
	LEAQ 0(R12)(R13*1), DX                     // <--                                  // lea	rdx, [r12 + r13]
	LONG $0xd16f0f66                           // MOVDQA X1, X2                        // movdqa	xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xdb700f66; BYTE $0xff               // PSHUFD $0xff, X3, X3                 // pshufd	xmm3, xmm3, 255
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xca6f0f66                           // MOVDQA X2, X1                        // movdqa	xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xd3fe0f66                           // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0x507f0ff3; BYTE $0x10               // MOVDQU X2, 0x10(AX)                  // movdqu	xmmword ptr [rax + 16], xmm2
	WORD $0xde89                               // MOVL BX, SI                          // mov	esi, ebx
	WORD $0xeec1; BYTE $0x10                   // SHRL $0x10, SI                       // shr	esi, 16
	LONG $0xf6b60f40                           // MOVZX SI, SI                         // movzx	esi, sil
	LONG $0x6f0f43f3; WORD $0x254c; BYTE $0x00 // MOVDQU 0(R13)(R12*1), X1             // movdqu	xmm1, xmmword ptr [r13 + r12]
	LONG $0x24b60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R12              // movzx	r12d, byte ptr [rsi + r14]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0c00; BYTE $0x1e // PSHUFB 0(SI)(R11*1), X1              // pshufb	xmm1, xmmword ptr [rsi + r11]
	LONG $0xd96f0f66                           // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xd2700f66; BYTE $0xff               // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66                           // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66                           // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcbfe0f66                           // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0x487f0ff3; BYTE $0x20               // MOVDQU X1, 0x20(AX)                  // movdqu	xmmword ptr [rax + 32], xmm1
	WORD $0xde89                               // MOVL BX, SI                          // mov	esi, ebx
	WORD $0xeec1; BYTE $0x18                   // SHRL $0x18, SI                       // shr	esi, 24
	LONG $0x6f0f41f3; WORD $0x1414             // MOVDQU 0(R12)(DX*1), X2              // movdqu	xmm2, xmmword ptr [r12 + rdx]
	LONG $0x2cb60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R13              // movzx	r13d, byte ptr [rsi + r14]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x1400; BYTE $0x1e // PSHUFB 0(SI)(R11*1), X2              // pshufb	xmm2, xmmword ptr [rsi + r11]
	LEAQ 0(DX)(R12*1), SI                      // <--                                  // lea	rsi, [rdx + r12]
	LEAQ 0(SI)(R13*1), DX                      // <--                                  // lea	rdx, [rsi + r13]
	LONG $0xda6f0f66                           // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66                           // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66                           // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x08               // PSLLDQ $0x8, X2                      // pslldq	xmm2, 8
	LONG $0xd3fe0f66                           // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0x507f0ff3; BYTE $0x30               // MOVDQU X2, 0x30(AX)                  // movdqu	xmmword ptr [rax + 48], xmm2
	MOVQ BX, R12                               // <--                                  // mov	r12, rbx
	SHRQ $0x20, R12                            // <--                                  // shr	r12, 32
	LONG $0xccb60f45                           // MOVZX R12, R9                        // movzx	r9d, r12b
	LONG $0x6f0f41f3; WORD $0x354c; BYTE $0x00 // MOVDQU 0(R13)(SI*1), X1              // movdqu	xmm1, xmmword ptr [r13 + rsi]
	LONG $0x24b60f47; BYTE $0x31               // MOVZX 0(R9)(R14*1), R12              // movzx	r12d, byte ptr [r9 + r14]
	SHLQ $0x4, R9                              // <--                                  // shl	r9, 4
	LONG $0x380f4366; WORD $0x0c00; BYTE $0x19 // PSHUFB 0(R9)(R11*1), X1              // pshufb	xmm1, xmmword ptr [r9 + r11]
	LONG $0xd96f0f66                           // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xd2700f66; BYTE $0xff               // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66                           // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66                           // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcbfe0f66                           // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0x487f0ff3; BYTE $0x40               // MOVDQU X1, 0x40(AX)                  // movdqu	xmmword ptr [rax + 64], xmm1
	MOVQ BX, SI                                // <--                                  // mov	rsi, rbx
	SHRQ $0x28, SI                             // <--                                  // shr	rsi, 40
	LONG $0xf6b60f40                           // MOVZX SI, SI                         // movzx	esi, sil
	LONG $0x6f0f41f3; WORD $0x1414             // MOVDQU 0(R12)(DX*1), X2              // movdqu	xmm2, xmmword ptr [r12 + rdx]
	LONG $0x0cb60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R9               // movzx	r9d, byte ptr [rsi + r14]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x1400; BYTE $0x1e // PSHUFB 0(SI)(R11*1), X2              // pshufb	xmm2, xmmword ptr [rsi + r11]
	ADDQ R12, DX                               // <--                                  // add	rdx, r12
	LEAQ 0(DX)(R9*1), R12                      // <--                                  // lea	r12, [rdx + r9]
	LONG $0xda6f0f66                           // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66                           // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66                           // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x08               // PSLLDQ $0x8, X2                      // pslldq	xmm2, 8
	LONG $0xd3fe0f66                           // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0x507f0ff3; BYTE $0x50               // MOVDQU X2, 0x50(AX)                  // movdqu	xmmword ptr [rax + 80], xmm2
	MOVQ BX, SI                                // <--                                  // mov	rsi, rbx
	SHRQ $0x30, SI                             // <--                                  // shr	rsi, 48
	LONG $0xf6b60f40                           // MOVZX SI, SI                         // movzx	esi, sil
	LONG $0x6f0f41f3; WORD $0x110c             // MOVDQU 0(R9)(DX*1), X1               // movdqu	xmm1, xmmword ptr [r9 + rdx]
	LONG $0x0cb60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R9               // movzx	r9d, byte ptr [rsi + r14]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0c00; BYTE $0x1e // PSHUFB 0(SI)(R11*1), X1              // pshufb	xmm1, xmmword ptr [rsi + r11]
	LONG $0xd96f0f66                           // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xd2700f66; BYTE $0xff               // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66                           // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66                           // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcbfe0f66                           // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0x487f0ff3; BYTE $0x60               // MOVDQU X1, 0x60(AX)                  // movdqu	xmmword ptr [rax + 96], xmm1
	SHRQ $0x38, BX                             // <--                                  // shr	rbx, 56
	LONG $0x6f0f43f3; WORD $0x2114             // MOVDQU 0(R9)(R12*1), X2              // movdqu	xmm2, xmmword ptr [r9 + r12]
	LONG $0x14b60f42; BYTE $0x33               // MOVZX 0(BX)(R14*1), DX               // movzx	edx, byte ptr [rbx + r14]
	SHLQ $0x4, BX                              // <--                                  // shl	rbx, 4
	LONG $0x380f4266; WORD $0x1400; BYTE $0x1b // PSHUFB 0(BX)(R11*1), X2              // pshufb	xmm2, xmmword ptr [rbx + r11]
	ADDQ R9, DX                                // <--                                  // add	rdx, r9
	ADDQ R12, DX                               // <--                                  // add	rdx, r12
	LONG $0xda6f0f66                           // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xe1700f66; BYTE $0xff               // PSHUFD $0xff, X1, X4                 // pshufd	xmm4, xmm1, 255
	LONG $0xdafe0f66                           // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xcb6f0f66                           // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcbfe0f66                           // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0xccfe0f66                           // PADDD X4, X1                         // paddd	xmm1, xmm4

LBB6_11:
	LONG $0x487f0ff3; BYTE $0x70 // MOVDQU X1, 0x70(AX)                  // movdqu	xmmword ptr [rax + 112], xmm1
	SUBQ $-0x80, AX              // <--                                  // sub	rax, -128
	INCQ R10                     // <--                                  // inc	r10
	MOVQ CX, BX                  // <--                                  // mov	rbx, rcx
	CMPQ R15, R10                // <--                                  // cmp	r15, r10
	JE   LBB6_7                  // <--                                  // je	.LBB6_7

LBB6_12:
	MOVQ 0(DI)(R10*8), CX        // <--                                  // mov	rcx, qword ptr [rdi + 8*r10]
	WORD $0x8548; BYTE $0xdb     // TESTQ BX, BX                         // test	rbx, rbx
	JNE  LBB6_10                 // <--                                  // jne	.LBB6_10
	LONG $0x12f00ff2             // LDDQU 0(DX), X2                      // lddqu	xmm2, xmmword ptr [rdx]
	LONG $0x30380f66; BYTE $0xd2 // PMOVZXBW X2, X2                      // pmovzxbw	xmm2, xmm2
	LONG $0xda6f0f66             // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x02 // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xc9700f66; BYTE $0xff // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66             // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66             // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x04 // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xd3fe0f66             // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x33380f66; BYTE $0xda // PMOVZXWD X2, X3                      // pmovzxwd	xmm3, xmm2
	LONG $0xd9fe0f66             // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xd0690f66             // PUNPCKHWD X0, X2                     // punpckhwd	xmm2, xmm0
	LONG $0xd3fe0f66             // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x187f0ff3             // MOVDQU X3, 0(AX)                     // movdqu	xmmword ptr [rax], xmm3
	LONG $0x507f0ff3; BYTE $0x10 // MOVDQU X2, 0x10(AX)                  // movdqu	xmmword ptr [rax + 16], xmm2
	LONG $0x4af00ff2; BYTE $0x08 // LDDQU 0x8(DX), X1                    // lddqu	xmm1, xmmword ptr [rdx + 8]
	LONG $0x30380f66; BYTE $0xc9 // PMOVZXBW X1, X1                      // pmovzxbw	xmm1, xmm1
	LONG $0xd96f0f66             // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x02 // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xd2700f66; BYTE $0xff // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66             // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66             // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x04 // PSLLDQ $0x4, X1                      // pslldq	xmm1, 4
	LONG $0xcbfe0f66             // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x33380f66; BYTE $0xd9 // PMOVZXWD X1, X3                      // pmovzxwd	xmm3, xmm1
	LONG $0xdafe0f66             // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xc8690f66             // PUNPCKHWD X0, X1                     // punpckhwd	xmm1, xmm0
	LONG $0xcbfe0f66             // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x587f0ff3; BYTE $0x20 // MOVDQU X3, 0x20(AX)                  // movdqu	xmmword ptr [rax + 32], xmm3
	LONG $0x487f0ff3; BYTE $0x30 // MOVDQU X1, 0x30(AX)                  // movdqu	xmmword ptr [rax + 48], xmm1
	LONG $0x52f00ff2; BYTE $0x10 // LDDQU 0x10(DX), X2                   // lddqu	xmm2, xmmword ptr [rdx + 16]
	LONG $0x30380f66; BYTE $0xd2 // PMOVZXBW X2, X2                      // pmovzxbw	xmm2, xmm2
	LONG $0xda6f0f66             // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x02 // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xc9700f66; BYTE $0xff // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66             // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66             // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x04 // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xd3fe0f66             // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x33380f66; BYTE $0xda // PMOVZXWD X2, X3                      // pmovzxwd	xmm3, xmm2
	LONG $0xd9fe0f66             // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xd0690f66             // PUNPCKHWD X0, X2                     // punpckhwd	xmm2, xmm0
	LONG $0xd3fe0f66             // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x587f0ff3; BYTE $0x40 // MOVDQU X3, 0x40(AX)                  // movdqu	xmmword ptr [rax + 64], xmm3
	LONG $0x507f0ff3; BYTE $0x50 // MOVDQU X2, 0x50(AX)                  // movdqu	xmmword ptr [rax + 80], xmm2
	LONG $0x4af00ff2; BYTE $0x18 // LDDQU 0x18(DX), X1                   // lddqu	xmm1, xmmword ptr [rdx + 24]
	LONG $0x30380f66; BYTE $0xc9 // PMOVZXBW X1, X1                      // pmovzxbw	xmm1, xmm1
	LONG $0xd96f0f66             // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x02 // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xd2700f66; BYTE $0xff // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66             // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66             // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x04 // PSLLDQ $0x4, X1                      // pslldq	xmm1, 4
	LONG $0xcbfe0f66             // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x33380f66; BYTE $0xd9 // PMOVZXWD X1, X3                      // pmovzxwd	xmm3, xmm1
	LONG $0xdafe0f66             // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xc8690f66             // PUNPCKHWD X0, X1                     // punpckhwd	xmm1, xmm0
	LONG $0xcbfe0f66             // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x587f0ff3; BYTE $0x60 // MOVDQU X3, 0x60(AX)                  // movdqu	xmmword ptr [rax + 96], xmm3
	ADDQ $0x20, DX               // <--                                  // add	rdx, 32
	JMP  LBB6_11                 // <--                                  // jmp	.LBB6_11

LBB6_14:
	LONG $0x02f00ff2               // LDDQU 0(DX), X0                      // lddqu	xmm0, xmmword ptr [rdx]
	LONG $0x30380f66; BYTE $0xc0   // PMOVZXBW X0, X0                      // pmovzxbw	xmm0, xmm0
	LONG $0xd06f0f66               // MOVDQA X0, X2                        // movdqa	xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x02   // PSLLDQ $0x2, X2                      // pslldq	xmm2, 2
	LONG $0xc9700f66; BYTE $0xff   // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xd0fe0f66               // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0xda6f0f66               // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x04   // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xdafe0f66               // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0x33380f66; BYTE $0xd3   // PMOVZXWD X3, X2                      // pmovzxwd	xmm2, xmm3
	LONG $0xd1fe0f66               // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xc0ef0f66               // PXOR X0, X0                          // pxor	xmm0, xmm0
	LONG $0xd8690f66               // PUNPCKHWD X0, X3                     // punpckhwd	xmm3, xmm0
	LONG $0xdafe0f66               // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0x107f0ff3               // MOVDQU X2, 0(AX)                     // movdqu	xmmword ptr [rax], xmm2
	LONG $0x587f0ff3; BYTE $0x10   // MOVDQU X3, 0x10(AX)                  // movdqu	xmmword ptr [rax + 16], xmm3
	LONG $0x4af00ff2; BYTE $0x08   // LDDQU 0x8(DX), X1                    // lddqu	xmm1, xmmword ptr [rdx + 8]
	LONG $0x30380f66; BYTE $0xc9   // PMOVZXBW X1, X1                      // pmovzxbw	xmm1, xmm1
	LONG $0xd16f0f66               // MOVDQA X1, X2                        // movdqa	xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x02   // PSLLDQ $0x2, X2                      // pslldq	xmm2, 2
	LONG $0xdb700f66; BYTE $0xff   // PSHUFD $0xff, X3, X3                 // pshufd	xmm3, xmm3, 255
	LONG $0xd1fe0f66               // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xca6f0f66               // MOVDQA X2, X1                        // movdqa	xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x04   // PSLLDQ $0x4, X1                      // pslldq	xmm1, 4
	LONG $0xcafe0f66               // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0x33380f66; BYTE $0xd1   // PMOVZXWD X1, X2                      // pmovzxwd	xmm2, xmm1
	LONG $0xd3fe0f66               // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0xc8690f66               // PUNPCKHWD X0, X1                     // punpckhwd	xmm1, xmm0
	LONG $0xcafe0f66               // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0x507f0ff3; BYTE $0x20   // MOVDQU X2, 0x20(AX)                  // movdqu	xmmword ptr [rax + 32], xmm2
	LONG $0x487f0ff3; BYTE $0x30   // MOVDQU X1, 0x30(AX)                  // movdqu	xmmword ptr [rax + 48], xmm1
	LONG $0x52f00ff2; BYTE $0x10   // LDDQU 0x10(DX), X2                   // lddqu	xmm2, xmmword ptr [rdx + 16]
	LONG $0x30380f66; BYTE $0xd2   // PMOVZXBW X2, X2                      // pmovzxbw	xmm2, xmm2
	LONG $0xda6f0f66               // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x02   // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xc9700f66; BYTE $0xff   // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66               // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66               // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x04   // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xd3fe0f66               // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x33380f66; BYTE $0xda   // PMOVZXWD X2, X3                      // pmovzxwd	xmm3, xmm2
	LONG $0xd9fe0f66               // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xd0690f66               // PUNPCKHWD X0, X2                     // punpckhwd	xmm2, xmm0
	LONG $0xd3fe0f66               // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x587f0ff3; BYTE $0x40   // MOVDQU X3, 0x40(AX)                  // movdqu	xmmword ptr [rax + 64], xmm3
	LONG $0x507f0ff3; BYTE $0x50   // MOVDQU X2, 0x50(AX)                  // movdqu	xmmword ptr [rax + 80], xmm2
	LONG $0x30380f66; WORD $0x184a // PMOVZXBW 0x18(DX), X1                // pmovzxbw	xmm1, qword ptr [rdx + 24]
	LONG $0xd96f0f66               // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x02   // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xd2700f66; BYTE $0xff   // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66               // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66               // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x04   // PSLLDQ $0x4, X1                      // pslldq	xmm1, 4
	LONG $0xcbfe0f66               // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x33380f66; BYTE $0xd9   // PMOVZXWD X1, X3                      // pmovzxwd	xmm3, xmm1
	LONG $0xdafe0f66               // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xc8690f66               // PUNPCKHWD X0, X1                     // punpckhwd	xmm1, xmm0
	LONG $0xcbfe0f66               // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x587f0ff3; BYTE $0x60   // MOVDQU X3, 0x60(AX)                  // movdqu	xmmword ptr [rax + 96], xmm3
	LONG $0x487f0ff3; BYTE $0x70   // MOVDQU X1, 0x70(AX)                  // movdqu	xmmword ptr [rax + 112], xmm1
	ADDQ $0x20, DX                 // <--                                  // add	rdx, 32

LBB6_15:
	MOVQ 0x10(SP), R9 // <--                                  // mov	r9, qword ptr [rsp + 16]
	MOVQ 0x8(SP), CX  // <--                                  // mov	rcx, qword ptr [rsp + 8]

LBB6_16:
	WORD $0x8941; BYTE $0xca // MOVL CX, R10                         // mov	r10d, ecx
	LONG $0xe0e28341         // ANDL $-0x20, R10                     // and	r10d, -32
	LEAQ 0(R9)(R10*4), AX    // <--                                  // lea	rax, [r9 + 4*r10]
	MOVQ CX, SI              // <--                                  // mov	rsi, rcx
	ANDQ $0x1f, SI           // <--                                  // and	rsi, 31
	JE   LBB6_19             // <--                                  // je	.LBB6_19
	WORD $0x854d; BYTE $0xd2 // TESTQ R10, R10                       // test	r10, r10
	JE   LBB6_19             // <--                                  // je	.LBB6_19
	LONG $0xfc408b44         // MOVL -0x4(AX), R8                    // mov	r8d, dword ptr [rax - 4]

LBB6_19:
	WORD $0x8548; BYTE $0xf6 // TESTQ SI, SI                         // test	rsi, rsi
	JE   LBB6_32             // <--                                  // je	.LBB6_32
	WORD $0x8548; BYTE $0xd2 // TESTQ DX, DX                         // test	rdx, rdx
	JE   LBB6_32             // <--                                  // je	.LBB6_32
	SHRQ $0x2, CX            // <--                                  // shr	rcx, 2
	WORD $0xe183; BYTE $0xf8 // ANDL $-0x8, CX                       // and	ecx, -8
	ADDQ CX, DI              // <--                                  // add	rdi, rcx
	LONG $0x17b60f44         // MOVZX 0(DI), R10                     // movzx	r10d, byte ptr [rdi]
	INCQ DI                  // <--                                  // inc	rdi
	XORL CX, CX              // <--                                  // xor	ecx, ecx
	JMP  LBB6_24             // <--                                  // jmp	.LBB6_24

LBB6_22:
	WORD $0x8b44; BYTE $0x1a     // MOVL 0(DX), R11                      // mov	r11d, dword ptr [rdx]
	LONG $0x000004bb; BYTE $0x00 // MOVL $0x4, BX                        // mov	ebx, 4

LBB6_23:
	WORD $0x0145; BYTE $0xd8 // ADDL R11, R8                         // add	r8d, r11d
	ADDQ BX, DX              // <--                                  // add	rdx, rbx
	WORD $0x8944; BYTE $0x00 // MOVL R8, 0(AX)                       // mov	dword ptr [rax], r8d
	ADDQ $0x4, AX            // <--                                  // add	rax, 4
	WORD $0xc180; BYTE $0x02 // ADDL $0x2, CL                        // add	cl, 2
	WORD $0xceff             // DECL SI                              // dec	esi
	JE   LBB6_32             // <--                                  // je	.LBB6_32

LBB6_24:
	WORD $0xf980; BYTE $0x08 // CMPL CL, $0x8                        // cmp	cl, 8
	JNE  LBB6_26             // <--                                  // jne	.LBB6_26
	LONG $0x17b60f44         // MOVZX 0(DI), R10                     // movzx	r10d, byte ptr [rdi]
	INCQ DI                  // <--                                  // inc	rdi
	XORL CX, CX              // <--                                  // xor	ecx, ecx

LBB6_26:
	WORD $0x8945; BYTE $0xd3     // MOVL R10, R11                        // mov	r11d, r10d
	WORD $0xd341; BYTE $0xeb     // SHRL CL, R11                         // shr	r11d, cl
	LONG $0x03c3f641             // TESTL $0x3, R11                      // test	r11b, 3
	JE   LBB6_30                 // <--                                  // je	.LBB6_30
	LONG $0x03e38341             // ANDL $0x3, R11                       // and	r11d, 3
	CMPL R11, $0x1               // <--                                  // cmp	r11d, 1
	JE   LBB6_31                 // <--                                  // je	.LBB6_31
	CMPL R11, $0x2               // <--                                  // cmp	r11d, 2
	JNE  LBB6_22                 // <--                                  // jne	.LBB6_22
	WORD $0xb70f; BYTE $0x1a     // MOVZX 0(DX), BX                      // movzx	ebx, word ptr [rdx]
	LONG $0x5ab60f44; BYTE $0x02 // MOVZX 0x2(DX), R11                   // movzx	r11d, byte ptr [rdx + 2]
	LONG $0x10e3c141             // SHLL $0x10, R11                      // shl	r11d, 16
	WORD $0x0941; BYTE $0xdb     // ORL BX, R11                          // or	r11d, ebx
	LONG $0x000003bb; BYTE $0x00 // MOVL $0x3, BX                        // mov	ebx, 3
	JMP  LBB6_23                 // <--                                  // jmp	.LBB6_23

LBB6_30:
	LONG $0x1ab60f44             // MOVZX 0(DX), R11                     // movzx	r11d, byte ptr [rdx]
	LONG $0x000001bb; BYTE $0x00 // MOVL $0x1, BX                        // mov	ebx, 1
	JMP  LBB6_23                 // <--                                  // jmp	.LBB6_23

LBB6_31:
	LONG $0x1ab70f44             // MOVZX 0(DX), R11                     // movzx	r11d, word ptr [rdx]
	LONG $0x000002bb; BYTE $0x00 // MOVL $0x2, BX                        // mov	ebx, 2
	JMP  LBB6_23                 // <--                                  // jmp	.LBB6_23

LBB6_32:
	SUBQ R9, AX              // <--                                  // sub	rax, r9
	SARQ $0x2, AX            // <--                                  // sar	rax, 2
	WORD $0x8548; BYTE $0xd2 // TESTQ DX, DX                         // test	rdx, rdx
	LONG $0xc2440f48         // CMOVE DX, AX                         // cmove	rax, rdx
	NOP                      // (skipped)                            // lea	rsp, [rbp - 40]
	MOVQ 56(SP), BX          // <--                                  // pop	rbx
	MOVQ 48(SP), R12         // <--                                  // pop	r12
	MOVQ 40(SP), R13         // <--                                  // pop	r13
	MOVQ 32(SP), R14         // <--                                  // pop	r14
	MOVQ 24(SP), R15         // <--                                  // pop	r15
	NOP                      // (skipped)                            // pop	rbp
	MOVQ AX, ret+48(FP)      // <--
	RET                      // <--                                  // ret

DATA shuf_lut<>+0x00(SB)/8, $0xff0f0e0d0c080400
DATA shuf_lut<>+0x08(SB)/8, $0xffffffffffffffff
DATA shuf_lut<>+0x10(SB)/8, $0x0f0e0d0c08040100
DATA shuf_lut<>+0x18(SB)/8, $0xffffffffffffffff
DATA shuf_lut<>+0x20(SB)/8, $0x0e0d0c0804020100
DATA shuf_lut<>+0x28(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x30(SB)/8, $0x0d0c080403020100
DATA shuf_lut<>+0x38(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x40(SB)/8, $0x0f0e0d0c08050400
DATA shuf_lut<>+0x48(SB)/8, $0xffffffffffffffff
DATA shuf_lut<>+0x50(SB)/8, $0x0e0d0c0805040100
DATA shuf_lut<>+0x58(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x60(SB)/8, $0x0d0c080504020100
DATA shuf_lut<>+0x68(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x70(SB)/8, $0x0c08050403020100
DATA shuf_lut<>+0x78(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x80(SB)/8, $0x0e0d0c0806050400
DATA shuf_lut<>+0x88(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x90(SB)/8, $0x0d0c080605040100
DATA shuf_lut<>+0x98(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0xa0(SB)/8, $0x0c08060504020100
DATA shuf_lut<>+0xa8(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0xb0(SB)/8, $0x0806050403020100
DATA shuf_lut<>+0xb8(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0xc0(SB)/8, $0x0d0c080706050400
DATA shuf_lut<>+0xc8(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0xd0(SB)/8, $0x0c08070605040100
DATA shuf_lut<>+0xd8(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0xe0(SB)/8, $0x0807060504020100
DATA shuf_lut<>+0xe8(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0xf0(SB)/8, $0x0706050403020100
DATA shuf_lut<>+0xf8(SB)/8, $0xffffff0f0e0d0c08
DATA shuf_lut<>+0x100(SB)/8, $0x0f0e0d0c09080400
DATA shuf_lut<>+0x108(SB)/8, $0xffffffffffffffff
DATA shuf_lut<>+0x110(SB)/8, $0x0e0d0c0908040100
DATA shuf_lut<>+0x118(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x120(SB)/8, $0x0d0c090804020100
DATA shuf_lut<>+0x128(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x130(SB)/8, $0x0c09080403020100
DATA shuf_lut<>+0x138(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x140(SB)/8, $0x0e0d0c0908050400
DATA shuf_lut<>+0x148(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x150(SB)/8, $0x0d0c090805040100
DATA shuf_lut<>+0x158(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x160(SB)/8, $0x0c09080504020100
DATA shuf_lut<>+0x168(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x170(SB)/8, $0x0908050403020100
DATA shuf_lut<>+0x178(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x180(SB)/8, $0x0d0c090806050400
DATA shuf_lut<>+0x188(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x190(SB)/8, $0x0c09080605040100
DATA shuf_lut<>+0x198(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x1a0(SB)/8, $0x0908060504020100
DATA shuf_lut<>+0x1a8(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x1b0(SB)/8, $0x0806050403020100
DATA shuf_lut<>+0x1b8(SB)/8, $0xffffff0f0e0d0c09
DATA shuf_lut<>+0x1c0(SB)/8, $0x0c09080706050400
DATA shuf_lut<>+0x1c8(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x1d0(SB)/8, $0x0908070605040100
DATA shuf_lut<>+0x1d8(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x1e0(SB)/8, $0x0807060504020100
DATA shuf_lut<>+0x1e8(SB)/8, $0xffffff0f0e0d0c09
DATA shuf_lut<>+0x1f0(SB)/8, $0x0706050403020100
DATA shuf_lut<>+0x1f8(SB)/8, $0xffff0f0e0d0c0908
DATA shuf_lut<>+0x200(SB)/8, $0x0e0d0c0a09080400
DATA shuf_lut<>+0x208(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x210(SB)/8, $0x0d0c0a0908040100
DATA shuf_lut<>+0x218(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x220(SB)/8, $0x0c0a090804020100
DATA shuf_lut<>+0x228(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x230(SB)/8, $0x0a09080403020100
DATA shuf_lut<>+0x238(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x240(SB)/8, $0x0d0c0a0908050400
DATA shuf_lut<>+0x248(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x250(SB)/8, $0x0c0a090805040100
DATA shuf_lut<>+0x258(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x260(SB)/8, $0x0a09080504020100
DATA shuf_lut<>+0x268(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x270(SB)/8, $0x0908050403020100
DATA shuf_lut<>+0x278(SB)/8, $0xffffff0f0e0d0c0a
DATA shuf_lut<>+0x280(SB)/8, $0x0c0a090806050400
DATA shuf_lut<>+0x288(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x290(SB)/8, $0x0a09080605040100
DATA shuf_lut<>+0x298(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x2a0(SB)/8, $0x0908060504020100
DATA shuf_lut<>+0x2a8(SB)/8, $0xffffff0f0e0d0c0a
DATA shuf_lut<>+0x2b0(SB)/8, $0x0806050403020100
DATA shuf_lut<>+0x2b8(SB)/8, $0xffff0f0e0d0c0a09
DATA shuf_lut<>+0x2c0(SB)/8, $0x0a09080706050400
DATA shuf_lut<>+0x2c8(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x2d0(SB)/8, $0x0908070605040100
DATA shuf_lut<>+0x2d8(SB)/8, $0xffffff0f0e0d0c0a
DATA shuf_lut<>+0x2e0(SB)/8, $0x0807060504020100
DATA shuf_lut<>+0x2e8(SB)/8, $0xffff0f0e0d0c0a09
DATA shuf_lut<>+0x2f0(SB)/8, $0x0706050403020100
DATA shuf_lut<>+0x2f8(SB)/8, $0xff0f0e0d0c0a0908
DATA shuf_lut<>+0x300(SB)/8, $0x0d0c0b0a09080400
DATA shuf_lut<>+0x308(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x310(SB)/8, $0x0c0b0a0908040100
DATA shuf_lut<>+0x318(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x320(SB)/8, $0x0b0a090804020100
DATA shuf_lut<>+0x328(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x330(SB)/8, $0x0a09080403020100
DATA shuf_lut<>+0x338(SB)/8, $0xffffff0f0e0d0c0b
DATA shuf_lut<>+0x340(SB)/8, $0x0c0b0a0908050400
DATA shuf_lut<>+0x348(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x350(SB)/8, $0x0b0a090805040100
DATA shuf_lut<>+0x358(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x360(SB)/8, $0x0a09080504020100
DATA shuf_lut<>+0x368(SB)/8, $0xffffff0f0e0d0c0b
DATA shuf_lut<>+0x370(SB)/8, $0x0908050403020100
DATA shuf_lut<>+0x378(SB)/8, $0xffff0f0e0d0c0b0a
DATA shuf_lut<>+0x380(SB)/8, $0x0b0a090806050400
DATA shuf_lut<>+0x388(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x390(SB)/8, $0x0a09080605040100
DATA shuf_lut<>+0x398(SB)/8, $0xffffff0f0e0d0c0b
DATA shuf_lut<>+0x3a0(SB)/8, $0x0908060504020100
DATA shuf_lut<>+0x3a8(SB)/8, $0xffff0f0e0d0c0b0a
DATA shuf_lut<>+0x3b0(SB)/8, $0x0806050403020100
DATA shuf_lut<>+0x3b8(SB)/8, $0xff0f0e0d0c0b0a09
DATA shuf_lut<>+0x3c0(SB)/8, $0x0a09080706050400
DATA shuf_lut<>+0x3c8(SB)/8, $0xffffff0f0e0d0c0b
DATA shuf_lut<>+0x3d0(SB)/8, $0x0908070605040100
DATA shuf_lut<>+0x3d8(SB)/8, $0xffff0f0e0d0c0b0a
DATA shuf_lut<>+0x3e0(SB)/8, $0x0807060504020100
DATA shuf_lut<>+0x3e8(SB)/8, $0xff0f0e0d0c0b0a09
DATA shuf_lut<>+0x3f0(SB)/8, $0x0706050403020100
DATA shuf_lut<>+0x3f8(SB)/8, $0x0f0e0d0c0b0a0908
GLOBL shuf_lut<>(SB), (RODATA|NOPTR), $1024

DATA lengthTable_1234<>+0x00(SB)/8, $0x0807060507060504
DATA lengthTable_1234<>+0x08(SB)/8, $0x0a09080709080706
DATA lengthTable_1234<>+0x10(SB)/8, $0x0908070608070605
DATA lengthTable_1234<>+0x18(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0x20(SB)/8, $0x0a09080709080706
DATA lengthTable_1234<>+0x28(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0x30(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0x38(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0x40(SB)/8, $0x0908070608070605
DATA lengthTable_1234<>+0x48(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0x50(SB)/8, $0x0a09080709080706
DATA lengthTable_1234<>+0x58(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0x60(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0x68(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0x70(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0x78(SB)/8, $0x0e0d0c0b0d0c0b0a
DATA lengthTable_1234<>+0x80(SB)/8, $0x0a09080709080706
DATA lengthTable_1234<>+0x88(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0x90(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0x98(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0xa0(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0xa8(SB)/8, $0x0e0d0c0b0d0c0b0a
DATA lengthTable_1234<>+0xb0(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0xb8(SB)/8, $0x0f0e0d0c0e0d0c0b
DATA lengthTable_1234<>+0xc0(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0xc8(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0xd0(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0xd8(SB)/8, $0x0e0d0c0b0d0c0b0a
DATA lengthTable_1234<>+0xe0(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0xe8(SB)/8, $0x0f0e0d0c0e0d0c0b
DATA lengthTable_1234<>+0xf0(SB)/8, $0x0e0d0c0b0d0c0b0a
DATA lengthTable_1234<>+0xf8(SB)/8, $0x100f0e0d0f0e0d0c
GLOBL lengthTable_1234<>(SB), (RODATA|NOPTR), $256

DATA lengthTable_0124<>+0x00(SB)/8, $0x0503020104020100
DATA lengthTable_0124<>+0x08(SB)/8, $0x0806050406040302
DATA lengthTable_0124<>+0x10(SB)/8, $0x0604030205030201
DATA lengthTable_0124<>+0x18(SB)/8, $0x0907060507050403
DATA lengthTable_0124<>+0x20(SB)/8, $0x0705040306040302
DATA lengthTable_0124<>+0x28(SB)/8, $0x0a08070608060504
DATA lengthTable_0124<>+0x30(SB)/8, $0x0907060508060504
DATA lengthTable_0124<>+0x38(SB)/8, $0x0c0a09080a080706
DATA lengthTable_0124<>+0x40(SB)/8, $0x0604030205030201
DATA lengthTable_0124<>+0x48(SB)/8, $0x0907060507050403
DATA lengthTable_0124<>+0x50(SB)/8, $0x0705040306040302
DATA lengthTable_0124<>+0x58(SB)/8, $0x0a08070608060504
DATA lengthTable_0124<>+0x60(SB)/8, $0x0806050407050403
DATA lengthTable_0124<>+0x68(SB)/8, $0x0b09080709070605
DATA lengthTable_0124<>+0x70(SB)/8, $0x0a08070609070605
DATA lengthTable_0124<>+0x78(SB)/8, $0x0d0b0a090b090807
DATA lengthTable_0124<>+0x80(SB)/8, $0x0705040306040302
DATA lengthTable_0124<>+0x88(SB)/8, $0x0a08070608060504
DATA lengthTable_0124<>+0x90(SB)/8, $0x0806050407050403
DATA lengthTable_0124<>+0x98(SB)/8, $0x0b09080709070605
DATA lengthTable_0124<>+0xa0(SB)/8, $0x0907060508060504
DATA lengthTable_0124<>+0xa8(SB)/8, $0x0c0a09080a080706
DATA lengthTable_0124<>+0xb0(SB)/8, $0x0b0908070a080706
DATA lengthTable_0124<>+0xb8(SB)/8, $0x0e0c0b0a0c0a0908
DATA lengthTable_0124<>+0xc0(SB)/8, $0x0907060508060504
DATA lengthTable_0124<>+0xc8(SB)/8, $0x0c0a09080a080706
DATA lengthTable_0124<>+0xd0(SB)/8, $0x0a08070609070605
DATA lengthTable_0124<>+0xd8(SB)/8, $0x0d0b0a090b090807
DATA lengthTable_0124<>+0xe0(SB)/8, $0x0b0908070a080706
DATA lengthTable_0124<>+0xe8(SB)/8, $0x0e0c0b0a0c0a0908
DATA lengthTable_0124<>+0xf0(SB)/8, $0x0d0b0a090c0a0908
DATA lengthTable_0124<>+0xf8(SB)/8, $0x100e0d0c0e0c0b0a
GLOBL lengthTable_0124<>(SB), (RODATA|NOPTR), $256

DATA encodingShuffleTable_0124<>+0x00(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x10(SB)/8, $0xffffffffffffff00
DATA encodingShuffleTable_0124<>+0x18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x20(SB)/8, $0xffffffffffff0100
DATA encodingShuffleTable_0124<>+0x28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x30(SB)/8, $0xffffffff03020100
DATA encodingShuffleTable_0124<>+0x38(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x40(SB)/8, $0xffffffffffffff04
DATA encodingShuffleTable_0124<>+0x48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x50(SB)/8, $0xffffffffffff0400
DATA encodingShuffleTable_0124<>+0x58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x60(SB)/8, $0xffffffffff040100
DATA encodingShuffleTable_0124<>+0x68(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x70(SB)/8, $0xffffff0403020100
DATA encodingShuffleTable_0124<>+0x78(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x80(SB)/8, $0xffffffffffff0504
DATA encodingShuffleTable_0124<>+0x88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x90(SB)/8, $0xffffffffff050400
DATA encodingShuffleTable_0124<>+0x98(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa0(SB)/8, $0xffffffff05040100
DATA encodingShuffleTable_0124<>+0xa8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb0(SB)/8, $0xffff050403020100
DATA encodingShuffleTable_0124<>+0xb8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc0(SB)/8, $0xffffffff07060504
DATA encodingShuffleTable_0124<>+0xc8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd0(SB)/8, $0xffffff0706050400
DATA encodingShuffleTable_0124<>+0xd8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe0(SB)/8, $0xffff070605040100
DATA encodingShuffleTable_0124<>+0xe8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xf0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xf8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x100(SB)/8, $0xffffffffffffff08
DATA encodingShuffleTable_0124<>+0x108(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x110(SB)/8, $0xffffffffffff0800
DATA encodingShuffleTable_0124<>+0x118(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x120(SB)/8, $0xffffffffff080100
DATA encodingShuffleTable_0124<>+0x128(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x130(SB)/8, $0xffffff0803020100
DATA encodingShuffleTable_0124<>+0x138(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x140(SB)/8, $0xffffffffffff0804
DATA encodingShuffleTable_0124<>+0x148(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x150(SB)/8, $0xffffffffff080400
DATA encodingShuffleTable_0124<>+0x158(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x160(SB)/8, $0xffffffff08040100
DATA encodingShuffleTable_0124<>+0x168(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x170(SB)/8, $0xffff080403020100
DATA encodingShuffleTable_0124<>+0x178(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x180(SB)/8, $0xffffffffff080504
DATA encodingShuffleTable_0124<>+0x188(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x190(SB)/8, $0xffffffff08050400
DATA encodingShuffleTable_0124<>+0x198(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1a0(SB)/8, $0xffffff0805040100
DATA encodingShuffleTable_0124<>+0x1a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1b0(SB)/8, $0xff08050403020100
DATA encodingShuffleTable_0124<>+0x1b8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1c0(SB)/8, $0xffffff0807060504
DATA encodingShuffleTable_0124<>+0x1c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1d0(SB)/8, $0xffff080706050400
DATA encodingShuffleTable_0124<>+0x1d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1e0(SB)/8, $0xff08070605040100
DATA encodingShuffleTable_0124<>+0x1e8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x1f8(SB)/8, $0xffffffffffffff08
DATA encodingShuffleTable_0124<>+0x200(SB)/8, $0xffffffffffff0908
DATA encodingShuffleTable_0124<>+0x208(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x210(SB)/8, $0xffffffffff090800
DATA encodingShuffleTable_0124<>+0x218(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x220(SB)/8, $0xffffffff09080100
DATA encodingShuffleTable_0124<>+0x228(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x230(SB)/8, $0xffff090803020100
DATA encodingShuffleTable_0124<>+0x238(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x240(SB)/8, $0xffffffffff090804
DATA encodingShuffleTable_0124<>+0x248(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x250(SB)/8, $0xffffffff09080400
DATA encodingShuffleTable_0124<>+0x258(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x260(SB)/8, $0xffffff0908040100
DATA encodingShuffleTable_0124<>+0x268(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x270(SB)/8, $0xff09080403020100
DATA encodingShuffleTable_0124<>+0x278(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x280(SB)/8, $0xffffffff09080504
DATA encodingShuffleTable_0124<>+0x288(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x290(SB)/8, $0xffffff0908050400
DATA encodingShuffleTable_0124<>+0x298(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2a0(SB)/8, $0xffff090805040100
DATA encodingShuffleTable_0124<>+0x2a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2b0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0x2b8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2c0(SB)/8, $0xffff090807060504
DATA encodingShuffleTable_0124<>+0x2c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2d0(SB)/8, $0xff09080706050400
DATA encodingShuffleTable_0124<>+0x2d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2e0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0x2e8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x2f8(SB)/8, $0xffffffffffff0908
DATA encodingShuffleTable_0124<>+0x300(SB)/8, $0xffffffff0b0a0908
DATA encodingShuffleTable_0124<>+0x308(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x310(SB)/8, $0xffffff0b0a090800
DATA encodingShuffleTable_0124<>+0x318(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x320(SB)/8, $0xffff0b0a09080100
DATA encodingShuffleTable_0124<>+0x328(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x330(SB)/8, $0x0b0a090803020100
DATA encodingShuffleTable_0124<>+0x338(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x340(SB)/8, $0xffffff0b0a090804
DATA encodingShuffleTable_0124<>+0x348(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x350(SB)/8, $0xffff0b0a09080400
DATA encodingShuffleTable_0124<>+0x358(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x360(SB)/8, $0xff0b0a0908040100
DATA encodingShuffleTable_0124<>+0x368(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x370(SB)/8, $0x0a09080403020100
DATA encodingShuffleTable_0124<>+0x378(SB)/8, $0xffffffffffffff0b
DATA encodingShuffleTable_0124<>+0x380(SB)/8, $0xffff0b0a09080504
DATA encodingShuffleTable_0124<>+0x388(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x390(SB)/8, $0xff0b0a0908050400
DATA encodingShuffleTable_0124<>+0x398(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x3a0(SB)/8, $0x0b0a090805040100
DATA encodingShuffleTable_0124<>+0x3a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x3b0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0x3b8(SB)/8, $0xffffffffffff0b0a
DATA encodingShuffleTable_0124<>+0x3c0(SB)/8, $0x0b0a090807060504
DATA encodingShuffleTable_0124<>+0x3c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x3d0(SB)/8, $0x0a09080706050400
DATA encodingShuffleTable_0124<>+0x3d8(SB)/8, $0xffffffffffffff0b
DATA encodingShuffleTable_0124<>+0x3e0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0x3e8(SB)/8, $0xffffffffffff0b0a
DATA encodingShuffleTable_0124<>+0x3f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x3f8(SB)/8, $0xffffffff0b0a0908
DATA encodingShuffleTable_0124<>+0x400(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x408(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x410(SB)/8, $0xffffffffffff0c00
DATA encodingShuffleTable_0124<>+0x418(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x420(SB)/8, $0xffffffffff0c0100
DATA encodingShuffleTable_0124<>+0x428(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x430(SB)/8, $0xffffff0c03020100
DATA encodingShuffleTable_0124<>+0x438(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x440(SB)/8, $0xffffffffffff0c04
DATA encodingShuffleTable_0124<>+0x448(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x450(SB)/8, $0xffffffffff0c0400
DATA encodingShuffleTable_0124<>+0x458(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x460(SB)/8, $0xffffffff0c040100
DATA encodingShuffleTable_0124<>+0x468(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x470(SB)/8, $0xffff0c0403020100
DATA encodingShuffleTable_0124<>+0x478(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x480(SB)/8, $0xffffffffff0c0504
DATA encodingShuffleTable_0124<>+0x488(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x490(SB)/8, $0xffffffff0c050400
DATA encodingShuffleTable_0124<>+0x498(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4a0(SB)/8, $0xffffff0c05040100
DATA encodingShuffleTable_0124<>+0x4a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4b0(SB)/8, $0xff0c050403020100
DATA encodingShuffleTable_0124<>+0x4b8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4c0(SB)/8, $0xffffff0c07060504
DATA encodingShuffleTable_0124<>+0x4c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4d0(SB)/8, $0xffff0c0706050400
DATA encodingShuffleTable_0124<>+0x4d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4e0(SB)/8, $0xff0c070605040100
DATA encodingShuffleTable_0124<>+0x4e8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x4f8(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x500(SB)/8, $0xffffffffffff0c08
DATA encodingShuffleTable_0124<>+0x508(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x510(SB)/8, $0xffffffffff0c0800
DATA encodingShuffleTable_0124<>+0x518(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x520(SB)/8, $0xffffffff0c080100
DATA encodingShuffleTable_0124<>+0x528(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x530(SB)/8, $0xffff0c0803020100
DATA encodingShuffleTable_0124<>+0x538(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x540(SB)/8, $0xffffffffff0c0804
DATA encodingShuffleTable_0124<>+0x548(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x550(SB)/8, $0xffffffff0c080400
DATA encodingShuffleTable_0124<>+0x558(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x560(SB)/8, $0xffffff0c08040100
DATA encodingShuffleTable_0124<>+0x568(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x570(SB)/8, $0xff0c080403020100
DATA encodingShuffleTable_0124<>+0x578(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x580(SB)/8, $0xffffffff0c080504
DATA encodingShuffleTable_0124<>+0x588(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x590(SB)/8, $0xffffff0c08050400
DATA encodingShuffleTable_0124<>+0x598(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5a0(SB)/8, $0xffff0c0805040100
DATA encodingShuffleTable_0124<>+0x5a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5b0(SB)/8, $0x0c08050403020100
DATA encodingShuffleTable_0124<>+0x5b8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5c0(SB)/8, $0xffff0c0807060504
DATA encodingShuffleTable_0124<>+0x5c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5d0(SB)/8, $0xff0c080706050400
DATA encodingShuffleTable_0124<>+0x5d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5e0(SB)/8, $0x0c08070605040100
DATA encodingShuffleTable_0124<>+0x5e8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x5f8(SB)/8, $0xffffffffffff0c08
DATA encodingShuffleTable_0124<>+0x600(SB)/8, $0xffffffffff0c0908
DATA encodingShuffleTable_0124<>+0x608(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x610(SB)/8, $0xffffffff0c090800
DATA encodingShuffleTable_0124<>+0x618(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x620(SB)/8, $0xffffff0c09080100
DATA encodingShuffleTable_0124<>+0x628(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x630(SB)/8, $0xff0c090803020100
DATA encodingShuffleTable_0124<>+0x638(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x640(SB)/8, $0xffffffff0c090804
DATA encodingShuffleTable_0124<>+0x648(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x650(SB)/8, $0xffffff0c09080400
DATA encodingShuffleTable_0124<>+0x658(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x660(SB)/8, $0xffff0c0908040100
DATA encodingShuffleTable_0124<>+0x668(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x670(SB)/8, $0x0c09080403020100
DATA encodingShuffleTable_0124<>+0x678(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x680(SB)/8, $0xffffff0c09080504
DATA encodingShuffleTable_0124<>+0x688(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x690(SB)/8, $0xffff0c0908050400
DATA encodingShuffleTable_0124<>+0x698(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x6a0(SB)/8, $0xff0c090805040100
DATA encodingShuffleTable_0124<>+0x6a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x6b0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0x6b8(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x6c0(SB)/8, $0xff0c090807060504
DATA encodingShuffleTable_0124<>+0x6c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x6d0(SB)/8, $0x0c09080706050400
DATA encodingShuffleTable_0124<>+0x6d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x6e0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0x6e8(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x6f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x6f8(SB)/8, $0xffffffffff0c0908
DATA encodingShuffleTable_0124<>+0x700(SB)/8, $0xffffff0c0b0a0908
DATA encodingShuffleTable_0124<>+0x708(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x710(SB)/8, $0xffff0c0b0a090800
DATA encodingShuffleTable_0124<>+0x718(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x720(SB)/8, $0xff0c0b0a09080100
DATA encodingShuffleTable_0124<>+0x728(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x730(SB)/8, $0x0b0a090803020100
DATA encodingShuffleTable_0124<>+0x738(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x740(SB)/8, $0xffff0c0b0a090804
DATA encodingShuffleTable_0124<>+0x748(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x750(SB)/8, $0xff0c0b0a09080400
DATA encodingShuffleTable_0124<>+0x758(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x760(SB)/8, $0x0c0b0a0908040100
DATA encodingShuffleTable_0124<>+0x768(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x770(SB)/8, $0x0a09080403020100
DATA encodingShuffleTable_0124<>+0x778(SB)/8, $0xffffffffffff0c0b
DATA encodingShuffleTable_0124<>+0x780(SB)/8, $0xff0c0b0a09080504
DATA encodingShuffleTable_0124<>+0x788(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x790(SB)/8, $0x0c0b0a0908050400
DATA encodingShuffleTable_0124<>+0x798(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x7a0(SB)/8, $0x0b0a090805040100
DATA encodingShuffleTable_0124<>+0x7a8(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x7b0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0x7b8(SB)/8, $0xffffffffff0c0b0a
DATA encodingShuffleTable_0124<>+0x7c0(SB)/8, $0x0b0a090807060504
DATA encodingShuffleTable_0124<>+0x7c8(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x7d0(SB)/8, $0x0a09080706050400
DATA encodingShuffleTable_0124<>+0x7d8(SB)/8, $0xffffffffffff0c0b
DATA encodingShuffleTable_0124<>+0x7e0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0x7e8(SB)/8, $0xffffffffff0c0b0a
DATA encodingShuffleTable_0124<>+0x7f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x7f8(SB)/8, $0xffffff0c0b0a0908
DATA encodingShuffleTable_0124<>+0x800(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0x808(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x810(SB)/8, $0xffffffffff0d0c00
DATA encodingShuffleTable_0124<>+0x818(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x820(SB)/8, $0xffffffff0d0c0100
DATA encodingShuffleTable_0124<>+0x828(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x830(SB)/8, $0xffff0d0c03020100
DATA encodingShuffleTable_0124<>+0x838(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x840(SB)/8, $0xffffffffff0d0c04
DATA encodingShuffleTable_0124<>+0x848(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x850(SB)/8, $0xffffffff0d0c0400
DATA encodingShuffleTable_0124<>+0x858(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x860(SB)/8, $0xffffff0d0c040100
DATA encodingShuffleTable_0124<>+0x868(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x870(SB)/8, $0xff0d0c0403020100
DATA encodingShuffleTable_0124<>+0x878(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x880(SB)/8, $0xffffffff0d0c0504
DATA encodingShuffleTable_0124<>+0x888(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x890(SB)/8, $0xffffff0d0c050400
DATA encodingShuffleTable_0124<>+0x898(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8a0(SB)/8, $0xffff0d0c05040100
DATA encodingShuffleTable_0124<>+0x8a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8b0(SB)/8, $0x0d0c050403020100
DATA encodingShuffleTable_0124<>+0x8b8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8c0(SB)/8, $0xffff0d0c07060504
DATA encodingShuffleTable_0124<>+0x8c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8d0(SB)/8, $0xff0d0c0706050400
DATA encodingShuffleTable_0124<>+0x8d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8e0(SB)/8, $0x0d0c070605040100
DATA encodingShuffleTable_0124<>+0x8e8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x8f8(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0x900(SB)/8, $0xffffffffff0d0c08
DATA encodingShuffleTable_0124<>+0x908(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x910(SB)/8, $0xffffffff0d0c0800
DATA encodingShuffleTable_0124<>+0x918(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x920(SB)/8, $0xffffff0d0c080100
DATA encodingShuffleTable_0124<>+0x928(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x930(SB)/8, $0xff0d0c0803020100
DATA encodingShuffleTable_0124<>+0x938(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x940(SB)/8, $0xffffffff0d0c0804
DATA encodingShuffleTable_0124<>+0x948(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x950(SB)/8, $0xffffff0d0c080400
DATA encodingShuffleTable_0124<>+0x958(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x960(SB)/8, $0xffff0d0c08040100
DATA encodingShuffleTable_0124<>+0x968(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x970(SB)/8, $0x0d0c080403020100
DATA encodingShuffleTable_0124<>+0x978(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x980(SB)/8, $0xffffff0d0c080504
DATA encodingShuffleTable_0124<>+0x988(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x990(SB)/8, $0xffff0d0c08050400
DATA encodingShuffleTable_0124<>+0x998(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x9a0(SB)/8, $0xff0d0c0805040100
DATA encodingShuffleTable_0124<>+0x9a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x9b0(SB)/8, $0x0c08050403020100
DATA encodingShuffleTable_0124<>+0x9b8(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0x9c0(SB)/8, $0xff0d0c0807060504
DATA encodingShuffleTable_0124<>+0x9c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x9d0(SB)/8, $0x0d0c080706050400
DATA encodingShuffleTable_0124<>+0x9d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x9e0(SB)/8, $0x0c08070605040100
DATA encodingShuffleTable_0124<>+0x9e8(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0x9f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x9f8(SB)/8, $0xffffffffff0d0c08
DATA encodingShuffleTable_0124<>+0xa00(SB)/8, $0xffffffff0d0c0908
DATA encodingShuffleTable_0124<>+0xa08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa10(SB)/8, $0xffffff0d0c090800
DATA encodingShuffleTable_0124<>+0xa18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa20(SB)/8, $0xffff0d0c09080100
DATA encodingShuffleTable_0124<>+0xa28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa30(SB)/8, $0x0d0c090803020100
DATA encodingShuffleTable_0124<>+0xa38(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa40(SB)/8, $0xffffff0d0c090804
DATA encodingShuffleTable_0124<>+0xa48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa50(SB)/8, $0xffff0d0c09080400
DATA encodingShuffleTable_0124<>+0xa58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa60(SB)/8, $0xff0d0c0908040100
DATA encodingShuffleTable_0124<>+0xa68(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa70(SB)/8, $0x0c09080403020100
DATA encodingShuffleTable_0124<>+0xa78(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0xa80(SB)/8, $0xffff0d0c09080504
DATA encodingShuffleTable_0124<>+0xa88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa90(SB)/8, $0xff0d0c0908050400
DATA encodingShuffleTable_0124<>+0xa98(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xaa0(SB)/8, $0x0d0c090805040100
DATA encodingShuffleTable_0124<>+0xaa8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xab0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0xab8(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0xac0(SB)/8, $0x0d0c090807060504
DATA encodingShuffleTable_0124<>+0xac8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xad0(SB)/8, $0x0c09080706050400
DATA encodingShuffleTable_0124<>+0xad8(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0xae0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0xae8(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0xaf0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xaf8(SB)/8, $0xffffffff0d0c0908
DATA encodingShuffleTable_0124<>+0xb00(SB)/8, $0xffff0d0c0b0a0908
DATA encodingShuffleTable_0124<>+0xb08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb10(SB)/8, $0xff0d0c0b0a090800
DATA encodingShuffleTable_0124<>+0xb18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb20(SB)/8, $0x0d0c0b0a09080100
DATA encodingShuffleTable_0124<>+0xb28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb30(SB)/8, $0x0b0a090803020100
DATA encodingShuffleTable_0124<>+0xb38(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0xb40(SB)/8, $0xff0d0c0b0a090804
DATA encodingShuffleTable_0124<>+0xb48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb50(SB)/8, $0x0d0c0b0a09080400
DATA encodingShuffleTable_0124<>+0xb58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb60(SB)/8, $0x0c0b0a0908040100
DATA encodingShuffleTable_0124<>+0xb68(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0xb70(SB)/8, $0x0a09080403020100
DATA encodingShuffleTable_0124<>+0xb78(SB)/8, $0xffffffffff0d0c0b
DATA encodingShuffleTable_0124<>+0xb80(SB)/8, $0x0d0c0b0a09080504
DATA encodingShuffleTable_0124<>+0xb88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb90(SB)/8, $0x0c0b0a0908050400
DATA encodingShuffleTable_0124<>+0xb98(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0xba0(SB)/8, $0x0b0a090805040100
DATA encodingShuffleTable_0124<>+0xba8(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0xbb0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0xbb8(SB)/8, $0xffffffff0d0c0b0a
DATA encodingShuffleTable_0124<>+0xbc0(SB)/8, $0x0b0a090807060504
DATA encodingShuffleTable_0124<>+0xbc8(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0xbd0(SB)/8, $0x0a09080706050400
DATA encodingShuffleTable_0124<>+0xbd8(SB)/8, $0xffffffffff0d0c0b
DATA encodingShuffleTable_0124<>+0xbe0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0xbe8(SB)/8, $0xffffffff0d0c0b0a
DATA encodingShuffleTable_0124<>+0xbf0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xbf8(SB)/8, $0xffff0d0c0b0a0908
DATA encodingShuffleTable_0124<>+0xc00(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xc08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc10(SB)/8, $0xffffff0f0e0d0c00
DATA encodingShuffleTable_0124<>+0xc18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc20(SB)/8, $0xffff0f0e0d0c0100
DATA encodingShuffleTable_0124<>+0xc28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc30(SB)/8, $0x0f0e0d0c03020100
DATA encodingShuffleTable_0124<>+0xc38(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc40(SB)/8, $0xffffff0f0e0d0c04
DATA encodingShuffleTable_0124<>+0xc48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc50(SB)/8, $0xffff0f0e0d0c0400
DATA encodingShuffleTable_0124<>+0xc58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc60(SB)/8, $0xff0f0e0d0c040100
DATA encodingShuffleTable_0124<>+0xc68(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc70(SB)/8, $0x0e0d0c0403020100
DATA encodingShuffleTable_0124<>+0xc78(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xc80(SB)/8, $0xffff0f0e0d0c0504
DATA encodingShuffleTable_0124<>+0xc88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc90(SB)/8, $0xff0f0e0d0c050400
DATA encodingShuffleTable_0124<>+0xc98(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xca0(SB)/8, $0x0f0e0d0c05040100
DATA encodingShuffleTable_0124<>+0xca8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xcb0(SB)/8, $0x0d0c050403020100
DATA encodingShuffleTable_0124<>+0xcb8(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xcc0(SB)/8, $0x0f0e0d0c07060504
DATA encodingShuffleTable_0124<>+0xcc8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xcd0(SB)/8, $0x0e0d0c0706050400
DATA encodingShuffleTable_0124<>+0xcd8(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xce0(SB)/8, $0x0d0c070605040100
DATA encodingShuffleTable_0124<>+0xce8(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xcf0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xcf8(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xd00(SB)/8, $0xffffff0f0e0d0c08
DATA encodingShuffleTable_0124<>+0xd08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd10(SB)/8, $0xffff0f0e0d0c0800
DATA encodingShuffleTable_0124<>+0xd18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd20(SB)/8, $0xff0f0e0d0c080100
DATA encodingShuffleTable_0124<>+0xd28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd30(SB)/8, $0x0e0d0c0803020100
DATA encodingShuffleTable_0124<>+0xd38(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xd40(SB)/8, $0xffff0f0e0d0c0804
DATA encodingShuffleTable_0124<>+0xd48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd50(SB)/8, $0xff0f0e0d0c080400
DATA encodingShuffleTable_0124<>+0xd58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd60(SB)/8, $0x0f0e0d0c08040100
DATA encodingShuffleTable_0124<>+0xd68(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd70(SB)/8, $0x0d0c080403020100
DATA encodingShuffleTable_0124<>+0xd78(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xd80(SB)/8, $0xff0f0e0d0c080504
DATA encodingShuffleTable_0124<>+0xd88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd90(SB)/8, $0x0f0e0d0c08050400
DATA encodingShuffleTable_0124<>+0xd98(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xda0(SB)/8, $0x0e0d0c0805040100
DATA encodingShuffleTable_0124<>+0xda8(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xdb0(SB)/8, $0x0c08050403020100
DATA encodingShuffleTable_0124<>+0xdb8(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xdc0(SB)/8, $0x0e0d0c0807060504
DATA encodingShuffleTable_0124<>+0xdc8(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xdd0(SB)/8, $0x0d0c080706050400
DATA encodingShuffleTable_0124<>+0xdd8(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xde0(SB)/8, $0x0c08070605040100
DATA encodingShuffleTable_0124<>+0xde8(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xdf0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xdf8(SB)/8, $0xffffff0f0e0d0c08
DATA encodingShuffleTable_0124<>+0xe00(SB)/8, $0xffff0f0e0d0c0908
DATA encodingShuffleTable_0124<>+0xe08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe10(SB)/8, $0xff0f0e0d0c090800
DATA encodingShuffleTable_0124<>+0xe18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe20(SB)/8, $0x0f0e0d0c09080100
DATA encodingShuffleTable_0124<>+0xe28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe30(SB)/8, $0x0d0c090803020100
DATA encodingShuffleTable_0124<>+0xe38(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xe40(SB)/8, $0xff0f0e0d0c090804
DATA encodingShuffleTable_0124<>+0xe48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe50(SB)/8, $0x0f0e0d0c09080400
DATA encodingShuffleTable_0124<>+0xe58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe60(SB)/8, $0x0e0d0c0908040100
DATA encodingShuffleTable_0124<>+0xe68(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xe70(SB)/8, $0x0c09080403020100
DATA encodingShuffleTable_0124<>+0xe78(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xe80(SB)/8, $0x0f0e0d0c09080504
DATA encodingShuffleTable_0124<>+0xe88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe90(SB)/8, $0x0e0d0c0908050400
DATA encodingShuffleTable_0124<>+0xe98(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xea0(SB)/8, $0x0d0c090805040100
DATA encodingShuffleTable_0124<>+0xea8(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xeb0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0xeb8(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xec0(SB)/8, $0x0d0c090807060504
DATA encodingShuffleTable_0124<>+0xec8(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xed0(SB)/8, $0x0c09080706050400
DATA encodingShuffleTable_0124<>+0xed8(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xee0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0xee8(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xef0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xef8(SB)/8, $0xffff0f0e0d0c0908
DATA encodingShuffleTable_0124<>+0xf00(SB)/8, $0x0f0e0d0c0b0a0908
DATA encodingShuffleTable_0124<>+0xf08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xf10(SB)/8, $0x0e0d0c0b0a090800
DATA encodingShuffleTable_0124<>+0xf18(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xf20(SB)/8, $0x0d0c0b0a09080100
DATA encodingShuffleTable_0124<>+0xf28(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xf30(SB)/8, $0x0b0a090803020100
DATA encodingShuffleTable_0124<>+0xf38(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xf40(SB)/8, $0x0e0d0c0b0a090804
DATA encodingShuffleTable_0124<>+0xf48(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xf50(SB)/8, $0x0d0c0b0a09080400
DATA encodingShuffleTable_0124<>+0xf58(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xf60(SB)/8, $0x0c0b0a0908040100
DATA encodingShuffleTable_0124<>+0xf68(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xf70(SB)/8, $0x0a09080403020100
DATA encodingShuffleTable_0124<>+0xf78(SB)/8, $0xffffff0f0e0d0c0b
DATA encodingShuffleTable_0124<>+0xf80(SB)/8, $0x0d0c0b0a09080504
DATA encodingShuffleTable_0124<>+0xf88(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xf90(SB)/8, $0x0c0b0a0908050400
DATA encodingShuffleTable_0124<>+0xf98(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xfa0(SB)/8, $0x0b0a090805040100
DATA encodingShuffleTable_0124<>+0xfa8(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xfb0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0xfb8(SB)/8, $0xffff0f0e0d0c0b0a
DATA encodingShuffleTable_0124<>+0xfc0(SB)/8, $0x0b0a090807060504
DATA encodingShuffleTable_0124<>+0xfc8(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xfd0(SB)/8, $0x0a09080706050400
DATA encodingShuffleTable_0124<>+0xfd8(SB)/8, $0xffffff0f0e0d0c0b
DATA encodingShuffleTable_0124<>+0xfe0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0xfe8(SB)/8, $0xffff0f0e0d0c0b0a
DATA encodingShuffleTable_0124<>+0xff0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xff8(SB)/8, $0x0f0e0d0c0b0a0908
GLOBL encodingShuffleTable_0124<>(SB), (RODATA|NOPTR), $4096

DATA shuffleTable_1234<>+0x00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x08(SB)/8, $0xffffff03ffffff02
DATA shuffleTable_1234<>+0x10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x18(SB)/8, $0xffffff04ffffff03
DATA shuffleTable_1234<>+0x20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x28(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_1234<>+0x30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x38(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_1234<>+0x40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x48(SB)/8, $0xffffff04ffffff03
DATA shuffleTable_1234<>+0x50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x58(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_1234<>+0x60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x68(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_1234<>+0x70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x78(SB)/8, $0xffffff07ffffff06
DATA shuffleTable_1234<>+0x80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x88(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_1234<>+0x90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x98(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_1234<>+0xa0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xa8(SB)/8, $0xffffff07ffffff06
DATA shuffleTable_1234<>+0xb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xb8(SB)/8, $0xffffff08ffffff07
DATA shuffleTable_1234<>+0xc0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xc8(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_1234<>+0xd0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xd8(SB)/8, $0xffffff07ffffff06
DATA shuffleTable_1234<>+0xe0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xe8(SB)/8, $0xffffff08ffffff07
DATA shuffleTable_1234<>+0xf0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xf8(SB)/8, $0xffffff09ffffff08
DATA shuffleTable_1234<>+0x100(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x108(SB)/8, $0xffffff04ffff0302
DATA shuffleTable_1234<>+0x110(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x118(SB)/8, $0xffffff05ffff0403
DATA shuffleTable_1234<>+0x120(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x128(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_1234<>+0x130(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x138(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_1234<>+0x140(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x148(SB)/8, $0xffffff05ffff0403
DATA shuffleTable_1234<>+0x150(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x158(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_1234<>+0x160(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x168(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_1234<>+0x170(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x178(SB)/8, $0xffffff08ffff0706
DATA shuffleTable_1234<>+0x180(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x188(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_1234<>+0x190(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x198(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_1234<>+0x1a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x1a8(SB)/8, $0xffffff08ffff0706
DATA shuffleTable_1234<>+0x1b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x1b8(SB)/8, $0xffffff09ffff0807
DATA shuffleTable_1234<>+0x1c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x1c8(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_1234<>+0x1d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x1d8(SB)/8, $0xffffff08ffff0706
DATA shuffleTable_1234<>+0x1e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x1e8(SB)/8, $0xffffff09ffff0807
DATA shuffleTable_1234<>+0x1f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x1f8(SB)/8, $0xffffff0affff0908
DATA shuffleTable_1234<>+0x200(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x208(SB)/8, $0xffffff05ff040302
DATA shuffleTable_1234<>+0x210(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x218(SB)/8, $0xffffff06ff050403
DATA shuffleTable_1234<>+0x220(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x228(SB)/8, $0xffffff07ff060504
DATA shuffleTable_1234<>+0x230(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x238(SB)/8, $0xffffff08ff070605
DATA shuffleTable_1234<>+0x240(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x248(SB)/8, $0xffffff06ff050403
DATA shuffleTable_1234<>+0x250(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x258(SB)/8, $0xffffff07ff060504
DATA shuffleTable_1234<>+0x260(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x268(SB)/8, $0xffffff08ff070605
DATA shuffleTable_1234<>+0x270(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x278(SB)/8, $0xffffff09ff080706
DATA shuffleTable_1234<>+0x280(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x288(SB)/8, $0xffffff07ff060504
DATA shuffleTable_1234<>+0x290(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x298(SB)/8, $0xffffff08ff070605
DATA shuffleTable_1234<>+0x2a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x2a8(SB)/8, $0xffffff09ff080706
DATA shuffleTable_1234<>+0x2b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x2b8(SB)/8, $0xffffff0aff090807
DATA shuffleTable_1234<>+0x2c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x2c8(SB)/8, $0xffffff08ff070605
DATA shuffleTable_1234<>+0x2d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x2d8(SB)/8, $0xffffff09ff080706
DATA shuffleTable_1234<>+0x2e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x2e8(SB)/8, $0xffffff0aff090807
DATA shuffleTable_1234<>+0x2f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x2f8(SB)/8, $0xffffff0bff0a0908
DATA shuffleTable_1234<>+0x300(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x308(SB)/8, $0xffffff0605040302
DATA shuffleTable_1234<>+0x310(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x318(SB)/8, $0xffffff0706050403
DATA shuffleTable_1234<>+0x320(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x328(SB)/8, $0xffffff0807060504
DATA shuffleTable_1234<>+0x330(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x338(SB)/8, $0xffffff0908070605
DATA shuffleTable_1234<>+0x340(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x348(SB)/8, $0xffffff0706050403
DATA shuffleTable_1234<>+0x350(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x358(SB)/8, $0xffffff0807060504
DATA shuffleTable_1234<>+0x360(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x368(SB)/8, $0xffffff0908070605
DATA shuffleTable_1234<>+0x370(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x378(SB)/8, $0xffffff0a09080706
DATA shuffleTable_1234<>+0x380(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x388(SB)/8, $0xffffff0807060504
DATA shuffleTable_1234<>+0x390(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x398(SB)/8, $0xffffff0908070605
DATA shuffleTable_1234<>+0x3a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x3a8(SB)/8, $0xffffff0a09080706
DATA shuffleTable_1234<>+0x3b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x3b8(SB)/8, $0xffffff0b0a090807
DATA shuffleTable_1234<>+0x3c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x3c8(SB)/8, $0xffffff0908070605
DATA shuffleTable_1234<>+0x3d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x3d8(SB)/8, $0xffffff0a09080706
DATA shuffleTable_1234<>+0x3e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x3e8(SB)/8, $0xffffff0b0a090807
DATA shuffleTable_1234<>+0x3f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x3f8(SB)/8, $0xffffff0c0b0a0908
DATA shuffleTable_1234<>+0x400(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x408(SB)/8, $0xffff0403ffffff02
DATA shuffleTable_1234<>+0x410(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x418(SB)/8, $0xffff0504ffffff03
DATA shuffleTable_1234<>+0x420(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x428(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_1234<>+0x430(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x438(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_1234<>+0x440(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x448(SB)/8, $0xffff0504ffffff03
DATA shuffleTable_1234<>+0x450(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x458(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_1234<>+0x460(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x468(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_1234<>+0x470(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x478(SB)/8, $0xffff0807ffffff06
DATA shuffleTable_1234<>+0x480(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x488(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_1234<>+0x490(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x498(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_1234<>+0x4a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x4a8(SB)/8, $0xffff0807ffffff06
DATA shuffleTable_1234<>+0x4b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x4b8(SB)/8, $0xffff0908ffffff07
DATA shuffleTable_1234<>+0x4c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x4c8(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_1234<>+0x4d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x4d8(SB)/8, $0xffff0807ffffff06
DATA shuffleTable_1234<>+0x4e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x4e8(SB)/8, $0xffff0908ffffff07
DATA shuffleTable_1234<>+0x4f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x4f8(SB)/8, $0xffff0a09ffffff08
DATA shuffleTable_1234<>+0x500(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x508(SB)/8, $0xffff0504ffff0302
DATA shuffleTable_1234<>+0x510(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x518(SB)/8, $0xffff0605ffff0403
DATA shuffleTable_1234<>+0x520(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x528(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_1234<>+0x530(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x538(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_1234<>+0x540(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x548(SB)/8, $0xffff0605ffff0403
DATA shuffleTable_1234<>+0x550(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x558(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_1234<>+0x560(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x568(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_1234<>+0x570(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x578(SB)/8, $0xffff0908ffff0706
DATA shuffleTable_1234<>+0x580(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x588(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_1234<>+0x590(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x598(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_1234<>+0x5a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x5a8(SB)/8, $0xffff0908ffff0706
DATA shuffleTable_1234<>+0x5b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x5b8(SB)/8, $0xffff0a09ffff0807
DATA shuffleTable_1234<>+0x5c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x5c8(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_1234<>+0x5d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x5d8(SB)/8, $0xffff0908ffff0706
DATA shuffleTable_1234<>+0x5e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x5e8(SB)/8, $0xffff0a09ffff0807
DATA shuffleTable_1234<>+0x5f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x5f8(SB)/8, $0xffff0b0affff0908
DATA shuffleTable_1234<>+0x600(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x608(SB)/8, $0xffff0605ff040302
DATA shuffleTable_1234<>+0x610(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x618(SB)/8, $0xffff0706ff050403
DATA shuffleTable_1234<>+0x620(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x628(SB)/8, $0xffff0807ff060504
DATA shuffleTable_1234<>+0x630(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x638(SB)/8, $0xffff0908ff070605
DATA shuffleTable_1234<>+0x640(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x648(SB)/8, $0xffff0706ff050403
DATA shuffleTable_1234<>+0x650(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x658(SB)/8, $0xffff0807ff060504
DATA shuffleTable_1234<>+0x660(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x668(SB)/8, $0xffff0908ff070605
DATA shuffleTable_1234<>+0x670(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x678(SB)/8, $0xffff0a09ff080706
DATA shuffleTable_1234<>+0x680(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x688(SB)/8, $0xffff0807ff060504
DATA shuffleTable_1234<>+0x690(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x698(SB)/8, $0xffff0908ff070605
DATA shuffleTable_1234<>+0x6a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x6a8(SB)/8, $0xffff0a09ff080706
DATA shuffleTable_1234<>+0x6b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x6b8(SB)/8, $0xffff0b0aff090807
DATA shuffleTable_1234<>+0x6c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x6c8(SB)/8, $0xffff0908ff070605
DATA shuffleTable_1234<>+0x6d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x6d8(SB)/8, $0xffff0a09ff080706
DATA shuffleTable_1234<>+0x6e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x6e8(SB)/8, $0xffff0b0aff090807
DATA shuffleTable_1234<>+0x6f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x6f8(SB)/8, $0xffff0c0bff0a0908
DATA shuffleTable_1234<>+0x700(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x708(SB)/8, $0xffff070605040302
DATA shuffleTable_1234<>+0x710(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x718(SB)/8, $0xffff080706050403
DATA shuffleTable_1234<>+0x720(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x728(SB)/8, $0xffff090807060504
DATA shuffleTable_1234<>+0x730(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x738(SB)/8, $0xffff0a0908070605
DATA shuffleTable_1234<>+0x740(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x748(SB)/8, $0xffff080706050403
DATA shuffleTable_1234<>+0x750(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x758(SB)/8, $0xffff090807060504
DATA shuffleTable_1234<>+0x760(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x768(SB)/8, $0xffff0a0908070605
DATA shuffleTable_1234<>+0x770(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x778(SB)/8, $0xffff0b0a09080706
DATA shuffleTable_1234<>+0x780(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x788(SB)/8, $0xffff090807060504
DATA shuffleTable_1234<>+0x790(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x798(SB)/8, $0xffff0a0908070605
DATA shuffleTable_1234<>+0x7a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x7a8(SB)/8, $0xffff0b0a09080706
DATA shuffleTable_1234<>+0x7b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x7b8(SB)/8, $0xffff0c0b0a090807
DATA shuffleTable_1234<>+0x7c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x7c8(SB)/8, $0xffff0a0908070605
DATA shuffleTable_1234<>+0x7d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x7d8(SB)/8, $0xffff0b0a09080706
DATA shuffleTable_1234<>+0x7e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x7e8(SB)/8, $0xffff0c0b0a090807
DATA shuffleTable_1234<>+0x7f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x7f8(SB)/8, $0xffff0d0c0b0a0908
DATA shuffleTable_1234<>+0x800(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x808(SB)/8, $0xff050403ffffff02
DATA shuffleTable_1234<>+0x810(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x818(SB)/8, $0xff060504ffffff03
DATA shuffleTable_1234<>+0x820(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x828(SB)/8, $0xff070605ffffff04
DATA shuffleTable_1234<>+0x830(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x838(SB)/8, $0xff080706ffffff05
DATA shuffleTable_1234<>+0x840(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x848(SB)/8, $0xff060504ffffff03
DATA shuffleTable_1234<>+0x850(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x858(SB)/8, $0xff070605ffffff04
DATA shuffleTable_1234<>+0x860(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x868(SB)/8, $0xff080706ffffff05
DATA shuffleTable_1234<>+0x870(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x878(SB)/8, $0xff090807ffffff06
DATA shuffleTable_1234<>+0x880(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x888(SB)/8, $0xff070605ffffff04
DATA shuffleTable_1234<>+0x890(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x898(SB)/8, $0xff080706ffffff05
DATA shuffleTable_1234<>+0x8a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x8a8(SB)/8, $0xff090807ffffff06
DATA shuffleTable_1234<>+0x8b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x8b8(SB)/8, $0xff0a0908ffffff07
DATA shuffleTable_1234<>+0x8c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x8c8(SB)/8, $0xff080706ffffff05
DATA shuffleTable_1234<>+0x8d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x8d8(SB)/8, $0xff090807ffffff06
DATA shuffleTable_1234<>+0x8e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x8e8(SB)/8, $0xff0a0908ffffff07
DATA shuffleTable_1234<>+0x8f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x8f8(SB)/8, $0xff0b0a09ffffff08
DATA shuffleTable_1234<>+0x900(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x908(SB)/8, $0xff060504ffff0302
DATA shuffleTable_1234<>+0x910(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x918(SB)/8, $0xff070605ffff0403
DATA shuffleTable_1234<>+0x920(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x928(SB)/8, $0xff080706ffff0504
DATA shuffleTable_1234<>+0x930(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x938(SB)/8, $0xff090807ffff0605
DATA shuffleTable_1234<>+0x940(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x948(SB)/8, $0xff070605ffff0403
DATA shuffleTable_1234<>+0x950(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x958(SB)/8, $0xff080706ffff0504
DATA shuffleTable_1234<>+0x960(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x968(SB)/8, $0xff090807ffff0605
DATA shuffleTable_1234<>+0x970(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x978(SB)/8, $0xff0a0908ffff0706
DATA shuffleTable_1234<>+0x980(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x988(SB)/8, $0xff080706ffff0504
DATA shuffleTable_1234<>+0x990(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x998(SB)/8, $0xff090807ffff0605
DATA shuffleTable_1234<>+0x9a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x9a8(SB)/8, $0xff0a0908ffff0706
DATA shuffleTable_1234<>+0x9b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x9b8(SB)/8, $0xff0b0a09ffff0807
DATA shuffleTable_1234<>+0x9c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x9c8(SB)/8, $0xff090807ffff0605
DATA shuffleTable_1234<>+0x9d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x9d8(SB)/8, $0xff0a0908ffff0706
DATA shuffleTable_1234<>+0x9e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x9e8(SB)/8, $0xff0b0a09ffff0807
DATA shuffleTable_1234<>+0x9f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x9f8(SB)/8, $0xff0c0b0affff0908
DATA shuffleTable_1234<>+0xa00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xa08(SB)/8, $0xff070605ff040302
DATA shuffleTable_1234<>+0xa10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xa18(SB)/8, $0xff080706ff050403
DATA shuffleTable_1234<>+0xa20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xa28(SB)/8, $0xff090807ff060504
DATA shuffleTable_1234<>+0xa30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xa38(SB)/8, $0xff0a0908ff070605
DATA shuffleTable_1234<>+0xa40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xa48(SB)/8, $0xff080706ff050403
DATA shuffleTable_1234<>+0xa50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xa58(SB)/8, $0xff090807ff060504
DATA shuffleTable_1234<>+0xa60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xa68(SB)/8, $0xff0a0908ff070605
DATA shuffleTable_1234<>+0xa70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xa78(SB)/8, $0xff0b0a09ff080706
DATA shuffleTable_1234<>+0xa80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xa88(SB)/8, $0xff090807ff060504
DATA shuffleTable_1234<>+0xa90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xa98(SB)/8, $0xff0a0908ff070605
DATA shuffleTable_1234<>+0xaa0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xaa8(SB)/8, $0xff0b0a09ff080706
DATA shuffleTable_1234<>+0xab0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xab8(SB)/8, $0xff0c0b0aff090807
DATA shuffleTable_1234<>+0xac0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xac8(SB)/8, $0xff0a0908ff070605
DATA shuffleTable_1234<>+0xad0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xad8(SB)/8, $0xff0b0a09ff080706
DATA shuffleTable_1234<>+0xae0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xae8(SB)/8, $0xff0c0b0aff090807
DATA shuffleTable_1234<>+0xaf0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xaf8(SB)/8, $0xff0d0c0bff0a0908
DATA shuffleTable_1234<>+0xb00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xb08(SB)/8, $0xff08070605040302
DATA shuffleTable_1234<>+0xb10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xb18(SB)/8, $0xff09080706050403
DATA shuffleTable_1234<>+0xb20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xb28(SB)/8, $0xff0a090807060504
DATA shuffleTable_1234<>+0xb30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xb38(SB)/8, $0xff0b0a0908070605
DATA shuffleTable_1234<>+0xb40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xb48(SB)/8, $0xff09080706050403
DATA shuffleTable_1234<>+0xb50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xb58(SB)/8, $0xff0a090807060504
DATA shuffleTable_1234<>+0xb60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xb68(SB)/8, $0xff0b0a0908070605
DATA shuffleTable_1234<>+0xb70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xb78(SB)/8, $0xff0c0b0a09080706
DATA shuffleTable_1234<>+0xb80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xb88(SB)/8, $0xff0a090807060504
DATA shuffleTable_1234<>+0xb90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xb98(SB)/8, $0xff0b0a0908070605
DATA shuffleTable_1234<>+0xba0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xba8(SB)/8, $0xff0c0b0a09080706
DATA shuffleTable_1234<>+0xbb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xbb8(SB)/8, $0xff0d0c0b0a090807
DATA shuffleTable_1234<>+0xbc0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xbc8(SB)/8, $0xff0b0a0908070605
DATA shuffleTable_1234<>+0xbd0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xbd8(SB)/8, $0xff0c0b0a09080706
DATA shuffleTable_1234<>+0xbe0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xbe8(SB)/8, $0xff0d0c0b0a090807
DATA shuffleTable_1234<>+0xbf0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xbf8(SB)/8, $0xff0e0d0c0b0a0908
DATA shuffleTable_1234<>+0xc00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xc08(SB)/8, $0x06050403ffffff02
DATA shuffleTable_1234<>+0xc10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xc18(SB)/8, $0x07060504ffffff03
DATA shuffleTable_1234<>+0xc20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xc28(SB)/8, $0x08070605ffffff04
DATA shuffleTable_1234<>+0xc30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xc38(SB)/8, $0x09080706ffffff05
DATA shuffleTable_1234<>+0xc40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xc48(SB)/8, $0x07060504ffffff03
DATA shuffleTable_1234<>+0xc50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xc58(SB)/8, $0x08070605ffffff04
DATA shuffleTable_1234<>+0xc60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xc68(SB)/8, $0x09080706ffffff05
DATA shuffleTable_1234<>+0xc70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xc78(SB)/8, $0x0a090807ffffff06
DATA shuffleTable_1234<>+0xc80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xc88(SB)/8, $0x08070605ffffff04
DATA shuffleTable_1234<>+0xc90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xc98(SB)/8, $0x09080706ffffff05
DATA shuffleTable_1234<>+0xca0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xca8(SB)/8, $0x0a090807ffffff06
DATA shuffleTable_1234<>+0xcb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xcb8(SB)/8, $0x0b0a0908ffffff07
DATA shuffleTable_1234<>+0xcc0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xcc8(SB)/8, $0x09080706ffffff05
DATA shuffleTable_1234<>+0xcd0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xcd8(SB)/8, $0x0a090807ffffff06
DATA shuffleTable_1234<>+0xce0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xce8(SB)/8, $0x0b0a0908ffffff07
DATA shuffleTable_1234<>+0xcf0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xcf8(SB)/8, $0x0c0b0a09ffffff08
DATA shuffleTable_1234<>+0xd00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xd08(SB)/8, $0x07060504ffff0302
DATA shuffleTable_1234<>+0xd10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xd18(SB)/8, $0x08070605ffff0403
DATA shuffleTable_1234<>+0xd20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xd28(SB)/8, $0x09080706ffff0504
DATA shuffleTable_1234<>+0xd30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xd38(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_1234<>+0xd40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xd48(SB)/8, $0x08070605ffff0403
DATA shuffleTable_1234<>+0xd50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xd58(SB)/8, $0x09080706ffff0504
DATA shuffleTable_1234<>+0xd60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xd68(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_1234<>+0xd70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xd78(SB)/8, $0x0b0a0908ffff0706
DATA shuffleTable_1234<>+0xd80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xd88(SB)/8, $0x09080706ffff0504
DATA shuffleTable_1234<>+0xd90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xd98(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_1234<>+0xda0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xda8(SB)/8, $0x0b0a0908ffff0706
DATA shuffleTable_1234<>+0xdb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xdb8(SB)/8, $0x0c0b0a09ffff0807
DATA shuffleTable_1234<>+0xdc0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xdc8(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_1234<>+0xdd0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xdd8(SB)/8, $0x0b0a0908ffff0706
DATA shuffleTable_1234<>+0xde0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xde8(SB)/8, $0x0c0b0a09ffff0807
DATA shuffleTable_1234<>+0xdf0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xdf8(SB)/8, $0x0d0c0b0affff0908
DATA shuffleTable_1234<>+0xe00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xe08(SB)/8, $0x08070605ff040302
DATA shuffleTable_1234<>+0xe10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xe18(SB)/8, $0x09080706ff050403
DATA shuffleTable_1234<>+0xe20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xe28(SB)/8, $0x0a090807ff060504
DATA shuffleTable_1234<>+0xe30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xe38(SB)/8, $0x0b0a0908ff070605
DATA shuffleTable_1234<>+0xe40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xe48(SB)/8, $0x09080706ff050403
DATA shuffleTable_1234<>+0xe50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xe58(SB)/8, $0x0a090807ff060504
DATA shuffleTable_1234<>+0xe60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xe68(SB)/8, $0x0b0a0908ff070605
DATA shuffleTable_1234<>+0xe70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xe78(SB)/8, $0x0c0b0a09ff080706
DATA shuffleTable_1234<>+0xe80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xe88(SB)/8, $0x0a090807ff060504
DATA shuffleTable_1234<>+0xe90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xe98(SB)/8, $0x0b0a0908ff070605
DATA shuffleTable_1234<>+0xea0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xea8(SB)/8, $0x0c0b0a09ff080706
DATA shuffleTable_1234<>+0xeb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xeb8(SB)/8, $0x0d0c0b0aff090807
DATA shuffleTable_1234<>+0xec0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xec8(SB)/8, $0x0b0a0908ff070605
DATA shuffleTable_1234<>+0xed0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xed8(SB)/8, $0x0c0b0a09ff080706
DATA shuffleTable_1234<>+0xee0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xee8(SB)/8, $0x0d0c0b0aff090807
DATA shuffleTable_1234<>+0xef0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xef8(SB)/8, $0x0e0d0c0bff0a0908
DATA shuffleTable_1234<>+0xf00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xf08(SB)/8, $0x0908070605040302
DATA shuffleTable_1234<>+0xf10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xf18(SB)/8, $0x0a09080706050403
DATA shuffleTable_1234<>+0xf20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xf28(SB)/8, $0x0b0a090807060504
DATA shuffleTable_1234<>+0xf30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xf38(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_1234<>+0xf40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xf48(SB)/8, $0x0a09080706050403
DATA shuffleTable_1234<>+0xf50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xf58(SB)/8, $0x0b0a090807060504
DATA shuffleTable_1234<>+0xf60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xf68(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_1234<>+0xf70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xf78(SB)/8, $0x0d0c0b0a09080706
DATA shuffleTable_1234<>+0xf80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xf88(SB)/8, $0x0b0a090807060504
DATA shuffleTable_1234<>+0xf90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xf98(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_1234<>+0xfa0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xfa8(SB)/8, $0x0d0c0b0a09080706
DATA shuffleTable_1234<>+0xfb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xfb8(SB)/8, $0x0e0d0c0b0a090807
DATA shuffleTable_1234<>+0xfc0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xfc8(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_1234<>+0xfd0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xfd8(SB)/8, $0x0d0c0b0a09080706
DATA shuffleTable_1234<>+0xfe0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xfe8(SB)/8, $0x0e0d0c0b0a090807
DATA shuffleTable_1234<>+0xff0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xff8(SB)/8, $0x0f0e0d0c0b0a0908
GLOBL shuffleTable_1234<>(SB), (RODATA|NOPTR), $4096

DATA shuffleTable_0124<>+0x00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x08(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x18(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x28(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x38(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x48(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x58(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x68(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x78(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x88(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x98(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xa0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xa8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xb8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xc0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xc8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xd0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xd8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xe0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xe8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xf0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xf8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x100(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x108(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x110(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x118(SB)/8, $0xffffffffffffff01
DATA shuffleTable_0124<>+0x120(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x128(SB)/8, $0xffffffffffffff02
DATA shuffleTable_0124<>+0x130(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x138(SB)/8, $0xffffffffffffff04
DATA shuffleTable_0124<>+0x140(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x148(SB)/8, $0xffffffffffffff01
DATA shuffleTable_0124<>+0x150(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x158(SB)/8, $0xffffffffffffff02
DATA shuffleTable_0124<>+0x160(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x168(SB)/8, $0xffffffffffffff03
DATA shuffleTable_0124<>+0x170(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x178(SB)/8, $0xffffffffffffff05
DATA shuffleTable_0124<>+0x180(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x188(SB)/8, $0xffffffffffffff02
DATA shuffleTable_0124<>+0x190(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x198(SB)/8, $0xffffffffffffff03
DATA shuffleTable_0124<>+0x1a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x1a8(SB)/8, $0xffffffffffffff04
DATA shuffleTable_0124<>+0x1b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x1b8(SB)/8, $0xffffffffffffff06
DATA shuffleTable_0124<>+0x1c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x1c8(SB)/8, $0xffffffffffffff04
DATA shuffleTable_0124<>+0x1d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x1d8(SB)/8, $0xffffffffffffff05
DATA shuffleTable_0124<>+0x1e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x1e8(SB)/8, $0xffffffffffffff06
DATA shuffleTable_0124<>+0x1f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x1f8(SB)/8, $0xffffffffffffff08
DATA shuffleTable_0124<>+0x200(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x208(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x210(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x218(SB)/8, $0xffffffffffff0201
DATA shuffleTable_0124<>+0x220(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x228(SB)/8, $0xffffffffffff0302
DATA shuffleTable_0124<>+0x230(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x238(SB)/8, $0xffffffffffff0504
DATA shuffleTable_0124<>+0x240(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x248(SB)/8, $0xffffffffffff0201
DATA shuffleTable_0124<>+0x250(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x258(SB)/8, $0xffffffffffff0302
DATA shuffleTable_0124<>+0x260(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x268(SB)/8, $0xffffffffffff0403
DATA shuffleTable_0124<>+0x270(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x278(SB)/8, $0xffffffffffff0605
DATA shuffleTable_0124<>+0x280(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x288(SB)/8, $0xffffffffffff0302
DATA shuffleTable_0124<>+0x290(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x298(SB)/8, $0xffffffffffff0403
DATA shuffleTable_0124<>+0x2a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x2a8(SB)/8, $0xffffffffffff0504
DATA shuffleTable_0124<>+0x2b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x2b8(SB)/8, $0xffffffffffff0706
DATA shuffleTable_0124<>+0x2c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x2c8(SB)/8, $0xffffffffffff0504
DATA shuffleTable_0124<>+0x2d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x2d8(SB)/8, $0xffffffffffff0605
DATA shuffleTable_0124<>+0x2e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x2e8(SB)/8, $0xffffffffffff0706
DATA shuffleTable_0124<>+0x2f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x2f8(SB)/8, $0xffffffffffff0908
DATA shuffleTable_0124<>+0x300(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x308(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x310(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x318(SB)/8, $0xffffffff04030201
DATA shuffleTable_0124<>+0x320(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x328(SB)/8, $0xffffffff05040302
DATA shuffleTable_0124<>+0x330(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x338(SB)/8, $0xffffffff07060504
DATA shuffleTable_0124<>+0x340(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x348(SB)/8, $0xffffffff04030201
DATA shuffleTable_0124<>+0x350(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x358(SB)/8, $0xffffffff05040302
DATA shuffleTable_0124<>+0x360(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x368(SB)/8, $0xffffffff06050403
DATA shuffleTable_0124<>+0x370(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x378(SB)/8, $0xffffffff08070605
DATA shuffleTable_0124<>+0x380(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x388(SB)/8, $0xffffffff05040302
DATA shuffleTable_0124<>+0x390(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x398(SB)/8, $0xffffffff06050403
DATA shuffleTable_0124<>+0x3a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x3a8(SB)/8, $0xffffffff07060504
DATA shuffleTable_0124<>+0x3b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x3b8(SB)/8, $0xffffffff09080706
DATA shuffleTable_0124<>+0x3c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x3c8(SB)/8, $0xffffffff07060504
DATA shuffleTable_0124<>+0x3d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x3d8(SB)/8, $0xffffffff08070605
DATA shuffleTable_0124<>+0x3e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x3e8(SB)/8, $0xffffffff09080706
DATA shuffleTable_0124<>+0x3f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x3f8(SB)/8, $0xffffffff0b0a0908
DATA shuffleTable_0124<>+0x400(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x408(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x410(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x418(SB)/8, $0xffffff01ffffffff
DATA shuffleTable_0124<>+0x420(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x428(SB)/8, $0xffffff02ffffffff
DATA shuffleTable_0124<>+0x430(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x438(SB)/8, $0xffffff04ffffffff
DATA shuffleTable_0124<>+0x440(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x448(SB)/8, $0xffffff01ffffffff
DATA shuffleTable_0124<>+0x450(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x458(SB)/8, $0xffffff02ffffffff
DATA shuffleTable_0124<>+0x460(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x468(SB)/8, $0xffffff03ffffffff
DATA shuffleTable_0124<>+0x470(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x478(SB)/8, $0xffffff05ffffffff
DATA shuffleTable_0124<>+0x480(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x488(SB)/8, $0xffffff02ffffffff
DATA shuffleTable_0124<>+0x490(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x498(SB)/8, $0xffffff03ffffffff
DATA shuffleTable_0124<>+0x4a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x4a8(SB)/8, $0xffffff04ffffffff
DATA shuffleTable_0124<>+0x4b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x4b8(SB)/8, $0xffffff06ffffffff
DATA shuffleTable_0124<>+0x4c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x4c8(SB)/8, $0xffffff04ffffffff
DATA shuffleTable_0124<>+0x4d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x4d8(SB)/8, $0xffffff05ffffffff
DATA shuffleTable_0124<>+0x4e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x4e8(SB)/8, $0xffffff06ffffffff
DATA shuffleTable_0124<>+0x4f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x4f8(SB)/8, $0xffffff08ffffffff
DATA shuffleTable_0124<>+0x500(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x508(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x510(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x518(SB)/8, $0xffffff02ffffff01
DATA shuffleTable_0124<>+0x520(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x528(SB)/8, $0xffffff03ffffff02
DATA shuffleTable_0124<>+0x530(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x538(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_0124<>+0x540(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x548(SB)/8, $0xffffff02ffffff01
DATA shuffleTable_0124<>+0x550(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x558(SB)/8, $0xffffff03ffffff02
DATA shuffleTable_0124<>+0x560(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x568(SB)/8, $0xffffff04ffffff03
DATA shuffleTable_0124<>+0x570(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x578(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_0124<>+0x580(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x588(SB)/8, $0xffffff03ffffff02
DATA shuffleTable_0124<>+0x590(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x598(SB)/8, $0xffffff04ffffff03
DATA shuffleTable_0124<>+0x5a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x5a8(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_0124<>+0x5b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x5b8(SB)/8, $0xffffff07ffffff06
DATA shuffleTable_0124<>+0x5c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x5c8(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_0124<>+0x5d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x5d8(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_0124<>+0x5e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x5e8(SB)/8, $0xffffff07ffffff06
DATA shuffleTable_0124<>+0x5f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x5f8(SB)/8, $0xffffff09ffffff08
DATA shuffleTable_0124<>+0x600(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x608(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x610(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x618(SB)/8, $0xffffff03ffff0201
DATA shuffleTable_0124<>+0x620(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x628(SB)/8, $0xffffff04ffff0302
DATA shuffleTable_0124<>+0x630(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x638(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_0124<>+0x640(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x648(SB)/8, $0xffffff03ffff0201
DATA shuffleTable_0124<>+0x650(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x658(SB)/8, $0xffffff04ffff0302
DATA shuffleTable_0124<>+0x660(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x668(SB)/8, $0xffffff05ffff0403
DATA shuffleTable_0124<>+0x670(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x678(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_0124<>+0x680(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x688(SB)/8, $0xffffff04ffff0302
DATA shuffleTable_0124<>+0x690(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x698(SB)/8, $0xffffff05ffff0403
DATA shuffleTable_0124<>+0x6a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x6a8(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_0124<>+0x6b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x6b8(SB)/8, $0xffffff08ffff0706
DATA shuffleTable_0124<>+0x6c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x6c8(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_0124<>+0x6d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x6d8(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_0124<>+0x6e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x6e8(SB)/8, $0xffffff08ffff0706
DATA shuffleTable_0124<>+0x6f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x6f8(SB)/8, $0xffffff0affff0908
DATA shuffleTable_0124<>+0x700(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x708(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x710(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x718(SB)/8, $0xffffff0504030201
DATA shuffleTable_0124<>+0x720(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x728(SB)/8, $0xffffff0605040302
DATA shuffleTable_0124<>+0x730(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x738(SB)/8, $0xffffff0807060504
DATA shuffleTable_0124<>+0x740(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x748(SB)/8, $0xffffff0504030201
DATA shuffleTable_0124<>+0x750(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x758(SB)/8, $0xffffff0605040302
DATA shuffleTable_0124<>+0x760(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x768(SB)/8, $0xffffff0706050403
DATA shuffleTable_0124<>+0x770(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x778(SB)/8, $0xffffff0908070605
DATA shuffleTable_0124<>+0x780(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x788(SB)/8, $0xffffff0605040302
DATA shuffleTable_0124<>+0x790(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x798(SB)/8, $0xffffff0706050403
DATA shuffleTable_0124<>+0x7a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x7a8(SB)/8, $0xffffff0807060504
DATA shuffleTable_0124<>+0x7b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x7b8(SB)/8, $0xffffff0a09080706
DATA shuffleTable_0124<>+0x7c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x7c8(SB)/8, $0xffffff0807060504
DATA shuffleTable_0124<>+0x7d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x7d8(SB)/8, $0xffffff0908070605
DATA shuffleTable_0124<>+0x7e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x7e8(SB)/8, $0xffffff0a09080706
DATA shuffleTable_0124<>+0x7f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x7f8(SB)/8, $0xffffff0c0b0a0908
DATA shuffleTable_0124<>+0x800(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x808(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x810(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x818(SB)/8, $0xffff0201ffffffff
DATA shuffleTable_0124<>+0x820(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x828(SB)/8, $0xffff0302ffffffff
DATA shuffleTable_0124<>+0x830(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x838(SB)/8, $0xffff0504ffffffff
DATA shuffleTable_0124<>+0x840(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x848(SB)/8, $0xffff0201ffffffff
DATA shuffleTable_0124<>+0x850(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x858(SB)/8, $0xffff0302ffffffff
DATA shuffleTable_0124<>+0x860(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x868(SB)/8, $0xffff0403ffffffff
DATA shuffleTable_0124<>+0x870(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x878(SB)/8, $0xffff0605ffffffff
DATA shuffleTable_0124<>+0x880(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x888(SB)/8, $0xffff0302ffffffff
DATA shuffleTable_0124<>+0x890(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x898(SB)/8, $0xffff0403ffffffff
DATA shuffleTable_0124<>+0x8a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x8a8(SB)/8, $0xffff0504ffffffff
DATA shuffleTable_0124<>+0x8b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x8b8(SB)/8, $0xffff0706ffffffff
DATA shuffleTable_0124<>+0x8c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x8c8(SB)/8, $0xffff0504ffffffff
DATA shuffleTable_0124<>+0x8d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x8d8(SB)/8, $0xffff0605ffffffff
DATA shuffleTable_0124<>+0x8e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x8e8(SB)/8, $0xffff0706ffffffff
DATA shuffleTable_0124<>+0x8f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x8f8(SB)/8, $0xffff0908ffffffff
DATA shuffleTable_0124<>+0x900(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x908(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x910(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x918(SB)/8, $0xffff0302ffffff01
DATA shuffleTable_0124<>+0x920(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x928(SB)/8, $0xffff0403ffffff02
DATA shuffleTable_0124<>+0x930(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x938(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_0124<>+0x940(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x948(SB)/8, $0xffff0302ffffff01
DATA shuffleTable_0124<>+0x950(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x958(SB)/8, $0xffff0403ffffff02
DATA shuffleTable_0124<>+0x960(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x968(SB)/8, $0xffff0504ffffff03
DATA shuffleTable_0124<>+0x970(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x978(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_0124<>+0x980(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x988(SB)/8, $0xffff0403ffffff02
DATA shuffleTable_0124<>+0x990(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x998(SB)/8, $0xffff0504ffffff03
DATA shuffleTable_0124<>+0x9a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x9a8(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_0124<>+0x9b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x9b8(SB)/8, $0xffff0807ffffff06
DATA shuffleTable_0124<>+0x9c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x9c8(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_0124<>+0x9d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x9d8(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_0124<>+0x9e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x9e8(SB)/8, $0xffff0807ffffff06
DATA shuffleTable_0124<>+0x9f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x9f8(SB)/8, $0xffff0a09ffffff08
DATA shuffleTable_0124<>+0xa00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xa08(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xa10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xa18(SB)/8, $0xffff0403ffff0201
DATA shuffleTable_0124<>+0xa20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xa28(SB)/8, $0xffff0504ffff0302
DATA shuffleTable_0124<>+0xa30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xa38(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_0124<>+0xa40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xa48(SB)/8, $0xffff0403ffff0201
DATA shuffleTable_0124<>+0xa50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xa58(SB)/8, $0xffff0504ffff0302
DATA shuffleTable_0124<>+0xa60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xa68(SB)/8, $0xffff0605ffff0403
DATA shuffleTable_0124<>+0xa70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xa78(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_0124<>+0xa80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xa88(SB)/8, $0xffff0504ffff0302
DATA shuffleTable_0124<>+0xa90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xa98(SB)/8, $0xffff0605ffff0403
DATA shuffleTable_0124<>+0xaa0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xaa8(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_0124<>+0xab0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xab8(SB)/8, $0xffff0908ffff0706
DATA shuffleTable_0124<>+0xac0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xac8(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_0124<>+0xad0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xad8(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_0124<>+0xae0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xae8(SB)/8, $0xffff0908ffff0706
DATA shuffleTable_0124<>+0xaf0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xaf8(SB)/8, $0xffff0b0affff0908
DATA shuffleTable_0124<>+0xb00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xb08(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xb10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xb18(SB)/8, $0xffff060504030201
DATA shuffleTable_0124<>+0xb20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xb28(SB)/8, $0xffff070605040302
DATA shuffleTable_0124<>+0xb30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xb38(SB)/8, $0xffff090807060504
DATA shuffleTable_0124<>+0xb40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xb48(SB)/8, $0xffff060504030201
DATA shuffleTable_0124<>+0xb50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xb58(SB)/8, $0xffff070605040302
DATA shuffleTable_0124<>+0xb60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xb68(SB)/8, $0xffff080706050403
DATA shuffleTable_0124<>+0xb70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xb78(SB)/8, $0xffff0a0908070605
DATA shuffleTable_0124<>+0xb80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xb88(SB)/8, $0xffff070605040302
DATA shuffleTable_0124<>+0xb90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xb98(SB)/8, $0xffff080706050403
DATA shuffleTable_0124<>+0xba0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xba8(SB)/8, $0xffff090807060504
DATA shuffleTable_0124<>+0xbb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xbb8(SB)/8, $0xffff0b0a09080706
DATA shuffleTable_0124<>+0xbc0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xbc8(SB)/8, $0xffff090807060504
DATA shuffleTable_0124<>+0xbd0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xbd8(SB)/8, $0xffff0a0908070605
DATA shuffleTable_0124<>+0xbe0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xbe8(SB)/8, $0xffff0b0a09080706
DATA shuffleTable_0124<>+0xbf0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xbf8(SB)/8, $0xffff0d0c0b0a0908
DATA shuffleTable_0124<>+0xc00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xc08(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xc10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xc18(SB)/8, $0x04030201ffffffff
DATA shuffleTable_0124<>+0xc20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xc28(SB)/8, $0x05040302ffffffff
DATA shuffleTable_0124<>+0xc30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xc38(SB)/8, $0x07060504ffffffff
DATA shuffleTable_0124<>+0xc40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xc48(SB)/8, $0x04030201ffffffff
DATA shuffleTable_0124<>+0xc50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xc58(SB)/8, $0x05040302ffffffff
DATA shuffleTable_0124<>+0xc60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xc68(SB)/8, $0x06050403ffffffff
DATA shuffleTable_0124<>+0xc70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xc78(SB)/8, $0x08070605ffffffff
DATA shuffleTable_0124<>+0xc80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xc88(SB)/8, $0x05040302ffffffff
DATA shuffleTable_0124<>+0xc90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xc98(SB)/8, $0x06050403ffffffff
DATA shuffleTable_0124<>+0xca0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xca8(SB)/8, $0x07060504ffffffff
DATA shuffleTable_0124<>+0xcb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xcb8(SB)/8, $0x09080706ffffffff
DATA shuffleTable_0124<>+0xcc0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xcc8(SB)/8, $0x07060504ffffffff
DATA shuffleTable_0124<>+0xcd0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xcd8(SB)/8, $0x08070605ffffffff
DATA shuffleTable_0124<>+0xce0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xce8(SB)/8, $0x09080706ffffffff
DATA shuffleTable_0124<>+0xcf0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xcf8(SB)/8, $0x0b0a0908ffffffff
DATA shuffleTable_0124<>+0xd00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xd08(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xd10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xd18(SB)/8, $0x05040302ffffff01
DATA shuffleTable_0124<>+0xd20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xd28(SB)/8, $0x06050403ffffff02
DATA shuffleTable_0124<>+0xd30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xd38(SB)/8, $0x08070605ffffff04
DATA shuffleTable_0124<>+0xd40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xd48(SB)/8, $0x05040302ffffff01
DATA shuffleTable_0124<>+0xd50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xd58(SB)/8, $0x06050403ffffff02
DATA shuffleTable_0124<>+0xd60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xd68(SB)/8, $0x07060504ffffff03
DATA shuffleTable_0124<>+0xd70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xd78(SB)/8, $0x09080706ffffff05
DATA shuffleTable_0124<>+0xd80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xd88(SB)/8, $0x06050403ffffff02
DATA shuffleTable_0124<>+0xd90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xd98(SB)/8, $0x07060504ffffff03
DATA shuffleTable_0124<>+0xda0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xda8(SB)/8, $0x08070605ffffff04
DATA shuffleTable_0124<>+0xdb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xdb8(SB)/8, $0x0a090807ffffff06
DATA shuffleTable_0124<>+0xdc0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xdc8(SB)/8, $0x08070605ffffff04
DATA shuffleTable_0124<>+0xdd0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xdd8(SB)/8, $0x09080706ffffff05
DATA shuffleTable_0124<>+0xde0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xde8(SB)/8, $0x0a090807ffffff06
DATA shuffleTable_0124<>+0xdf0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xdf8(SB)/8, $0x0c0b0a09ffffff08
DATA shuffleTable_0124<>+0xe00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xe08(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xe10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xe18(SB)/8, $0x06050403ffff0201
DATA shuffleTable_0124<>+0xe20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xe28(SB)/8, $0x07060504ffff0302
DATA shuffleTable_0124<>+0xe30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xe38(SB)/8, $0x09080706ffff0504
DATA shuffleTable_0124<>+0xe40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xe48(SB)/8, $0x06050403ffff0201
DATA shuffleTable_0124<>+0xe50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xe58(SB)/8, $0x07060504ffff0302
DATA shuffleTable_0124<>+0xe60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xe68(SB)/8, $0x08070605ffff0403
DATA shuffleTable_0124<>+0xe70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xe78(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_0124<>+0xe80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xe88(SB)/8, $0x07060504ffff0302
DATA shuffleTable_0124<>+0xe90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xe98(SB)/8, $0x08070605ffff0403
DATA shuffleTable_0124<>+0xea0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xea8(SB)/8, $0x09080706ffff0504
DATA shuffleTable_0124<>+0xeb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xeb8(SB)/8, $0x0b0a0908ffff0706
DATA shuffleTable_0124<>+0xec0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xec8(SB)/8, $0x09080706ffff0504
DATA shuffleTable_0124<>+0xed0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xed8(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_0124<>+0xee0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xee8(SB)/8, $0x0b0a0908ffff0706
DATA shuffleTable_0124<>+0xef0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xef8(SB)/8, $0x0d0c0b0affff0908
DATA shuffleTable_0124<>+0xf00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xf08(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xf10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xf18(SB)/8, $0x0807060504030201
DATA shuffleTable_0124<>+0xf20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xf28(SB)/8, $0x0908070605040302
DATA shuffleTable_0124<>+0xf30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xf38(SB)/8, $0x0b0a090807060504
DATA shuffleTable_0124<>+0xf40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xf48(SB)/8, $0x0807060504030201
DATA shuffleTable_0124<>+0xf50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xf58(SB)/8, $0x0908070605040302
DATA shuffleTable_0124<>+0xf60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xf68(SB)/8, $0x0a09080706050403
DATA shuffleTable_0124<>+0xf70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xf78(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_0124<>+0xf80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xf88(SB)/8, $0x0908070605040302
DATA shuffleTable_0124<>+0xf90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xf98(SB)/8, $0x0a09080706050403
DATA shuffleTable_0124<>+0xfa0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xfa8(SB)/8, $0x0b0a090807060504
DATA shuffleTable_0124<>+0xfb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xfb8(SB)/8, $0x0d0c0b0a09080706
DATA shuffleTable_0124<>+0xfc0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xfc8(SB)/8, $0x0b0a090807060504
DATA shuffleTable_0124<>+0xfd0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xfd8(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_0124<>+0xfe0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xfe8(SB)/8, $0x0d0c0b0a09080706
DATA shuffleTable_0124<>+0xff0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xff8(SB)/8, $0x0f0e0d0c0b0a0908
GLOBL shuffleTable_0124<>(SB), (RODATA|NOPTR), $4096

TEXT Â·svb_delta_decode_alt(SB), 0, $64-56
	MOVQ    in+0(FP), DI
	MOVQ    in_len+8(FP), SI
	MOVQ    in_cap+16(FP), DX
	MOVQ    count+24(FP), CX
	MOVLQZX prev+32(FP), R8
	MOVQ    out+40(FP), R9
	WORD    $0x8548; BYTE $0xc9 // TESTQ CX, CX                         // test	rcx, rcx
	JLE     LBB7_3              // <--                                  // jle	.LBB7_3
	LEAQ    0x3(CX), AX         // <--                                  // lea	rax, [rcx + 3]
	SHRQ    $0x2, AX            // <--                                  // shr	rax, 2
	CMPQ    AX, SI              // <--                                  // cmp	rax, rsi
	JBE     LBB7_4              // <--                                  // jbe	.LBB7_4

LBB7_3:
	XORL AX, AX         // <--                                  // xor	eax, eax
	MOVQ AX, ret+48(FP) // <--
	RET                 // <--                                  // ret

LBB7_4:
	NOP                                    // (skipped)                            // push	rbp
	NOP                                    // (skipped)                            // mov	rbp, rsp
	MOVQ R15, 24(SP)                       // <--                                  // push	r15
	MOVQ R14, 32(SP)                       // <--                                  // push	r14
	MOVQ R13, 40(SP)                       // <--                                  // push	r13
	MOVQ R12, 48(SP)                       // <--                                  // push	r12
	MOVQ BX, 56(SP)                        // <--                                  // push	rbx
	ANDQ $-0x8, SP                         // <--                                  // and	rsp, -8
	NOP                                    // (skipped)                            // sub	rsp, 24
	WORD $0xc289                           // MOVL AX, DX                          // mov	edx, eax
	ADDQ DI, DX                            // <--                                  // add	rdx, rdi
	CMPQ CX, $0x20                         // <--                                  // cmp	rcx, 32
	JB   LBB7_16                           // <--                                  // jb	.LBB7_16
	QUAD $0x555555555555be48; WORD $0x5555 // MOVQ $0x5555555555555555, SI         // movabs	rsi, 6148914691236517205
	MOVQ CX, 0(SP)                         // <--                                  // mov	qword ptr [rsp], rcx
	MOVQ CX, R10                           // <--                                  // mov	r10, rcx
	SHRQ $0x5, CX                          // <--                                  // shr	rcx, 5
	LONG $0x6e0f4166; BYTE $0xc0           // MOVD R8, X0                          // movd	xmm0, r8d
	LONG $0xc8700f66; BYTE $0x00           // PSHUFD $0x0, X0, X1                  // pshufd	xmm1, xmm0, 0
	MOVQ 0(DI), BX                         // <--                                  // mov	rbx, qword ptr [rdi]
	CMPQ CX, $0x1                          // <--                                  // cmp	rcx, 1
	MOVQ R9, 0x8(SP)                       // <--                                  // mov	qword ptr [rsp + 8], r9
	JNE  LBB7_9                            // <--                                  // jne	.LBB7_9
	MOVQ R9, AX                            // <--                                  // mov	rax, r9
	MOVQ BX, R10                           // <--                                  // mov	r10, rbx

LBB7_7:
	CMPQ R10, SI                   // <--                                  // cmp	r10, rsi
	JNE  LBB7_14                   // <--                                  // jne	.LBB7_14
	LONG $0x02f00ff2               // LDDQU 0(DX), X0                      // lddqu	xmm0, xmmword ptr [rdx]
	LONG $0x30380f66; BYTE $0xc0   // PMOVZXBW X0, X0                      // pmovzxbw	xmm0, xmm0
	LONG $0xd06f0f66               // MOVDQA X0, X2                        // movdqa	xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x02   // PSLLDQ $0x2, X2                      // pslldq	xmm2, 2
	LONG $0xc9700f66; BYTE $0xff   // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xd0fe0f66               // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0xda6f0f66               // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x04   // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xdafe0f66               // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0x33380f66; BYTE $0xd3   // PMOVZXWD X3, X2                      // pmovzxwd	xmm2, xmm3
	LONG $0xd1fe0f66               // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xc0ef0f66               // PXOR X0, X0                          // pxor	xmm0, xmm0
	LONG $0xd8690f66               // PUNPCKHWD X0, X3                     // punpckhwd	xmm3, xmm0
	LONG $0xdafe0f66               // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0x107f0ff3               // MOVDQU X2, 0(AX)                     // movdqu	xmmword ptr [rax], xmm2
	LONG $0x587f0ff3; BYTE $0x10   // MOVDQU X3, 0x10(AX)                  // movdqu	xmmword ptr [rax + 16], xmm3
	LONG $0x4af00ff2; BYTE $0x08   // LDDQU 0x8(DX), X1                    // lddqu	xmm1, xmmword ptr [rdx + 8]
	LONG $0x30380f66; BYTE $0xc9   // PMOVZXBW X1, X1                      // pmovzxbw	xmm1, xmm1
	LONG $0xd16f0f66               // MOVDQA X1, X2                        // movdqa	xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x02   // PSLLDQ $0x2, X2                      // pslldq	xmm2, 2
	LONG $0xdb700f66; BYTE $0xff   // PSHUFD $0xff, X3, X3                 // pshufd	xmm3, xmm3, 255
	LONG $0xd1fe0f66               // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xca6f0f66               // MOVDQA X2, X1                        // movdqa	xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x04   // PSLLDQ $0x4, X1                      // pslldq	xmm1, 4
	LONG $0xcafe0f66               // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0x33380f66; BYTE $0xd1   // PMOVZXWD X1, X2                      // pmovzxwd	xmm2, xmm1
	LONG $0xd3fe0f66               // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0xc8690f66               // PUNPCKHWD X0, X1                     // punpckhwd	xmm1, xmm0
	LONG $0xcafe0f66               // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0x507f0ff3; BYTE $0x20   // MOVDQU X2, 0x20(AX)                  // movdqu	xmmword ptr [rax + 32], xmm2
	LONG $0x487f0ff3; BYTE $0x30   // MOVDQU X1, 0x30(AX)                  // movdqu	xmmword ptr [rax + 48], xmm1
	LONG $0x52f00ff2; BYTE $0x10   // LDDQU 0x10(DX), X2                   // lddqu	xmm2, xmmword ptr [rdx + 16]
	LONG $0x30380f66; BYTE $0xd2   // PMOVZXBW X2, X2                      // pmovzxbw	xmm2, xmm2
	LONG $0xda6f0f66               // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x02   // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xc9700f66; BYTE $0xff   // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66               // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66               // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x04   // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xd3fe0f66               // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x33380f66; BYTE $0xda   // PMOVZXWD X2, X3                      // pmovzxwd	xmm3, xmm2
	LONG $0xd9fe0f66               // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xd0690f66               // PUNPCKHWD X0, X2                     // punpckhwd	xmm2, xmm0
	LONG $0xd3fe0f66               // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x587f0ff3; BYTE $0x40   // MOVDQU X3, 0x40(AX)                  // movdqu	xmmword ptr [rax + 64], xmm3
	LONG $0x507f0ff3; BYTE $0x50   // MOVDQU X2, 0x50(AX)                  // movdqu	xmmword ptr [rax + 80], xmm2
	LONG $0x30380f66; WORD $0x184a // PMOVZXBW 0x18(DX), X1                // pmovzxbw	xmm1, qword ptr [rdx + 24]
	LONG $0xd96f0f66               // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x02   // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xd2700f66; BYTE $0xff   // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66               // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66               // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x04   // PSLLDQ $0x4, X1                      // pslldq	xmm1, 4
	LONG $0xcbfe0f66               // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x33380f66; BYTE $0xd9   // PMOVZXWD X1, X3                      // pmovzxwd	xmm3, xmm1
	LONG $0xdafe0f66               // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xc8690f66               // PUNPCKHWD X0, X1                     // punpckhwd	xmm1, xmm0
	LONG $0xcbfe0f66               // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x587f0ff3; BYTE $0x60   // MOVDQU X3, 0x60(AX)                  // movdqu	xmmword ptr [rax + 96], xmm3
	LONG $0x487f0ff3; BYTE $0x70   // MOVDQU X1, 0x70(AX)                  // movdqu	xmmword ptr [rax + 112], xmm1
	ADDQ $0x20, DX                 // <--                                  // add	rdx, 32
	JMP  LBB7_15                   // <--                                  // jmp	.LBB7_15

LBB7_9:
	LONG $0x0001bb41; WORD $0x0000    // MOVL $0x1, R11                       // mov	r11d, 1
	LONG $0xc0ef0f66                  // PXOR X0, X0                          // pxor	xmm0, xmm0
	MOVQ R9, AX                       // <--                                  // mov	rax, r9
	LEAQ lengthTable_0124<>(SB), R14  // <--                                  // lea	r14, [rip + lengthTable_0124]
	LEAQ shuffleTable_0124<>(SB), R15 // <--                                  // lea	r15, [rip + shuffleTable_0124]
	MOVQ CX, 0x10(SP)                 // <--                                  // mov	qword ptr [rsp + 16], rcx
	JMP  LBB7_12                      // <--                                  // jmp	.LBB7_12

LBB7_10:
	MOVQ SI, CX                                // <--                                  // mov	rcx, rsi
	WORD $0xb60f; BYTE $0xf3                   // MOVZX BL, SI                         // movzx	esi, bl
	LONG $0x0cb60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R9               // movzx	r9d, byte ptr [rsi + r14]
	LONG $0x126f0ff3                           // MOVDQU 0(DX), X2                     // movdqu	xmm2, xmmword ptr [rdx]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x1400; BYTE $0x3e // PSHUFB 0(SI)(R15*1), X2              // pshufb	xmm2, xmmword ptr [rsi + r15]
	LEAQ 0(DX)(R9*1), R13                      // <--                                  // lea	r13, [rdx + r9]
	LONG $0xda6f0f66                           // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66                           // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66                           // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x08               // PSLLDQ $0x8, X2                      // pslldq	xmm2, 8
	LONG $0xd9fe0f66                           // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xdafe0f66                           // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0x187f0ff3                           // MOVDQU X3, 0(AX)                     // movdqu	xmmword ptr [rax], xmm3
	WORD $0xb60f; BYTE $0xf7                   // MOVZX BH, SI                         // movzx	esi, bh
	LONG $0x24b60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R12              // movzx	r12d, byte ptr [rsi + r14]
	LONG $0x6f0f42f3; WORD $0x0a0c             // MOVDQU 0(DX)(R9*1), X1               // movdqu	xmm1, xmmword ptr [rdx + r9]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0c00; BYTE $0x3e // PSHUFB 0(SI)(R15*1), X1              // pshufb	xmm1, xmmword ptr [rsi + r15]
	LEAQ 0(R12)(R13*1), DX                     // <--                                  // lea	rdx, [r12 + r13]
	LONG $0xd16f0f66                           // MOVDQA X1, X2                        // movdqa	xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xdb700f66; BYTE $0xff               // PSHUFD $0xff, X3, X3                 // pshufd	xmm3, xmm3, 255
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xca6f0f66                           // MOVDQA X2, X1                        // movdqa	xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xd3fe0f66                           // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0x507f0ff3; BYTE $0x10               // MOVDQU X2, 0x10(AX)                  // movdqu	xmmword ptr [rax + 16], xmm2
	WORD $0xde89                               // MOVL BX, SI                          // mov	esi, ebx
	WORD $0xeec1; BYTE $0x10                   // SHRL $0x10, SI                       // shr	esi, 16
	LONG $0xceb60f44                           // MOVZX SI, R9                         // movzx	r9d, sil
	LONG $0x34b60f43; BYTE $0x31               // MOVZX 0(R9)(R14*1), SI               // movzx	esi, byte ptr [r9 + r14]
	LONG $0x6f0f43f3; WORD $0x2c0c             // MOVDQU 0(R12)(R13*1), X1             // movdqu	xmm1, xmmword ptr [r12 + r13]
	SHLQ $0x4, R9                              // <--                                  // shl	r9, 4
	LONG $0x380f4366; WORD $0x0c00; BYTE $0x39 // PSHUFB 0(R9)(R15*1), X1              // pshufb	xmm1, xmmword ptr [r9 + r15]
	LONG $0xd96f0f66                           // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xd2700f66; BYTE $0xff               // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66                           // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66                           // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcbfe0f66                           // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0x487f0ff3; BYTE $0x20               // MOVDQU X1, 0x20(AX)                  // movdqu	xmmword ptr [rax + 32], xmm1
	WORD $0x8941; BYTE $0xd9                   // MOVL BX, R9                          // mov	r9d, ebx
	LONG $0x18e9c141                           // SHRL $0x18, R9                       // shr	r9d, 24
	LONG $0x24b60f47; BYTE $0x31               // MOVZX 0(R9)(R14*1), R12              // movzx	r12d, byte ptr [r9 + r14]
	LONG $0x146f0ff3; BYTE $0x16               // MOVDQU 0(SI)(DX*1), X2               // movdqu	xmm2, xmmword ptr [rsi + rdx]
	SHLQ $0x4, R9                              // <--                                  // shl	r9, 4
	LONG $0x380f4366; WORD $0x1400; BYTE $0x39 // PSHUFB 0(R9)(R15*1), X2              // pshufb	xmm2, xmmword ptr [r9 + r15]
	ADDQ DX, SI                                // <--                                  // add	rsi, rdx
	LEAQ 0(SI)(R12*1), DX                      // <--                                  // lea	rdx, [rsi + r12]
	LONG $0xda6f0f66                           // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66                           // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66                           // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x08               // PSLLDQ $0x8, X2                      // pslldq	xmm2, 8
	LONG $0xd3fe0f66                           // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0x507f0ff3; BYTE $0x30               // MOVDQU X2, 0x30(AX)                  // movdqu	xmmword ptr [rax + 48], xmm2
	MOVQ BX, R9                                // <--                                  // mov	r9, rbx
	SHRQ $0x20, R9                             // <--                                  // shr	r9, 32
	LONG $0xc9b60f45                           // MOVZX R9, R9                         // movzx	r9d, r9b
	LONG $0x2cb60f47; BYTE $0x31               // MOVZX 0(R9)(R14*1), R13              // movzx	r13d, byte ptr [r9 + r14]
	LONG $0x6f0f41f3; WORD $0x340c             // MOVDQU 0(R12)(SI*1), X1              // movdqu	xmm1, xmmword ptr [r12 + rsi]
	SHLQ $0x4, R9                              // <--                                  // shl	r9, 4
	LONG $0x380f4366; WORD $0x0c00; BYTE $0x39 // PSHUFB 0(R9)(R15*1), X1              // pshufb	xmm1, xmmword ptr [r9 + r15]
	LONG $0xd96f0f66                           // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xd2700f66; BYTE $0xff               // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66                           // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66                           // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcbfe0f66                           // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0x487f0ff3; BYTE $0x40               // MOVDQU X1, 0x40(AX)                  // movdqu	xmmword ptr [rax + 64], xmm1
	MOVQ BX, SI                                // <--                                  // mov	rsi, rbx
	SHRQ $0x28, SI                             // <--                                  // shr	rsi, 40
	LONG $0xf6b60f40                           // MOVZX SI, SI                         // movzx	esi, sil
	LONG $0x0cb60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R9               // movzx	r9d, byte ptr [rsi + r14]
	LONG $0x6f0f41f3; WORD $0x1554; BYTE $0x00 // MOVDQU 0(R13)(DX*1), X2              // movdqu	xmm2, xmmword ptr [r13 + rdx]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x1400; BYTE $0x3e // PSHUFB 0(SI)(R15*1), X2              // pshufb	xmm2, xmmword ptr [rsi + r15]
	ADDQ R13, DX                               // <--                                  // add	rdx, r13
	LEAQ 0(DX)(R9*1), R13                      // <--                                  // lea	r13, [rdx + r9]
	LONG $0xda6f0f66                           // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66                           // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66                           // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x08               // PSLLDQ $0x8, X2                      // pslldq	xmm2, 8
	LONG $0xd3fe0f66                           // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0x507f0ff3; BYTE $0x50               // MOVDQU X2, 0x50(AX)                  // movdqu	xmmword ptr [rax + 80], xmm2
	MOVQ BX, SI                                // <--                                  // mov	rsi, rbx
	SHRQ $0x30, SI                             // <--                                  // shr	rsi, 48
	LONG $0xe6b60f44                           // MOVZX SI, R12                        // movzx	r12d, sil
	LONG $0x34b60f43; BYTE $0x34               // MOVZX 0(R12)(R14*1), SI              // movzx	esi, byte ptr [r12 + r14]
	LONG $0x6f0f41f3; WORD $0x110c             // MOVDQU 0(R9)(DX*1), X1               // movdqu	xmm1, xmmword ptr [r9 + rdx]
	SHLQ $0x4, R12                             // <--                                  // shl	r12, 4
	LONG $0x380f4366; WORD $0x0c00; BYTE $0x3c // PSHUFB 0(R12)(R15*1), X1             // pshufb	xmm1, xmmword ptr [r12 + r15]
	LONG $0xd96f0f66                           // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xd2700f66; BYTE $0xff               // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66                           // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66                           // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcbfe0f66                           // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0x487f0ff3; BYTE $0x60               // MOVDQU X1, 0x60(AX)                  // movdqu	xmmword ptr [rax + 96], xmm1
	SHRQ $0x38, BX                             // <--                                  // shr	rbx, 56
	LONG $0x14b60f42; BYTE $0x33               // MOVZX 0(BX)(R14*1), DX               // movzx	edx, byte ptr [rbx + r14]
	LONG $0x6f0f42f3; WORD $0x2e14             // MOVDQU 0(SI)(R13*1), X2              // movdqu	xmm2, xmmword ptr [rsi + r13]
	SHLQ $0x4, BX                              // <--                                  // shl	rbx, 4
	LONG $0x380f4266; WORD $0x1400; BYTE $0x3b // PSHUFB 0(BX)(R15*1), X2              // pshufb	xmm2, xmmword ptr [rbx + r15]
	ADDQ SI, DX                                // <--                                  // add	rdx, rsi
	MOVQ CX, SI                                // <--                                  // mov	rsi, rcx
	MOVQ 0x10(SP), CX                          // <--                                  // mov	rcx, qword ptr [rsp + 16]
	ADDQ R13, DX                               // <--                                  // add	rdx, r13
	LONG $0xda6f0f66                           // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x04               // PSLLDQ $0x4, X3                      // pslldq	xmm3, 4
	LONG $0xe1700f66; BYTE $0xff               // PSHUFD $0xff, X1, X4                 // pshufd	xmm4, xmm1, 255
	LONG $0xdafe0f66                           // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xcb6f0f66                           // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcbfe0f66                           // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0xccfe0f66                           // PADDD X4, X1                         // paddd	xmm1, xmm4

LBB7_11:
	LONG $0x487f0ff3; BYTE $0x70 // MOVDQU X1, 0x70(AX)                  // movdqu	xmmword ptr [rax + 112], xmm1
	SUBQ $-0x80, AX              // <--                                  // sub	rax, -128
	INCQ R11                     // <--                                  // inc	r11
	MOVQ R10, BX                 // <--                                  // mov	rbx, r10
	CMPQ CX, R11                 // <--                                  // cmp	rcx, r11
	JE   LBB7_7                  // <--                                  // je	.LBB7_7

LBB7_12:
	MOVQ 0(DI)(R11*8), R10       // <--                                  // mov	r10, qword ptr [rdi + 8*r11]
	CMPQ BX, SI                  // <--                                  // cmp	rbx, rsi
	JNE  LBB7_10                 // <--                                  // jne	.LBB7_10
	LONG $0x12f00ff2             // LDDQU 0(DX), X2                      // lddqu	xmm2, xmmword ptr [rdx]
	LONG $0x30380f66; BYTE $0xd2 // PMOVZXBW X2, X2                      // pmovzxbw	xmm2, xmm2
	LONG $0xda6f0f66             // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x02 // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xc9700f66; BYTE $0xff // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66             // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66             // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x04 // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xd3fe0f66             // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x33380f66; BYTE $0xda // PMOVZXWD X2, X3                      // pmovzxwd	xmm3, xmm2
	LONG $0xd9fe0f66             // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xd0690f66             // PUNPCKHWD X0, X2                     // punpckhwd	xmm2, xmm0
	LONG $0xd3fe0f66             // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x187f0ff3             // MOVDQU X3, 0(AX)                     // movdqu	xmmword ptr [rax], xmm3
	LONG $0x507f0ff3; BYTE $0x10 // MOVDQU X2, 0x10(AX)                  // movdqu	xmmword ptr [rax + 16], xmm2
	LONG $0x4af00ff2; BYTE $0x08 // LDDQU 0x8(DX), X1                    // lddqu	xmm1, xmmword ptr [rdx + 8]
	LONG $0x30380f66; BYTE $0xc9 // PMOVZXBW X1, X1                      // pmovzxbw	xmm1, xmm1
	LONG $0xd96f0f66             // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x02 // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xd2700f66; BYTE $0xff // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66             // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66             // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x04 // PSLLDQ $0x4, X1                      // pslldq	xmm1, 4
	LONG $0xcbfe0f66             // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x33380f66; BYTE $0xd9 // PMOVZXWD X1, X3                      // pmovzxwd	xmm3, xmm1
	LONG $0xdafe0f66             // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xc8690f66             // PUNPCKHWD X0, X1                     // punpckhwd	xmm1, xmm0
	LONG $0xcbfe0f66             // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x587f0ff3; BYTE $0x20 // MOVDQU X3, 0x20(AX)                  // movdqu	xmmword ptr [rax + 32], xmm3
	LONG $0x487f0ff3; BYTE $0x30 // MOVDQU X1, 0x30(AX)                  // movdqu	xmmword ptr [rax + 48], xmm1
	LONG $0x52f00ff2; BYTE $0x10 // LDDQU 0x10(DX), X2                   // lddqu	xmm2, xmmword ptr [rdx + 16]
	LONG $0x30380f66; BYTE $0xd2 // PMOVZXBW X2, X2                      // pmovzxbw	xmm2, xmm2
	LONG $0xda6f0f66             // MOVDQA X2, X3                        // movdqa	xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x02 // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xc9700f66; BYTE $0xff // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xdafe0f66             // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xd36f0f66             // MOVDQA X3, X2                        // movdqa	xmm2, xmm3
	LONG $0xfa730f66; BYTE $0x04 // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xd3fe0f66             // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x33380f66; BYTE $0xda // PMOVZXWD X2, X3                      // pmovzxwd	xmm3, xmm2
	LONG $0xd9fe0f66             // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xd0690f66             // PUNPCKHWD X0, X2                     // punpckhwd	xmm2, xmm0
	LONG $0xd3fe0f66             // PADDD X3, X2                         // paddd	xmm2, xmm3
	LONG $0x587f0ff3; BYTE $0x40 // MOVDQU X3, 0x40(AX)                  // movdqu	xmmword ptr [rax + 64], xmm3
	LONG $0x507f0ff3; BYTE $0x50 // MOVDQU X2, 0x50(AX)                  // movdqu	xmmword ptr [rax + 80], xmm2
	LONG $0x4af00ff2; BYTE $0x18 // LDDQU 0x18(DX), X1                   // lddqu	xmm1, xmmword ptr [rdx + 24]
	LONG $0x30380f66; BYTE $0xc9 // PMOVZXBW X1, X1                      // pmovzxbw	xmm1, xmm1
	LONG $0xd96f0f66             // MOVDQA X1, X3                        // movdqa	xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x02 // PSLLDQ $0x2, X3                      // pslldq	xmm3, 2
	LONG $0xd2700f66; BYTE $0xff // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xd9fe0f66             // PADDD X1, X3                         // paddd	xmm3, xmm1
	LONG $0xcb6f0f66             // MOVDQA X3, X1                        // movdqa	xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x04 // PSLLDQ $0x4, X1                      // pslldq	xmm1, 4
	LONG $0xcbfe0f66             // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x33380f66; BYTE $0xd9 // PMOVZXWD X1, X3                      // pmovzxwd	xmm3, xmm1
	LONG $0xdafe0f66             // PADDD X2, X3                         // paddd	xmm3, xmm2
	LONG $0xc8690f66             // PUNPCKHWD X0, X1                     // punpckhwd	xmm1, xmm0
	LONG $0xcbfe0f66             // PADDD X3, X1                         // paddd	xmm1, xmm3
	LONG $0x587f0ff3; BYTE $0x60 // MOVDQU X3, 0x60(AX)                  // movdqu	xmmword ptr [rax + 96], xmm3
	ADDQ $0x20, DX               // <--                                  // add	rdx, 32
	JMP  LBB7_11                 // <--                                  // jmp	.LBB7_11

LBB7_14:
	MOVQ R10, CX                               // <--                                  // mov	rcx, r10
	LONG $0xc9b60f44                           // MOVZX CL, R9                         // movzx	r9d, cl
	LEAQ lengthTable_0124<>(SB), R14           // <--                                  // lea	r14, [rip + lengthTable_0124]
	LONG $0x1cb60f43; BYTE $0x31               // MOVZX 0(R9)(R14*1), BX               // movzx	ebx, byte ptr [r9 + r14]
	LONG $0x026f0ff3                           // MOVDQU 0(DX), X0                     // movdqu	xmm0, xmmword ptr [rdx]
	SHLQ $0x4, R9                              // <--                                  // shl	r9, 4
	LEAQ shuffleTable_0124<>(SB), R10          // <--                                  // lea	r10, [rip + shuffleTable_0124]
	LONG $0x380f4366; WORD $0x0400; BYTE $0x11 // PSHUFB 0(R9)(R10*1), X0              // pshufb	xmm0, xmmword ptr [r9 + r10]
	LEAQ 0(DX)(BX*1), R11                      // <--                                  // lea	r11, [rdx + rbx]
	LONG $0xd06f0f66                           // MOVDQA X0, X2                        // movdqa	xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xd0fe0f66                           // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0xc26f0f66                           // MOVDQA X2, X0                        // movdqa	xmm0, xmm2
	LONG $0xf8730f66; BYTE $0x08               // PSLLDQ $0x8, X0                      // pslldq	xmm0, 8
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xd0fe0f66                           // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0x107f0ff3                           // MOVDQU X2, 0(AX)                     // movdqu	xmmword ptr [rax], xmm2
	WORD $0xb60f; BYTE $0xf5                   // MOVZX CH, SI                         // movzx	esi, ch
	LONG $0x0cb60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R9               // movzx	r9d, byte ptr [rsi + r14]
	LONG $0x046f0ff3; BYTE $0x1a               // MOVDQU 0(DX)(BX*1), X0               // movdqu	xmm0, xmmword ptr [rdx + rbx]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x16 // PSHUFB 0(SI)(R10*1), X0              // pshufb	xmm0, xmmword ptr [rsi + r10]
	LEAQ 0(R11)(R9*1), BX                      // <--                                  // lea	rbx, [r11 + r9]
	LONG $0xc86f0f66                           // MOVDQA X0, X1                        // movdqa	xmm1, xmm0
	LONG $0xf9730f66; BYTE $0x04               // PSLLDQ $0x4, X1                      // pslldq	xmm1, 4
	LONG $0xd2700f66; BYTE $0xff               // PSHUFD $0xff, X2, X2                 // pshufd	xmm2, xmm2, 255
	LONG $0xc8fe0f66                           // PADDD X0, X1                         // paddd	xmm1, xmm0
	LONG $0xc16f0f66                           // MOVDQA X1, X0                        // movdqa	xmm0, xmm1
	LONG $0xf8730f66; BYTE $0x08               // PSLLDQ $0x8, X0                      // pslldq	xmm0, 8
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0xc8fe0f66                           // PADDD X0, X1                         // paddd	xmm1, xmm0
	LONG $0x487f0ff3; BYTE $0x10               // MOVDQU X1, 0x10(AX)                  // movdqu	xmmword ptr [rax + 16], xmm1
	WORD $0xca89                               // MOVL CX, DX                          // mov	edx, ecx
	WORD $0xeac1; BYTE $0x10                   // SHRL $0x10, DX                       // shr	edx, 16
	WORD $0xb60f; BYTE $0xd2                   // MOVZX DL, DX                         // movzx	edx, dl
	LONG $0x34b60f42; BYTE $0x32               // MOVZX 0(DX)(R14*1), SI               // movzx	esi, byte ptr [rdx + r14]
	LONG $0x6f0f43f3; WORD $0x1904             // MOVDQU 0(R9)(R11*1), X0              // movdqu	xmm0, xmmword ptr [r9 + r11]
	SHLQ $0x4, DX                              // <--                                  // shl	rdx, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x12 // PSHUFB 0(DX)(R10*1), X0              // pshufb	xmm0, xmmword ptr [rdx + r10]
	LEAQ 0(BX)(SI*1), DX                       // <--                                  // lea	rdx, [rbx + rsi]
	LONG $0xd06f0f66                           // MOVDQA X0, X2                        // movdqa	xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xd0fe0f66                           // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0xc26f0f66                           // MOVDQA X2, X0                        // movdqa	xmm0, xmm2
	LONG $0xf8730f66; BYTE $0x08               // PSLLDQ $0x8, X0                      // pslldq	xmm0, 8
	LONG $0xc2fe0f66                           // PADDD X2, X0                         // paddd	xmm0, xmm2
	LONG $0xc1fe0f66                           // PADDD X1, X0                         // paddd	xmm0, xmm1
	LONG $0x407f0ff3; BYTE $0x20               // MOVDQU X0, 0x20(AX)                  // movdqu	xmmword ptr [rax + 32], xmm0
	WORD $0x8941; BYTE $0xc9                   // MOVL CX, R9                          // mov	r9d, ecx
	LONG $0x18e9c141                           // SHRL $0x18, R9                       // shr	r9d, 24
	LONG $0x1cb60f47; BYTE $0x31               // MOVZX 0(R9)(R14*1), R11              // movzx	r11d, byte ptr [r9 + r14]
	LONG $0x0c6f0ff3; BYTE $0x1e               // MOVDQU 0(SI)(BX*1), X1               // movdqu	xmm1, xmmword ptr [rsi + rbx]
	SHLQ $0x4, R9                              // <--                                  // shl	r9, 4
	LONG $0x380f4366; WORD $0x0c00; BYTE $0x11 // PSHUFB 0(R9)(R10*1), X1              // pshufb	xmm1, xmmword ptr [r9 + r10]
	LONG $0xd16f0f66                           // MOVDQA X1, X2                        // movdqa	xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc0700f66; BYTE $0xff               // PSHUFD $0xff, X0, X0                 // pshufd	xmm0, xmm0, 255
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xca6f0f66                           // MOVDQA X2, X1                        // movdqa	xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0xc8fe0f66                           // PADDD X0, X1                         // paddd	xmm1, xmm0
	LONG $0x487f0ff3; BYTE $0x30               // MOVDQU X1, 0x30(AX)                  // movdqu	xmmword ptr [rax + 48], xmm1
	MOVQ CX, SI                                // <--                                  // mov	rsi, rcx
	SHRQ $0x20, SI                             // <--                                  // shr	rsi, 32
	LONG $0xf6b60f40                           // MOVZX SI, SI                         // movzx	esi, sil
	LONG $0x0cb60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R9               // movzx	r9d, byte ptr [rsi + r14]
	LONG $0x6f0f41f3; WORD $0x1304             // MOVDQU 0(R11)(DX*1), X0              // movdqu	xmm0, xmmword ptr [r11 + rdx]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x16 // PSHUFB 0(SI)(R10*1), X0              // pshufb	xmm0, xmmword ptr [rsi + r10]
	LEAQ 0(DX)(R11*1), SI                      // <--                                  // lea	rsi, [rdx + r11]
	LEAQ 0(SI)(R9*1), DX                       // <--                                  // lea	rdx, [rsi + r9]
	LONG $0xd06f0f66                           // MOVDQA X0, X2                        // movdqa	xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xd0fe0f66                           // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0xc26f0f66                           // MOVDQA X2, X0                        // movdqa	xmm0, xmm2
	LONG $0xf8730f66; BYTE $0x08               // PSLLDQ $0x8, X0                      // pslldq	xmm0, 8
	LONG $0xc2fe0f66                           // PADDD X2, X0                         // paddd	xmm0, xmm2
	LONG $0xc1fe0f66                           // PADDD X1, X0                         // paddd	xmm0, xmm1
	LONG $0x407f0ff3; BYTE $0x40               // MOVDQU X0, 0x40(AX)                  // movdqu	xmmword ptr [rax + 64], xmm0
	MOVQ CX, R11                               // <--                                  // mov	r11, rcx
	SHRQ $0x28, R11                            // <--                                  // shr	r11, 40
	LONG $0xdbb60f41                           // MOVZX R11, BX                        // movzx	ebx, r11b
	LONG $0x1cb60f46; BYTE $0x33               // MOVZX 0(BX)(R14*1), R11              // movzx	r11d, byte ptr [rbx + r14]
	LONG $0x6f0f41f3; WORD $0x310c             // MOVDQU 0(R9)(SI*1), X1               // movdqu	xmm1, xmmword ptr [r9 + rsi]
	SHLQ $0x4, BX                              // <--                                  // shl	rbx, 4
	LONG $0x380f4266; WORD $0x0c00; BYTE $0x13 // PSHUFB 0(BX)(R10*1), X1              // pshufb	xmm1, xmmword ptr [rbx + r10]
	LONG $0xd16f0f66                           // MOVDQA X1, X2                        // movdqa	xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc0700f66; BYTE $0xff               // PSHUFD $0xff, X0, X0                 // pshufd	xmm0, xmm0, 255
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xca6f0f66                           // MOVDQA X2, X1                        // movdqa	xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0xc8fe0f66                           // PADDD X0, X1                         // paddd	xmm1, xmm0
	LONG $0x487f0ff3; BYTE $0x50               // MOVDQU X1, 0x50(AX)                  // movdqu	xmmword ptr [rax + 80], xmm1
	MOVQ CX, SI                                // <--                                  // mov	rsi, rcx
	SHRQ $0x30, SI                             // <--                                  // shr	rsi, 48
	LONG $0xf6b60f40                           // MOVZX SI, SI                         // movzx	esi, sil
	LONG $0x0cb60f46; BYTE $0x36               // MOVZX 0(SI)(R14*1), R9               // movzx	r9d, byte ptr [rsi + r14]
	LONG $0x6f0f41f3; WORD $0x1304             // MOVDQU 0(R11)(DX*1), X0              // movdqu	xmm0, xmmword ptr [r11 + rdx]
	SHLQ $0x4, SI                              // <--                                  // shl	rsi, 4
	LONG $0x380f4266; WORD $0x0400; BYTE $0x16 // PSHUFB 0(SI)(R10*1), X0              // pshufb	xmm0, xmmword ptr [rsi + r10]
	LEAQ 0(DX)(R11*1), SI                      // <--                                  // lea	rsi, [rdx + r11]
	LONG $0xd06f0f66                           // MOVDQA X0, X2                        // movdqa	xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc9700f66; BYTE $0xff               // PSHUFD $0xff, X1, X1                 // pshufd	xmm1, xmm1, 255
	LONG $0xd0fe0f66                           // PADDD X0, X2                         // paddd	xmm2, xmm0
	LONG $0xc26f0f66                           // MOVDQA X2, X0                        // movdqa	xmm0, xmm2
	LONG $0xf8730f66; BYTE $0x08               // PSLLDQ $0x8, X0                      // pslldq	xmm0, 8
	LONG $0xc2fe0f66                           // PADDD X2, X0                         // paddd	xmm0, xmm2
	LONG $0xc1fe0f66                           // PADDD X1, X0                         // paddd	xmm0, xmm1
	LONG $0x407f0ff3; BYTE $0x60               // MOVDQU X0, 0x60(AX)                  // movdqu	xmmword ptr [rax + 96], xmm0
	SHRQ $0x38, CX                             // <--                                  // shr	rcx, 56
	LONG $0x14b60f42; BYTE $0x31               // MOVZX 0(CX)(R14*1), DX               // movzx	edx, byte ptr [rcx + r14]
	LONG $0x6f0f41f3; WORD $0x310c             // MOVDQU 0(R9)(SI*1), X1               // movdqu	xmm1, xmmword ptr [r9 + rsi]
	SHLQ $0x4, CX                              // <--                                  // shl	rcx, 4
	LONG $0x380f4266; WORD $0x0c00; BYTE $0x11 // PSHUFB 0(CX)(R10*1), X1              // pshufb	xmm1, xmmword ptr [rcx + r10]
	ADDQ R9, DX                                // <--                                  // add	rdx, r9
	ADDQ SI, DX                                // <--                                  // add	rdx, rsi
	LONG $0xd16f0f66                           // MOVDQA X1, X2                        // movdqa	xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x04               // PSLLDQ $0x4, X2                      // pslldq	xmm2, 4
	LONG $0xc0700f66; BYTE $0xff               // PSHUFD $0xff, X0, X0                 // pshufd	xmm0, xmm0, 255
	LONG $0xd1fe0f66                           // PADDD X1, X2                         // paddd	xmm2, xmm1
	LONG $0xca6f0f66                           // MOVDQA X2, X1                        // movdqa	xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x08               // PSLLDQ $0x8, X1                      // pslldq	xmm1, 8
	LONG $0xcafe0f66                           // PADDD X2, X1                         // paddd	xmm1, xmm2
	LONG $0xc8fe0f66                           // PADDD X0, X1                         // paddd	xmm1, xmm0
	LONG $0x487f0ff3; BYTE $0x70               // MOVDQU X1, 0x70(AX)                  // movdqu	xmmword ptr [rax + 112], xmm1

LBB7_15:
	MOVQ 0x8(SP), R9 // <--                                  // mov	r9, qword ptr [rsp + 8]
	MOVQ 0(SP), CX   // <--                                  // mov	rcx, qword ptr [rsp]

LBB7_16:
	WORD $0x8941; BYTE $0xca // MOVL CX, R10                         // mov	r10d, ecx
	LONG $0xe0e28341         // ANDL $-0x20, R10                     // and	r10d, -32
	LEAQ 0(R9)(R10*4), AX    // <--                                  // lea	rax, [r9 + 4*r10]
	MOVQ CX, SI              // <--                                  // mov	rsi, rcx
	ANDQ $0x1f, SI           // <--                                  // and	rsi, 31
	JE   LBB7_19             // <--                                  // je	.LBB7_19
	WORD $0x854d; BYTE $0xd2 // TESTQ R10, R10                       // test	r10, r10
	JE   LBB7_19             // <--                                  // je	.LBB7_19
	LONG $0xfc408b44         // MOVL -0x4(AX), R8                    // mov	r8d, dword ptr [rax - 4]

LBB7_19:
	WORD $0x8548; BYTE $0xf6 // TESTQ SI, SI                         // test	rsi, rsi
	JE   LBB7_31             // <--                                  // je	.LBB7_31
	WORD $0x8548; BYTE $0xd2 // TESTQ DX, DX                         // test	rdx, rdx
	JE   LBB7_31             // <--                                  // je	.LBB7_31
	SHRQ $0x2, CX            // <--                                  // shr	rcx, 2
	WORD $0xe183; BYTE $0xf8 // ANDL $-0x8, CX                       // and	ecx, -8
	ADDQ CX, DI              // <--                                  // add	rdi, rcx
	LONG $0x17b60f44         // MOVZX 0(DI), R10                     // movzx	r10d, byte ptr [rdi]
	INCQ DI                  // <--                                  // inc	rdi
	XORL CX, CX              // <--                                  // xor	ecx, ecx
	JMP  LBB7_24             // <--                                  // jmp	.LBB7_24

LBB7_22:
	LONG $0x1ab70f44 // MOVZX 0(DX), R11                     // movzx	r11d, word ptr [rdx]
	ADDQ $0x2, DX    // <--                                  // add	rdx, 2

LBB7_23:
	WORD $0x0145; BYTE $0xd8 // ADDL R11, R8                         // add	r8d, r11d
	WORD $0x8944; BYTE $0x00 // MOVL R8, 0(AX)                       // mov	dword ptr [rax], r8d
	ADDQ $0x4, AX            // <--                                  // add	rax, 4
	WORD $0xc180; BYTE $0x02 // ADDL $0x2, CL                        // add	cl, 2
	WORD $0xceff             // DECL SI                              // dec	esi
	JE   LBB7_31             // <--                                  // je	.LBB7_31

LBB7_24:
	WORD $0xf980; BYTE $0x08 // CMPL CL, $0x8                        // cmp	cl, 8
	JNE  LBB7_26             // <--                                  // jne	.LBB7_26
	LONG $0x17b60f44         // MOVZX 0(DI), R10                     // movzx	r10d, byte ptr [rdi]
	INCQ DI                  // <--                                  // inc	rdi
	XORL CX, CX              // <--                                  // xor	ecx, ecx

LBB7_26:
	WORD $0x8944; BYTE $0xd3 // MOVL R10, BX                         // mov	ebx, r10d
	WORD $0xebd3             // SHRL CL, BX                          // shr	ebx, cl
	WORD $0x8941; BYTE $0xdb // MOVL BX, R11                         // mov	r11d, ebx
	LONG $0x03e38341         // ANDL $0x3, R11                       // and	r11d, 3
	WORD $0xc3f6; BYTE $0x03 // TESTL $0x3, BL                       // test	bl, 3
	JE   LBB7_23             // <--                                  // je	.LBB7_23
	CMPL R11, $0x2           // <--                                  // cmp	r11d, 2
	JE   LBB7_22             // <--                                  // je	.LBB7_22
	CMPL R11, $0x1           // <--                                  // cmp	r11d, 1
	JNE  LBB7_30             // <--                                  // jne	.LBB7_30
	LONG $0x1ab60f44         // MOVZX 0(DX), R11                     // movzx	r11d, byte ptr [rdx]
	INCQ DX                  // <--                                  // inc	rdx
	JMP  LBB7_23             // <--                                  // jmp	.LBB7_23

LBB7_30:
	WORD $0x8b44; BYTE $0x1a // MOVL 0(DX), R11                      // mov	r11d, dword ptr [rdx]
	ADDQ $0x4, DX            // <--                                  // add	rdx, 4
	JMP  LBB7_23             // <--                                  // jmp	.LBB7_23

LBB7_31:
	SUBQ R9, AX              // <--                                  // sub	rax, r9
	SARQ $0x2, AX            // <--                                  // sar	rax, 2
	WORD $0x8548; BYTE $0xd2 // TESTQ DX, DX                         // test	rdx, rdx
	LONG $0xc2440f48         // CMOVE DX, AX                         // cmove	rax, rdx
	NOP                      // (skipped)                            // lea	rsp, [rbp - 40]
	MOVQ 56(SP), BX          // <--                                  // pop	rbx
	MOVQ 48(SP), R12         // <--                                  // pop	r12
	MOVQ 40(SP), R13         // <--                                  // pop	r13
	MOVQ 32(SP), R14         // <--                                  // pop	r14
	MOVQ 24(SP), R15         // <--                                  // pop	r15
	NOP                      // (skipped)                            // pop	rbp
	MOVQ AX, ret+48(FP)      // <--
	RET                      // <--                                  // ret
