//go:build !noasm && arm64
// Code generated by gocc rev-4e20446 -- DO NOT EDIT.
//
// Source file         : svb_neon.c
// Clang version       : Apple clang version 16.0.0 (clang-1600.0.26.6)
// Target architecture : arm64
// Compiler options    : [none]

#include "textflag.h"

DATA LCPI0_0<>+0x00(SB)/8, $0x0004080c0004080c
GLOBL LCPI0_0<>(SB), (RODATA|NOPTR), $8

DATA LCPI0_1<>+0x00(SB)/4, $0x40100401
DATA LCPI0_1<>+0x04(SB)/4, $0x01010101
GLOBL LCPI0_1<>(SB), (RODATA|NOPTR), $8

TEXT Â·svb_encode(SB), NOSPLIT, $0-40
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVD out+24(FP), R3
	NOP                    // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADDW $3, R1, R8        // <--                                  // add	w8, w1, #3
	CMPW $4, R1            // <--                                  // cmp	w1, #4
	LSRW $2, R8, R8        // <--                                  // lsr	w8, w8, #2
	NOP                    // (skipped)                            // mov	x29, sp
	ADD  R8, R3, R8        // <--                                  // add	x8, x3, x8
	BCS  LBB0_2            // <--                                  // b.hs	.LBB0_2
	MOVD R3, R9            // <--                                  // mov	x9, x3
	JMP  LBB0_4            // <--                                  // b	.LBB0_4

LBB0_2:
	MOVD $LCPI0_0<>(SB), R9   // <--                                  // adrp	x9, .LCPI0_0
	MOVD $LCPI0_1<>(SB), R11  // <--                                  // adrp	x11, .LCPI0_1
	WORD $0x4f000460          // VMOVI $3, V0.S4                      // movi	v0.4s, #3
	LSRW $2, R1, R10          // <--                                  // lsr	w10, w1, #2
	WORD $0xfd400121          // FMOVD (R9), F1                       // ldr	d1, [x9, :lo12:.LCPI0_0]
	MOVD R3, R9               // <--                                  // mov	x9, x3
	WORD $0xfd400162          // FMOVD (R11), F2                      // ldr	d2, [x11, :lo12:.LCPI0_1]
	MOVD $shuf_lut<>(SB), R11 // <--                                  // adrp	x11, shuf_lut
	ADD  $0, R11, R11         // <--                                  // add	x11, x11, :lo12:shuf_lut

LBB0_3:
	WORD  $0x3cc10403              // FMOVQ.P 16(R0), F3                   // ldr	q3, [x0], #16
	SUBSW $1, R10, R10             // <--                                  // subs	w10, w10, #1
	WORD  $0x6ea04864              // VCLZ V3.S4, V4.S4                    // clz	v4.4s, v3.4s
	WORD  $0x6f3d0484              // VUSHR $3, V4.S4, V4.S4               // ushr	v4.4s, v4.4s, #3
	WORD  $0x6ea42c04              // VUQSUB V4.S4, V0.S4, V4.S4           // uqsub	v4.4s, v0.4s, v4.4s
	VTBL  V1.B8, [V4.B16], V4.B8   // <--                                  // tbl	v4.8b, { v4.16b }, v1.8b
	WORD  $0x0ea29c84              // VMUL V2.S2, V4.S2, V4.S2             // mul	v4.2s, v4.2s, v2.2s
	FMOVS F4, R12                  // <--                                  // fmov	w12, s4
	LSRW  $20, R12, R13            // <--                                  // lsr	w13, w12, #20
	LSRW  $24, R12, R12            // <--                                  // lsr	w12, w12, #24
	AND   $1008, R13, R13          // <--                                  // and	x13, x13, #0x3f0
	WORD  $0x3800152c              // MOVB.P R12, 1(R9)                    // strb	w12, [x9], #1
	WORD  $0x3ced6965              // FMOVQ (R11)(R13), F5                 // ldr	q5, [x11, x13]
	VMOV  V4.S[1], R13             // <--                                  // mov	w13, v4.s[1]
	VTBL  V5.B16, [V3.B16], V3.B16 // <--                                  // tbl	v3.16b, { v3.16b }, v5.16b
	LSRW  $24, R13, R13            // <--                                  // lsr	w13, w13, #24
	ADD   R13, R8, R13             // <--                                  // add	x13, x8, x13
	WORD  $0x3d800103              // FMOVQ F3, (R8)                       // str	q3, [x8]
	ADD   $4, R13, R8              // <--                                  // add	x8, x13, #4
	BNE   LBB0_3                   // <--                                  // b.ne	.LBB0_3

LBB0_4:
	TSTW $3, R1      // <--                                  // tst	w1, #0x3
	BEQ  LBB0_29     // <--                                  // b.eq	.LBB0_29
	WORD $0xb940000c // MOVWU (R0), R12                      // ldr	w12, [x0]
	AND  $3, R1, R11 // <--                                  // and	x11, x1, #0x3
	CMPW $256, R12   // <--                                  // cmp	w12, #256
	BCS  LBB0_7      // <--                                  // b.hs	.LBB0_7
	MOVW ZR, R10     // <--                                  // mov	w10, wzr
	MOVW $1, R13     // <--                                  // mov	w13, #1
	WORD $0x3900010c // MOVB R12, (R8)                       // strb	w12, [x8]
	ADD  R13, R8, R8 // <--                                  // add	x8, x8, x13
	CMP  $1, R11     // <--                                  // cmp	x11, #1
	BNE  LBB0_12     // <--                                  // b.ne	.LBB0_12
	JMP  LBB0_28     // <--                                  // b	.LBB0_28

LBB0_7:
	CMPW $(16<<12), R12 // <--                                  // cmp	w12, #16, lsl #12
	BCS  LBB0_9         // <--                                  // b.hs	.LBB0_9
	MOVW $1, R10        // <--                                  // mov	w10, #1
	MOVW $2, R13        // <--                                  // mov	w13, #2
	WORD $0x7900010c    // MOVH R12, (R8)                       // strh	w12, [x8]
	ADD  R13, R8, R8    // <--                                  // add	x8, x8, x13
	CMP  $1, R11        // <--                                  // cmp	x11, #1
	BNE  LBB0_12        // <--                                  // b.ne	.LBB0_12
	JMP  LBB0_28        // <--                                  // b	.LBB0_28

LBB0_9:
	LSRW  $24, R12, R10 // <--                                  // lsr	w10, w12, #24
	CBNZW R10, LBB0_11  // <--                                  // cbnz	w10, .LBB0_11
	LSRW  $16, R12, R14 // <--                                  // lsr	w14, w12, #16
	MOVW  $2, R10       // <--                                  // mov	w10, #2
	MOVW  $3, R13       // <--                                  // mov	w13, #3
	WORD  $0x7900010c   // MOVH R12, (R8)                       // strh	w12, [x8]
	WORD  $0x3900090e   // MOVB R14, 2(R8)                      // strb	w14, [x8, #2]
	ADD   R13, R8, R8   // <--                                  // add	x8, x8, x13
	CMP   $1, R11       // <--                                  // cmp	x11, #1
	BNE   LBB0_12       // <--                                  // b.ne	.LBB0_12
	JMP   LBB0_28       // <--                                  // b	.LBB0_28

LBB0_11:
	MOVW $3, R10     // <--                                  // mov	w10, #3
	MOVW $4, R13     // <--                                  // mov	w13, #4
	WORD $0xb900010c // MOVW R12, (R8)                       // str	w12, [x8]
	ADD  R13, R8, R8 // <--                                  // add	x8, x8, x13
	CMP  $1, R11     // <--                                  // cmp	x11, #1
	BEQ  LBB0_28     // <--                                  // b.eq	.LBB0_28

LBB0_12:
	WORD $0xb940040c // MOVWU 4(R0), R12                     // ldr	w12, [x0, #4]
	CMPW $256, R12   // <--                                  // cmp	w12, #256
	BCS  LBB0_14     // <--                                  // b.hs	.LBB0_14
	MOVW ZR, R13     // <--                                  // mov	w13, wzr
	MOVW $1, R14     // <--                                  // mov	w14, #1
	WORD $0x3900010c // MOVB R12, (R8)                       // strb	w12, [x8]
	JMP  LBB0_19     // <--                                  // b	.LBB0_19

LBB0_14:
	CMPW $(16<<12), R12 // <--                                  // cmp	w12, #16, lsl #12
	BCS  LBB0_16        // <--                                  // b.hs	.LBB0_16
	MOVW $4, R13        // <--                                  // mov	w13, #4
	MOVW $2, R14        // <--                                  // mov	w14, #2
	WORD $0x7900010c    // MOVH R12, (R8)                       // strh	w12, [x8]
	JMP  LBB0_19        // <--                                  // b	.LBB0_19

LBB0_16:
	LSRW  $24, R12, R13 // <--                                  // lsr	w13, w12, #24
	CBNZW R13, LBB0_18  // <--                                  // cbnz	w13, .LBB0_18
	LSRW  $16, R12, R15 // <--                                  // lsr	w15, w12, #16
	MOVW  $8, R13       // <--                                  // mov	w13, #8
	MOVW  $3, R14       // <--                                  // mov	w14, #3
	WORD  $0x7900010c   // MOVH R12, (R8)                       // strh	w12, [x8]
	WORD  $0x3900090f   // MOVB R15, 2(R8)                      // strb	w15, [x8, #2]
	JMP   LBB0_19       // <--                                  // b	.LBB0_19

LBB0_18:
	MOVW $12, R13    // <--                                  // mov	w13, #12
	MOVW $4, R14     // <--                                  // mov	w14, #4
	WORD $0xb900010c // MOVW R12, (R8)                       // str	w12, [x8]

LBB0_19:
	ADD  R14, R8, R8   // <--                                  // add	x8, x8, x14
	ORRW R13, R10, R10 // <--                                  // orr	w10, w10, w13
	CMP  $2, R11       // <--                                  // cmp	x11, #2
	BEQ  LBB0_28       // <--                                  // b.eq	.LBB0_28
	WORD $0xb940080b   // MOVWU 8(R0), R11                     // ldr	w11, [x0, #8]
	CMPW $256, R11     // <--                                  // cmp	w11, #256
	BCS  LBB0_22       // <--                                  // b.hs	.LBB0_22
	MOVW ZR, R12       // <--                                  // mov	w12, wzr
	MOVW $1, R13       // <--                                  // mov	w13, #1
	WORD $0x3900010b   // MOVB R11, (R8)                       // strb	w11, [x8]
	JMP  LBB0_27       // <--                                  // b	.LBB0_27

LBB0_22:
	CMPW $(16<<12), R11 // <--                                  // cmp	w11, #16, lsl #12
	BCS  LBB0_24        // <--                                  // b.hs	.LBB0_24
	MOVW $16, R12       // <--                                  // mov	w12, #16
	MOVW $2, R13        // <--                                  // mov	w13, #2
	WORD $0x7900010b    // MOVH R11, (R8)                       // strh	w11, [x8]
	JMP  LBB0_27        // <--                                  // b	.LBB0_27

LBB0_24:
	LSRW  $24, R11, R12 // <--                                  // lsr	w12, w11, #24
	CBNZW R12, LBB0_26  // <--                                  // cbnz	w12, .LBB0_26
	LSRW  $16, R11, R14 // <--                                  // lsr	w14, w11, #16
	MOVW  $32, R12      // <--                                  // mov	w12, #32
	MOVW  $3, R13       // <--                                  // mov	w13, #3
	WORD  $0x7900010b   // MOVH R11, (R8)                       // strh	w11, [x8]
	WORD  $0x3900090e   // MOVB R14, 2(R8)                      // strb	w14, [x8, #2]
	JMP   LBB0_27       // <--                                  // b	.LBB0_27

LBB0_26:
	MOVW $48, R12    // <--                                  // mov	w12, #48
	MOVW $4, R13     // <--                                  // mov	w13, #4
	WORD $0xb900010b // MOVW R11, (R8)                       // str	w11, [x8]

LBB0_27:
	ADD  R13, R8, R8   // <--                                  // add	x8, x8, x13
	ORRW R12, R10, R10 // <--                                  // orr	w10, w10, w12

LBB0_28:
	WORD $0x3900012a // MOVB R10, (R9)                       // strb	w10, [x9]

LBB0_29:
	SUB  R3, R8, R0     // <--                                  // sub	x0, x8, x3
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+32(FP) // <--
	RET                 // <--                                  // ret

DATA LCPI1_0<>+0x00(SB)/8, $0x0004080c0004080c
GLOBL LCPI1_0<>(SB), (RODATA|NOPTR), $8

DATA LCPI1_1<>+0x00(SB)/4, $0x40100401
DATA LCPI1_1<>+0x04(SB)/4, $0x01010101
GLOBL LCPI1_1<>(SB), (RODATA|NOPTR), $8

TEXT Â·svb_encode_zz(SB), NOSPLIT, $0-40
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVD out+24(FP), R3
	NOP                    // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADDW $3, R1, R8        // <--                                  // add	w8, w1, #3
	CMPW $4, R1            // <--                                  // cmp	w1, #4
	LSRW $2, R8, R8        // <--                                  // lsr	w8, w8, #2
	NOP                    // (skipped)                            // mov	x29, sp
	ADD  R8, R3, R8        // <--                                  // add	x8, x3, x8
	BCS  LBB1_2            // <--                                  // b.hs	.LBB1_2
	MOVD R3, R9            // <--                                  // mov	x9, x3
	JMP  LBB1_4            // <--                                  // b	.LBB1_4

LBB1_2:
	MOVD $LCPI1_0<>(SB), R9   // <--                                  // adrp	x9, .LCPI1_0
	MOVD $LCPI1_1<>(SB), R11  // <--                                  // adrp	x11, .LCPI1_1
	WORD $0x4f000460          // VMOVI $3, V0.S4                      // movi	v0.4s, #3
	LSRW $2, R1, R10          // <--                                  // lsr	w10, w1, #2
	WORD $0xfd400121          // FMOVD (R9), F1                       // ldr	d1, [x9, :lo12:.LCPI1_0]
	MOVD R3, R9               // <--                                  // mov	x9, x3
	WORD $0xfd400162          // FMOVD (R11), F2                      // ldr	d2, [x11, :lo12:.LCPI1_1]
	MOVD $shuf_lut<>(SB), R11 // <--                                  // adrp	x11, shuf_lut
	ADD  $0, R11, R11         // <--                                  // add	x11, x11, :lo12:shuf_lut

LBB1_3:
	WORD  $0x3cc10403              // FMOVQ.P 16(R0), F3                   // ldr	q3, [x0], #16
	SUBSW $1, R10, R10             // <--                                  // subs	w10, w10, #1
	VADD  V3.S4, V3.S4, V4.S4      // <--                                  // add	v4.4s, v3.4s, v3.4s
	WORD  $0x4ea0a863              // VCMLT $0, V3.S4, V3.S4               // cmlt	v3.4s, v3.4s, #0
	VEOR  V3.B16, V4.B16, V3.B16   // <--                                  // eor	v3.16b, v4.16b, v3.16b
	WORD  $0x6ea04864              // VCLZ V3.S4, V4.S4                    // clz	v4.4s, v3.4s
	WORD  $0x6f3d0484              // VUSHR $3, V4.S4, V4.S4               // ushr	v4.4s, v4.4s, #3
	WORD  $0x6ea42c04              // VUQSUB V4.S4, V0.S4, V4.S4           // uqsub	v4.4s, v0.4s, v4.4s
	VTBL  V1.B8, [V4.B16], V4.B8   // <--                                  // tbl	v4.8b, { v4.16b }, v1.8b
	WORD  $0x0ea29c84              // VMUL V2.S2, V4.S2, V4.S2             // mul	v4.2s, v4.2s, v2.2s
	FMOVS F4, R12                  // <--                                  // fmov	w12, s4
	LSRW  $20, R12, R13            // <--                                  // lsr	w13, w12, #20
	LSRW  $24, R12, R12            // <--                                  // lsr	w12, w12, #24
	AND   $1008, R13, R13          // <--                                  // and	x13, x13, #0x3f0
	WORD  $0x3800152c              // MOVB.P R12, 1(R9)                    // strb	w12, [x9], #1
	WORD  $0x3ced6965              // FMOVQ (R11)(R13), F5                 // ldr	q5, [x11, x13]
	VMOV  V4.S[1], R13             // <--                                  // mov	w13, v4.s[1]
	VTBL  V5.B16, [V3.B16], V3.B16 // <--                                  // tbl	v3.16b, { v3.16b }, v5.16b
	LSRW  $24, R13, R13            // <--                                  // lsr	w13, w13, #24
	ADD   R13, R8, R13             // <--                                  // add	x13, x8, x13
	WORD  $0x3d800103              // FMOVQ F3, (R8)                       // str	q3, [x8]
	ADD   $4, R13, R8              // <--                                  // add	x8, x13, #4
	BNE   LBB1_3                   // <--                                  // b.ne	.LBB1_3

LBB1_4:
	TSTW $3, R1            // <--                                  // tst	w1, #0x3
	BEQ  LBB1_29           // <--                                  // b.eq	.LBB1_29
	WORD $0xb940000a       // MOVWU (R0), R10                      // ldr	w10, [x0]
	AND  $3, R1, R11       // <--                                  // and	x11, x1, #0x3
	LSLW $1, R10, R12      // <--                                  // lsl	w12, w10, #1
	EORW R10->31, R12, R12 // <--                                  // eor	w12, w12, w10, asr #31
	CMPW $256, R12         // <--                                  // cmp	w12, #256
	BCS  LBB1_7            // <--                                  // b.hs	.LBB1_7
	MOVW ZR, R10           // <--                                  // mov	w10, wzr
	MOVW $1, R13           // <--                                  // mov	w13, #1
	WORD $0x3900010c       // MOVB R12, (R8)                       // strb	w12, [x8]
	ADD  R13, R8, R8       // <--                                  // add	x8, x8, x13
	CMP  $1, R11           // <--                                  // cmp	x11, #1
	BNE  LBB1_12           // <--                                  // b.ne	.LBB1_12
	JMP  LBB1_28           // <--                                  // b	.LBB1_28

LBB1_7:
	CMPW $(16<<12), R12 // <--                                  // cmp	w12, #16, lsl #12
	BCS  LBB1_9         // <--                                  // b.hs	.LBB1_9
	MOVW $1, R10        // <--                                  // mov	w10, #1
	MOVW $2, R13        // <--                                  // mov	w13, #2
	WORD $0x7900010c    // MOVH R12, (R8)                       // strh	w12, [x8]
	ADD  R13, R8, R8    // <--                                  // add	x8, x8, x13
	CMP  $1, R11        // <--                                  // cmp	x11, #1
	BNE  LBB1_12        // <--                                  // b.ne	.LBB1_12
	JMP  LBB1_28        // <--                                  // b	.LBB1_28

LBB1_9:
	LSRW  $24, R12, R10 // <--                                  // lsr	w10, w12, #24
	CBNZW R10, LBB1_11  // <--                                  // cbnz	w10, .LBB1_11
	LSRW  $16, R12, R14 // <--                                  // lsr	w14, w12, #16
	MOVW  $2, R10       // <--                                  // mov	w10, #2
	MOVW  $3, R13       // <--                                  // mov	w13, #3
	WORD  $0x7900010c   // MOVH R12, (R8)                       // strh	w12, [x8]
	WORD  $0x3900090e   // MOVB R14, 2(R8)                      // strb	w14, [x8, #2]
	ADD   R13, R8, R8   // <--                                  // add	x8, x8, x13
	CMP   $1, R11       // <--                                  // cmp	x11, #1
	BNE   LBB1_12       // <--                                  // b.ne	.LBB1_12
	JMP   LBB1_28       // <--                                  // b	.LBB1_28

LBB1_11:
	MOVW $3, R10     // <--                                  // mov	w10, #3
	MOVW $4, R13     // <--                                  // mov	w13, #4
	WORD $0xb900010c // MOVW R12, (R8)                       // str	w12, [x8]
	ADD  R13, R8, R8 // <--                                  // add	x8, x8, x13
	CMP  $1, R11     // <--                                  // cmp	x11, #1
	BEQ  LBB1_28     // <--                                  // b.eq	.LBB1_28

LBB1_12:
	WORD $0xb940040c       // MOVWU 4(R0), R12                     // ldr	w12, [x0, #4]
	LSLW $1, R12, R13      // <--                                  // lsl	w13, w12, #1
	EORW R12->31, R13, R12 // <--                                  // eor	w12, w13, w12, asr #31
	CMPW $256, R12         // <--                                  // cmp	w12, #256
	BCS  LBB1_14           // <--                                  // b.hs	.LBB1_14
	MOVW ZR, R13           // <--                                  // mov	w13, wzr
	MOVW $1, R14           // <--                                  // mov	w14, #1
	WORD $0x3900010c       // MOVB R12, (R8)                       // strb	w12, [x8]
	JMP  LBB1_19           // <--                                  // b	.LBB1_19

LBB1_14:
	CMPW $(16<<12), R12 // <--                                  // cmp	w12, #16, lsl #12
	BCS  LBB1_16        // <--                                  // b.hs	.LBB1_16
	MOVW $4, R13        // <--                                  // mov	w13, #4
	MOVW $2, R14        // <--                                  // mov	w14, #2
	WORD $0x7900010c    // MOVH R12, (R8)                       // strh	w12, [x8]
	JMP  LBB1_19        // <--                                  // b	.LBB1_19

LBB1_16:
	LSRW  $24, R12, R13 // <--                                  // lsr	w13, w12, #24
	CBNZW R13, LBB1_18  // <--                                  // cbnz	w13, .LBB1_18
	LSRW  $16, R12, R15 // <--                                  // lsr	w15, w12, #16
	MOVW  $8, R13       // <--                                  // mov	w13, #8
	MOVW  $3, R14       // <--                                  // mov	w14, #3
	WORD  $0x7900010c   // MOVH R12, (R8)                       // strh	w12, [x8]
	WORD  $0x3900090f   // MOVB R15, 2(R8)                      // strb	w15, [x8, #2]
	JMP   LBB1_19       // <--                                  // b	.LBB1_19

LBB1_18:
	MOVW $12, R13    // <--                                  // mov	w13, #12
	MOVW $4, R14     // <--                                  // mov	w14, #4
	WORD $0xb900010c // MOVW R12, (R8)                       // str	w12, [x8]

LBB1_19:
	ADD  R14, R8, R8       // <--                                  // add	x8, x8, x14
	ORRW R13, R10, R10     // <--                                  // orr	w10, w10, w13
	CMP  $2, R11           // <--                                  // cmp	x11, #2
	BEQ  LBB1_28           // <--                                  // b.eq	.LBB1_28
	WORD $0xb940080b       // MOVWU 8(R0), R11                     // ldr	w11, [x0, #8]
	LSLW $1, R11, R12      // <--                                  // lsl	w12, w11, #1
	EORW R11->31, R12, R11 // <--                                  // eor	w11, w12, w11, asr #31
	CMPW $256, R11         // <--                                  // cmp	w11, #256
	BCS  LBB1_22           // <--                                  // b.hs	.LBB1_22
	MOVW ZR, R12           // <--                                  // mov	w12, wzr
	MOVW $1, R13           // <--                                  // mov	w13, #1
	WORD $0x3900010b       // MOVB R11, (R8)                       // strb	w11, [x8]
	JMP  LBB1_27           // <--                                  // b	.LBB1_27

LBB1_22:
	CMPW $(16<<12), R11 // <--                                  // cmp	w11, #16, lsl #12
	BCS  LBB1_24        // <--                                  // b.hs	.LBB1_24
	MOVW $16, R12       // <--                                  // mov	w12, #16
	MOVW $2, R13        // <--                                  // mov	w13, #2
	WORD $0x7900010b    // MOVH R11, (R8)                       // strh	w11, [x8]
	JMP  LBB1_27        // <--                                  // b	.LBB1_27

LBB1_24:
	LSRW  $24, R11, R12 // <--                                  // lsr	w12, w11, #24
	CBNZW R12, LBB1_26  // <--                                  // cbnz	w12, .LBB1_26
	LSRW  $16, R11, R14 // <--                                  // lsr	w14, w11, #16
	MOVW  $32, R12      // <--                                  // mov	w12, #32
	MOVW  $3, R13       // <--                                  // mov	w13, #3
	WORD  $0x7900010b   // MOVH R11, (R8)                       // strh	w11, [x8]
	WORD  $0x3900090e   // MOVB R14, 2(R8)                      // strb	w14, [x8, #2]
	JMP   LBB1_27       // <--                                  // b	.LBB1_27

LBB1_26:
	MOVW $48, R12    // <--                                  // mov	w12, #48
	MOVW $4, R13     // <--                                  // mov	w13, #4
	WORD $0xb900010b // MOVW R11, (R8)                       // str	w11, [x8]

LBB1_27:
	ADD  R13, R8, R8   // <--                                  // add	x8, x8, x13
	ORRW R12, R10, R10 // <--                                  // orr	w10, w10, w12

LBB1_28:
	WORD $0x3900012a // MOVB R10, (R9)                       // strb	w10, [x9]

LBB1_29:
	SUB  R3, R8, R0     // <--                                  // sub	x0, x8, x3
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+32(FP) // <--
	RET                 // <--                                  // ret

DATA LCPI2_0<>+0x00(SB)/8, $0xffffff0001020303
DATA LCPI2_0<>+0x08(SB)/8, $0xffffffffffffffff
GLOBL LCPI2_0<>(SB), (RODATA|NOPTR), $16

DATA LCPI2_1<>+0x00(SB)/8, $0x0004080c0004080c
GLOBL LCPI2_1<>(SB), (RODATA|NOPTR), $8

TEXT Â·svb_encode_alt(SB), NOSPLIT, $0-40
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVD out+24(FP), R3
	NOP                    // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADDW $3, R1, R8        // <--                                  // add	w8, w1, #3
	CMPW $4, R1            // <--                                  // cmp	w1, #4
	LSRW $2, R8, R8        // <--                                  // lsr	w8, w8, #2
	NOP                    // (skipped)                            // mov	x29, sp
	ADD  R8, R3, R8        // <--                                  // add	x8, x3, x8
	BCS  LBB2_2            // <--                                  // b.hs	.LBB2_2
	MOVD R3, R9            // <--                                  // mov	x9, x3
	JMP  LBB2_6            // <--                                  // b	.LBB2_6

LBB2_2:
	MOVD  $LCPI2_1<>(SB), R11                   // <--                                  // adrp	x11, .LCPI2_1
	MOVD  $LCPI2_0<>(SB), R9                    // <--                                  // adrp	x9, .LCPI2_0
	LSRW  $2, R1, R10                           // <--                                  // lsr	w10, w1, #2
	MOVD  $lengthTable_0124<>(SB), R12          // <--                                  // adrp	x12, lengthTable_0124
	ADD   $0, R12, R12                          // <--                                  // add	x12, x12, :lo12:lengthTable_0124
	MOVD  $encodingShuffleTable_0124<>(SB), R13 // <--                                  // adrp	x13, encodingShuffleTable_0124
	ADD   $0, R13, R13                          // <--                                  // add	x13, x13, :lo12:encodingShuffleTable_0124
	WORD  $0xfd400161                           // FMOVD (R11), F1                      // ldr	d1, [x11, :lo12:.LCPI2_1]
	MOVW  $1025, R11                            // <--                                  // mov	w11, #1025
	WORD  $0x3dc00120                           // FMOVQ (R9), F0                       // ldr	q0, [x9, :lo12:.LCPI2_0]
	MOVKW $(16400<<16), R11                     // <--                                  // movk	w11, #16400, lsl #16
	MOVD  R3, R9                                // <--                                  // mov	x9, x3
	JMP   LBB2_4                                // <--                                  // b	.LBB2_4

LBB2_3:
	WORD  $0x3cee79a3              // FMOVQ (R13)(R14<<4), F3              // ldr	q3, [x13, x14, lsl #4]
	WORD  $0x386e698e              // MOVBU (R12)(R14), R14                // ldrb	w14, [x12, x14]
	VTBL  V3.B16, [V2.B16], V2.B16 // <--                                  // tbl	v2.16b, { v2.16b }, v3.16b
	WORD  $0x3d800102              // FMOVQ F2, (R8)                       // str	q2, [x8]
	ADD   R14, R8, R8              // <--                                  // add	x8, x8, x14
	ADD   $1, R9, R9               // <--                                  // add	x9, x9, #1
	ADD   $16, R0, R0              // <--                                  // add	x0, x0, #16
	SUBSW $1, R10, R10             // <--                                  // subs	w10, w10, #1
	BEQ   LBB2_6                   // <--                                  // b.eq	.LBB2_6

LBB2_4:
	WORD  $0x3dc00002              // FMOVQ (R0), F2                       // ldr	q2, [x0]
	WORD  $0x6ea04843              // VCLZ V2.S4, V3.S4                    // clz	v3.4s, v2.4s
	WORD  $0x6f3d0463              // VUSHR $3, V3.S4, V3.S4               // ushr	v3.4s, v3.4s, #3
	VTBL  V3.B16, [V0.B16], V3.B16 // <--                                  // tbl	v3.16b, { v0.16b }, v3.16b
	VTBL  V1.B8, [V3.B16], V3.B8   // <--                                  // tbl	v3.8b, { v3.16b }, v1.8b
	FMOVS F3, R14                  // <--                                  // fmov	w14, s3
	MULW  R11, R14, R15            // <--                                  // mul	w15, w14, w11
	LSR   $24, R15, R14            // <--                                  // lsr	x14, x15, #24
	LSRW  $24, R15, R15            // <--                                  // lsr	w15, w15, #24
	WORD  $0x3900012e              // MOVB R14, (R9)                       // strb	w14, [x9]
	CBNZW R15, LBB2_3              // <--                                  // cbnz	w15, .LBB2_3
	MOVD  ZR, R14                  // <--                                  // mov	x14, xzr
	ADD   ZR, R8, R8               // <--                                  // add	x8, x8, xzr
	ADD   $1, R9, R9               // <--                                  // add	x9, x9, #1
	ADD   $16, R0, R0              // <--                                  // add	x0, x0, #16
	SUBSW $1, R10, R10             // <--                                  // subs	w10, w10, #1
	BNE   LBB2_4                   // <--                                  // b.ne	.LBB2_4

LBB2_6:
	TSTW $3, R1       // <--                                  // tst	w1, #0x3
	BEQ  LBB2_31      // <--                                  // b.eq	.LBB2_31
	WORD $0xb940000c  // MOVWU (R0), R12                      // ldr	w12, [x0]
	AND  $3, R1, R11  // <--                                  // and	x11, x1, #0x3
	CBZW R12, LBB2_10 // <--                                  // cbz	w12, .LBB2_10
	CMPW $256, R12    // <--                                  // cmp	w12, #256
	BCS  LBB2_11      // <--                                  // b.hs	.LBB2_11
	MOVW $1, R13      // <--                                  // mov	w13, #1
	MOVW $1, R10      // <--                                  // mov	w10, #1
	WORD $0x3900010c  // MOVB R12, (R8)                       // strb	w12, [x8]
	ADD  R13, R8, R8  // <--                                  // add	x8, x8, x13
	CMP  $1, R11      // <--                                  // cmp	x11, #1
	BNE  LBB2_14      // <--                                  // b.ne	.LBB2_14
	JMP  LBB2_30      // <--                                  // b	.LBB2_30

LBB2_10:
	MOVW ZR, R10 // <--                                  // mov	w10, wzr
	CMP  $1, R11 // <--                                  // cmp	x11, #1
	BNE  LBB2_14 // <--                                  // b.ne	.LBB2_14
	JMP  LBB2_30 // <--                                  // b	.LBB2_30

LBB2_11:
	CMPW $(16<<12), R12 // <--                                  // cmp	w12, #16, lsl #12
	BCS  LBB2_13        // <--                                  // b.hs	.LBB2_13
	MOVW $2, R13        // <--                                  // mov	w13, #2
	MOVW $2, R10        // <--                                  // mov	w10, #2
	WORD $0x7900010c    // MOVH R12, (R8)                       // strh	w12, [x8]
	ADD  R13, R8, R8    // <--                                  // add	x8, x8, x13
	CMP  $1, R11        // <--                                  // cmp	x11, #1
	BNE  LBB2_14        // <--                                  // b.ne	.LBB2_14
	JMP  LBB2_30        // <--                                  // b	.LBB2_30

LBB2_13:
	MOVW $3, R10     // <--                                  // mov	w10, #3
	MOVW $4, R13     // <--                                  // mov	w13, #4
	WORD $0xb900010c // MOVW R12, (R8)                       // str	w12, [x8]
	ADD  R13, R8, R8 // <--                                  // add	x8, x8, x13
	CMP  $1, R11     // <--                                  // cmp	x11, #1
	BEQ  LBB2_30     // <--                                  // b.eq	.LBB2_30

LBB2_14:
	WORD $0xb940040d   // MOVWU 4(R0), R13                     // ldr	w13, [x0, #4]
	CBZW R13, LBB2_17  // <--                                  // cbz	w13, .LBB2_17
	CMPW $256, R13     // <--                                  // cmp	w13, #256
	BCS  LBB2_18       // <--                                  // b.hs	.LBB2_18
	MOVW $4, R12       // <--                                  // mov	w12, #4
	MOVW $1, R14       // <--                                  // mov	w14, #1
	WORD $0x3900010d   // MOVB R13, (R8)                       // strb	w13, [x8]
	ADD  R14, R8, R8   // <--                                  // add	x8, x8, x14
	ORRW R12, R10, R10 // <--                                  // orr	w10, w10, w12
	CMP  $2, R11       // <--                                  // cmp	x11, #2
	BNE  LBB2_21       // <--                                  // b.ne	.LBB2_21
	JMP  LBB2_30       // <--                                  // b	.LBB2_30

LBB2_17:
	MOVW ZR, R12      // <--                                  // mov	w12, wzr
	ORRW ZR, R10, R10 // <--                                  // orr	w10, w10, wzr
	CMP  $2, R11      // <--                                  // cmp	x11, #2
	BNE  LBB2_21      // <--                                  // b.ne	.LBB2_21
	JMP  LBB2_30      // <--                                  // b	.LBB2_30

LBB2_18:
	CMPW $(16<<12), R13 // <--                                  // cmp	w13, #16, lsl #12
	BCS  LBB2_20        // <--                                  // b.hs	.LBB2_20
	MOVW $8, R12        // <--                                  // mov	w12, #8
	MOVW $2, R14        // <--                                  // mov	w14, #2
	WORD $0x7900010d    // MOVH R13, (R8)                       // strh	w13, [x8]
	ADD  R14, R8, R8    // <--                                  // add	x8, x8, x14
	ORRW R12, R10, R10  // <--                                  // orr	w10, w10, w12
	CMP  $2, R11        // <--                                  // cmp	x11, #2
	BNE  LBB2_21        // <--                                  // b.ne	.LBB2_21
	JMP  LBB2_30        // <--                                  // b	.LBB2_30

LBB2_20:
	MOVW $12, R12      // <--                                  // mov	w12, #12
	MOVW $4, R14       // <--                                  // mov	w14, #4
	WORD $0xb900010d   // MOVW R13, (R8)                       // str	w13, [x8]
	ADD  R14, R8, R8   // <--                                  // add	x8, x8, x14
	ORRW R12, R10, R10 // <--                                  // orr	w10, w10, w12
	CMP  $2, R11       // <--                                  // cmp	x11, #2
	BEQ  LBB2_30       // <--                                  // b.eq	.LBB2_30

LBB2_21:
	WORD $0xb940080c  // MOVWU 8(R0), R12                     // ldr	w12, [x0, #8]
	CBZW R12, LBB2_24 // <--                                  // cbz	w12, .LBB2_24
	CMPW $256, R12    // <--                                  // cmp	w12, #256
	BCS  LBB2_25      // <--                                  // b.hs	.LBB2_25
	MOVW $16, R11     // <--                                  // mov	w11, #16
	MOVW $1, R13      // <--                                  // mov	w13, #1
	WORD $0x3900010c  // MOVB R12, (R8)                       // strb	w12, [x8]
	JMP  LBB2_28      // <--                                  // b	.LBB2_28

LBB2_24:
	MOVW ZR, R11 // <--                                  // mov	w11, wzr
	JMP  LBB2_29 // <--                                  // b	.LBB2_29

LBB2_25:
	CMPW $(16<<12), R12 // <--                                  // cmp	w12, #16, lsl #12
	BCS  LBB2_27        // <--                                  // b.hs	.LBB2_27
	MOVW $32, R11       // <--                                  // mov	w11, #32
	MOVW $2, R13        // <--                                  // mov	w13, #2
	WORD $0x7900010c    // MOVH R12, (R8)                       // strh	w12, [x8]
	JMP  LBB2_28        // <--                                  // b	.LBB2_28

LBB2_27:
	MOVW $48, R11    // <--                                  // mov	w11, #48
	MOVW $4, R13     // <--                                  // mov	w13, #4
	WORD $0xb900010c // MOVW R12, (R8)                       // str	w12, [x8]

LBB2_28:
	ADD R13, R8, R8 // <--                                  // add	x8, x8, x13

LBB2_29:
	ORRW R11, R10, R10 // <--                                  // orr	w10, w10, w11

LBB2_30:
	WORD $0x3900012a // MOVB R10, (R9)                       // strb	w10, [x9]

LBB2_31:
	SUB  R3, R8, R0     // <--                                  // sub	x0, x8, x3
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+32(FP) // <--
	RET                 // <--                                  // ret

TEXT Â·svb_decode(SB), NOSPLIT, $0-48
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVD count+24(FP), R3
	MOVD out+32(FP), R4
	CMP  $1, R3            // <--                                  // cmp	x3, #1
	BLT  LBB3_2            // <--                                  // b.lt	.LBB3_2
	ADD  $3, R3, R8        // <--                                  // add	x8, x3, #3
	LSR  $2, R8, R9        // <--                                  // lsr	x9, x8, #2
	CMP  R1, R9            // <--                                  // cmp	x9, x1
	BLS  LBB3_3            // <--                                  // b.ls	.LBB3_3

LBB3_2:
	MOVD ZR, R0         // <--                                  // mov	x0, xzr
	MOVD R0, ret+40(FP) // <--
	RET                 // <--                                  // ret

LBB3_3:
	NOP                                // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADD  R9, R0, R8                    // <--                                  // add	x8, x0, x9
	CMP  $4, R3                        // <--                                  // cmp	x3, #4
	NOP                                // (skipped)                            // mov	x29, sp
	BCC  LBB3_8                        // <--                                  // b.lo	.LBB3_8
	AND  $-16, R1, R10                 // <--                                  // and	x10, x1, #0xfffffffffffffff0
	CMP  R10, R9                       // <--                                  // cmp	x9, x10
	BGE  LBB3_8                        // <--                                  // b.ge	.LBB3_8
	ADD  R10, R0, R10                  // <--                                  // add	x10, x0, x10
	ADD  R3>>2, R0, R11                // <--                                  // add	x11, x0, x3, lsr #2
	MOVD R4, R9                        // <--                                  // mov	x9, x4
	MOVD $shuffleTable_1234<>(SB), R12 // <--                                  // adrp	x12, shuffleTable_1234
	ADD  $0, R12, R12                  // <--                                  // add	x12, x12, :lo12:shuffleTable_1234
	MOVD $lengthTable_1234<>(SB), R13  // <--                                  // adrp	x13, lengthTable_1234
	ADD  $0, R13, R13                  // <--                                  // add	x13, x13, :lo12:lengthTable_1234

LBB3_6:
	WORD $0x3840140e              // MOVBU.P 1(R0), R14                   // ldrb	w14, [x0], #1
	WORD $0x3dc00101              // FMOVQ (R8), F1                       // ldr	q1, [x8]
	CMP  R11, R0                  // <--                                  // cmp	x0, x11
	WORD $0x3cee7980              // FMOVQ (R12)(R14<<4), F0              // ldr	q0, [x12, x14, lsl #4]
	WORD $0x386e69ae              // MOVBU (R13)(R14), R14                // ldrb	w14, [x13, x14]
	VTBL V0.B16, [V1.B16], V0.B16 // <--                                  // tbl	v0.16b, { v1.16b }, v0.16b
	ADD  R14, R8, R8              // <--                                  // add	x8, x8, x14
	WORD $0x3c810520              // FMOVQ.P F0, 16(R9)                   // str	q0, [x9], #16
	BCS  LBB3_9                   // <--                                  // b.hs	.LBB3_9
	CMP  R10, R8                  // <--                                  // cmp	x8, x10
	BCC  LBB3_6                   // <--                                  // b.lo	.LBB3_6
	JMP  LBB3_9                   // <--                                  // b	.LBB3_9

LBB3_8:
	MOVD R4, R9 // <--                                  // mov	x9, x4

LBB3_9:
	SUB  R4, R9, R11  // <--                                  // sub	x11, x9, x4
	CBZ  R8, LBB3_23  // <--                                  // cbz	x8, .LBB3_23
	LSR  $2, R11, R10 // <--                                  // lsr	x10, x11, #2
	SUBW R10, R3, R10 // <--                                  // sub	w10, w3, w10
	CBZW R10, LBB3_23 // <--                                  // cbz	w10, .LBB3_23
	MOVW ZR, R11      // <--                                  // mov	w11, wzr
	WORD $0x3840140c  // MOVBU.P 1(R0), R12                   // ldrb	w12, [x0], #1
	JMP  LBB3_14      // <--                                  // b	.LBB3_14

LBB3_12:
	WORD $0x7940010d // MOVHU (R8), R13                      // ldrh	w13, [x8]
	MOVW $2, R14     // <--                                  // mov	w14, #2

LBB3_13:
	ADD   R14, R8, R8  // <--                                  // add	x8, x8, x14
	ADDW  $2, R11, R11 // <--                                  // add	w11, w11, #2
	SUBSW $1, R10, R10 // <--                                  // subs	w10, w10, #1
	WORD  $0xb800452d  // MOVW.P R13, 4(R9)                    // str	w13, [x9], #4
	BEQ   LBB3_22      // <--                                  // b.eq	.LBB3_22

LBB3_14:
	ANDW $255, R11, R13 // <--                                  // and	w13, w11, #0xff
	CMPW $8, R13        // <--                                  // cmp	w13, #8
	BNE  LBB3_16        // <--                                  // b.ne	.LBB3_16
	MOVW ZR, R11        // <--                                  // mov	w11, wzr
	WORD $0x3840140c    // MOVBU.P 1(R0), R12                   // ldrb	w12, [x0], #1

LBB3_16:
	LSRW  R11, R12, R13     // <--                                  // lsr	w13, w12, w11
	ANDSW $3, R13, R13      // <--                                  // ands	w13, w13, #0x3
	BEQ   LBB3_20           // <--                                  // b.eq	.LBB3_20
	CMPW  $1, R13           // <--                                  // cmp	w13, #1
	BEQ   LBB3_12           // <--                                  // b.eq	.LBB3_12
	CMPW  $2, R13           // <--                                  // cmp	w13, #2
	BNE   LBB3_21           // <--                                  // b.ne	.LBB3_21
	WORD  $0x3940090d       // MOVBU 2(R8), R13                     // ldrb	w13, [x8, #2]
	WORD  $0x7940010e       // MOVHU (R8), R14                      // ldrh	w14, [x8]
	ORRW  R13<<16, R14, R13 // <--                                  // orr	w13, w14, w13, lsl #16
	MOVW  $3, R14           // <--                                  // mov	w14, #3
	JMP   LBB3_13           // <--                                  // b	.LBB3_13

LBB3_20:
	WORD $0x3940010d // MOVBU (R8), R13                      // ldrb	w13, [x8]
	MOVW $1, R14     // <--                                  // mov	w14, #1
	JMP  LBB3_13     // <--                                  // b	.LBB3_13

LBB3_21:
	WORD $0xb940010d // MOVWU (R8), R13                      // ldr	w13, [x8]
	MOVW $4, R14     // <--                                  // mov	w14, #4
	JMP  LBB3_13     // <--                                  // b	.LBB3_13

LBB3_22:
	SUB R4, R9, R11 // <--                                  // sub	x11, x9, x4

LBB3_23:
	ASR  $2, R11, R9    // <--                                  // asr	x9, x11, #2
	CMP  $0, R8         // <--                                  // cmp	x8, #0
	CSEL EQ, ZR, R9, R0 // <--                                  // csel	x0, xzr, x9, eq
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+40(FP) // <--
	RET                 // <--                                  // ret

TEXT Â·svb_decode_zz(SB), NOSPLIT, $0-48
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVD count+24(FP), R3
	MOVD out+32(FP), R4
	CMP  $1, R3            // <--                                  // cmp	x3, #1
	BLT  LBB4_2            // <--                                  // b.lt	.LBB4_2
	ADD  $3, R3, R8        // <--                                  // add	x8, x3, #3
	LSR  $2, R8, R9        // <--                                  // lsr	x9, x8, #2
	CMP  R1, R9            // <--                                  // cmp	x9, x1
	BLS  LBB4_3            // <--                                  // b.ls	.LBB4_3

LBB4_2:
	MOVD ZR, R0         // <--                                  // mov	x0, xzr
	MOVD R0, ret+40(FP) // <--
	RET                 // <--                                  // ret

LBB4_3:
	NOP                                // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADD  R9, R0, R8                    // <--                                  // add	x8, x0, x9
	CMP  $4, R3                        // <--                                  // cmp	x3, #4
	NOP                                // (skipped)                            // mov	x29, sp
	BCC  LBB4_8                        // <--                                  // b.lo	.LBB4_8
	AND  $-16, R1, R10                 // <--                                  // and	x10, x1, #0xfffffffffffffff0
	CMP  R10, R9                       // <--                                  // cmp	x9, x10
	BGE  LBB4_8                        // <--                                  // b.ge	.LBB4_8
	WORD $0x4f000420                   // VMOVI $1, V0.S4                      // movi	v0.4s, #1
	ADD  R10, R0, R10                  // <--                                  // add	x10, x0, x10
	ADD  R3>>2, R0, R11                // <--                                  // add	x11, x0, x3, lsr #2
	MOVD R4, R9                        // <--                                  // mov	x9, x4
	MOVD $shuffleTable_1234<>(SB), R12 // <--                                  // adrp	x12, shuffleTable_1234
	ADD  $0, R12, R12                  // <--                                  // add	x12, x12, :lo12:shuffleTable_1234
	MOVD $lengthTable_1234<>(SB), R13  // <--                                  // adrp	x13, lengthTable_1234
	ADD  $0, R13, R13                  // <--                                  // add	x13, x13, :lo12:lengthTable_1234

LBB4_6:
	WORD $0x3840140e              // MOVBU.P 1(R0), R14                   // ldrb	w14, [x0], #1
	WORD $0x3dc00102              // FMOVQ (R8), F2                       // ldr	q2, [x8]
	CMP  R11, R0                  // <--                                  // cmp	x0, x11
	WORD $0x3cee7981              // FMOVQ (R12)(R14<<4), F1              // ldr	q1, [x12, x14, lsl #4]
	WORD $0x386e69ae              // MOVBU (R13)(R14), R14                // ldrb	w14, [x13, x14]
	VTBL V1.B16, [V2.B16], V1.B16 // <--                                  // tbl	v1.16b, { v2.16b }, v1.16b
	ADD  R14, R8, R8              // <--                                  // add	x8, x8, x14
	WORD $0x6f3f0422              // VUSHR $1, V1.S4, V2.S4               // ushr	v2.4s, v1.4s, #1
	VAND V0.B16, V1.B16, V1.B16   // <--                                  // and	v1.16b, v1.16b, v0.16b
	WORD $0x6ea0b821              // VNEG V1.S4, V1.S4                    // neg	v1.4s, v1.4s
	VEOR V1.B16, V2.B16, V1.B16   // <--                                  // eor	v1.16b, v2.16b, v1.16b
	WORD $0x3c810521              // FMOVQ.P F1, 16(R9)                   // str	q1, [x9], #16
	BCS  LBB4_9                   // <--                                  // b.hs	.LBB4_9
	CMP  R10, R8                  // <--                                  // cmp	x8, x10
	BCC  LBB4_6                   // <--                                  // b.lo	.LBB4_6
	JMP  LBB4_9                   // <--                                  // b	.LBB4_9

LBB4_8:
	MOVD R4, R9 // <--                                  // mov	x9, x4

LBB4_9:
	SUB  R4, R9, R11  // <--                                  // sub	x11, x9, x4
	CBZ  R8, LBB4_23  // <--                                  // cbz	x8, .LBB4_23
	LSR  $2, R11, R10 // <--                                  // lsr	x10, x11, #2
	SUBW R10, R3, R10 // <--                                  // sub	w10, w3, w10
	CBZW R10, LBB4_23 // <--                                  // cbz	w10, .LBB4_23
	MOVW ZR, R11      // <--                                  // mov	w11, wzr
	WORD $0x3840140c  // MOVBU.P 1(R0), R12                   // ldrb	w12, [x0], #1
	JMP  LBB4_14      // <--                                  // b	.LBB4_14

LBB4_12:
	WORD $0x7940010d // MOVHU (R8), R13                      // ldrh	w13, [x8]
	MOVW $2, R14     // <--                                  // mov	w14, #2

LBB4_13:
	ANDW  $1, R13, R15     // <--                                  // and	w15, w13, #0x1
	ADD   R14, R8, R8      // <--                                  // add	x8, x8, x14
	NEGW  R15, R15         // <--                                  // neg	w15, w15
	ADDW  $2, R11, R11     // <--                                  // add	w11, w11, #2
	EORW  R13>>1, R15, R13 // <--                                  // eor	w13, w15, w13, lsr #1
	SUBSW $1, R10, R10     // <--                                  // subs	w10, w10, #1
	WORD  $0xb800452d      // MOVW.P R13, 4(R9)                    // str	w13, [x9], #4
	BEQ   LBB4_22          // <--                                  // b.eq	.LBB4_22

LBB4_14:
	ANDW $255, R11, R13 // <--                                  // and	w13, w11, #0xff
	CMPW $8, R13        // <--                                  // cmp	w13, #8
	BNE  LBB4_16        // <--                                  // b.ne	.LBB4_16
	MOVW ZR, R11        // <--                                  // mov	w11, wzr
	WORD $0x3840140c    // MOVBU.P 1(R0), R12                   // ldrb	w12, [x0], #1

LBB4_16:
	LSRW  R11, R12, R13     // <--                                  // lsr	w13, w12, w11
	ANDSW $3, R13, R13      // <--                                  // ands	w13, w13, #0x3
	BEQ   LBB4_20           // <--                                  // b.eq	.LBB4_20
	CMPW  $1, R13           // <--                                  // cmp	w13, #1
	BEQ   LBB4_12           // <--                                  // b.eq	.LBB4_12
	CMPW  $2, R13           // <--                                  // cmp	w13, #2
	BNE   LBB4_21           // <--                                  // b.ne	.LBB4_21
	WORD  $0x3940090d       // MOVBU 2(R8), R13                     // ldrb	w13, [x8, #2]
	WORD  $0x7940010e       // MOVHU (R8), R14                      // ldrh	w14, [x8]
	ORRW  R13<<16, R14, R13 // <--                                  // orr	w13, w14, w13, lsl #16
	MOVW  $3, R14           // <--                                  // mov	w14, #3
	JMP   LBB4_13           // <--                                  // b	.LBB4_13

LBB4_20:
	WORD $0x3940010d // MOVBU (R8), R13                      // ldrb	w13, [x8]
	MOVW $1, R14     // <--                                  // mov	w14, #1
	JMP  LBB4_13     // <--                                  // b	.LBB4_13

LBB4_21:
	WORD $0xb940010d // MOVWU (R8), R13                      // ldr	w13, [x8]
	MOVW $4, R14     // <--                                  // mov	w14, #4
	JMP  LBB4_13     // <--                                  // b	.LBB4_13

LBB4_22:
	SUB R4, R9, R11 // <--                                  // sub	x11, x9, x4

LBB4_23:
	ASR  $2, R11, R9    // <--                                  // asr	x9, x11, #2
	CMP  $0, R8         // <--                                  // cmp	x8, #0
	CSEL EQ, ZR, R9, R0 // <--                                  // csel	x0, xzr, x9, eq
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+40(FP) // <--
	RET                 // <--                                  // ret

TEXT Â·svb_decode_alt(SB), NOSPLIT, $0-48
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVD count+24(FP), R3
	MOVD out+32(FP), R4
	CMP  $1, R3            // <--                                  // cmp	x3, #1
	BLT  LBB5_2            // <--                                  // b.lt	.LBB5_2
	ADD  $3, R3, R8        // <--                                  // add	x8, x3, #3
	LSR  $2, R8, R9        // <--                                  // lsr	x9, x8, #2
	CMP  R1, R9            // <--                                  // cmp	x9, x1
	BLS  LBB5_3            // <--                                  // b.ls	.LBB5_3

LBB5_2:
	MOVD ZR, R0         // <--                                  // mov	x0, xzr
	MOVD R0, ret+40(FP) // <--
	RET                 // <--                                  // ret

LBB5_3:
	NOP                                // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADD  R9, R0, R8                    // <--                                  // add	x8, x0, x9
	CMP  $4, R3                        // <--                                  // cmp	x3, #4
	NOP                                // (skipped)                            // mov	x29, sp
	BCC  LBB5_8                        // <--                                  // b.lo	.LBB5_8
	AND  $-16, R1, R10                 // <--                                  // and	x10, x1, #0xfffffffffffffff0
	CMP  R10, R9                       // <--                                  // cmp	x9, x10
	BGE  LBB5_8                        // <--                                  // b.ge	.LBB5_8
	ADD  R10, R0, R10                  // <--                                  // add	x10, x0, x10
	ADD  R3>>2, R0, R11                // <--                                  // add	x11, x0, x3, lsr #2
	MOVD R4, R9                        // <--                                  // mov	x9, x4
	MOVD $lengthTable_0124<>(SB), R12  // <--                                  // adrp	x12, lengthTable_0124
	ADD  $0, R12, R12                  // <--                                  // add	x12, x12, :lo12:lengthTable_0124
	MOVD $shuffleTable_0124<>(SB), R13 // <--                                  // adrp	x13, shuffleTable_0124
	ADD  $0, R13, R13                  // <--                                  // add	x13, x13, :lo12:shuffleTable_0124

LBB5_6:
	WORD $0x3840140e              // MOVBU.P 1(R0), R14                   // ldrb	w14, [x0], #1
	WORD $0x3dc00101              // FMOVQ (R8), F1                       // ldr	q1, [x8]
	CMP  R11, R0                  // <--                                  // cmp	x0, x11
	WORD $0x3cee79a0              // FMOVQ (R13)(R14<<4), F0              // ldr	q0, [x13, x14, lsl #4]
	WORD $0x386e698e              // MOVBU (R12)(R14), R14                // ldrb	w14, [x12, x14]
	VTBL V0.B16, [V1.B16], V0.B16 // <--                                  // tbl	v0.16b, { v1.16b }, v0.16b
	ADD  R14, R8, R8              // <--                                  // add	x8, x8, x14
	WORD $0x3c810520              // FMOVQ.P F0, 16(R9)                   // str	q0, [x9], #16
	BCS  LBB5_9                   // <--                                  // b.hs	.LBB5_9
	CMP  R10, R8                  // <--                                  // cmp	x8, x10
	BCC  LBB5_6                   // <--                                  // b.lo	.LBB5_6
	JMP  LBB5_9                   // <--                                  // b	.LBB5_9

LBB5_8:
	MOVD R4, R9 // <--                                  // mov	x9, x4

LBB5_9:
	SUB  R4, R9, R11  // <--                                  // sub	x11, x9, x4
	CBZ  R8, LBB5_22  // <--                                  // cbz	x8, .LBB5_22
	LSR  $2, R11, R10 // <--                                  // lsr	x10, x11, #2
	SUBW R10, R3, R10 // <--                                  // sub	w10, w3, w10
	CBZW R10, LBB5_22 // <--                                  // cbz	w10, .LBB5_22
	MOVW ZR, R11      // <--                                  // mov	w11, wzr
	WORD $0x3840140c  // MOVBU.P 1(R0), R12                   // ldrb	w12, [x0], #1
	JMP  LBB5_14      // <--                                  // b	.LBB5_14

LBB5_12:
	WORD $0x3840150d // MOVBU.P 1(R8), R13                   // ldrb	w13, [x8], #1

LBB5_13:
	ADDW  $2, R11, R11 // <--                                  // add	w11, w11, #2
	SUBSW $1, R10, R10 // <--                                  // subs	w10, w10, #1
	WORD  $0xb800452d  // MOVW.P R13, 4(R9)                    // str	w13, [x9], #4
	BEQ   LBB5_21      // <--                                  // b.eq	.LBB5_21

LBB5_14:
	ANDW $255, R11, R13 // <--                                  // and	w13, w11, #0xff
	CMPW $8, R13        // <--                                  // cmp	w13, #8
	BNE  LBB5_16        // <--                                  // b.ne	.LBB5_16
	MOVW ZR, R11        // <--                                  // mov	w11, wzr
	WORD $0x3840140c    // MOVBU.P 1(R0), R12                   // ldrb	w12, [x0], #1

LBB5_16:
	LSRW  R11, R12, R13 // <--                                  // lsr	w13, w12, w11
	ANDSW $3, R13, R13  // <--                                  // ands	w13, w13, #0x3
	BEQ   LBB5_13       // <--                                  // b.eq	.LBB5_13
	CMPW  $1, R13       // <--                                  // cmp	w13, #1
	BEQ   LBB5_12       // <--                                  // b.eq	.LBB5_12
	CMPW  $2, R13       // <--                                  // cmp	w13, #2
	BNE   LBB5_20       // <--                                  // b.ne	.LBB5_20
	WORD  $0x7840250d   // MOVHU.P 2(R8), R13                   // ldrh	w13, [x8], #2
	JMP   LBB5_13       // <--                                  // b	.LBB5_13

LBB5_20:
	WORD $0xb840450d // MOVWU.P 4(R8), R13                   // ldr	w13, [x8], #4
	JMP  LBB5_13     // <--                                  // b	.LBB5_13

LBB5_21:
	SUB R4, R9, R11 // <--                                  // sub	x11, x9, x4

LBB5_22:
	ASR  $2, R11, R9    // <--                                  // asr	x9, x11, #2
	CMP  $0, R8         // <--                                  // cmp	x8, #0
	CSEL EQ, ZR, R9, R0 // <--                                  // csel	x0, xzr, x9, eq
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+40(FP) // <--
	RET                 // <--                                  // ret

DATA LCPI6_0<>+0x00(SB)/8, $0x0004080c0004080c
GLOBL LCPI6_0<>(SB), (RODATA|NOPTR), $8

DATA LCPI6_1<>+0x00(SB)/4, $0x40100401
DATA LCPI6_1<>+0x04(SB)/4, $0x01010101
GLOBL LCPI6_1<>(SB), (RODATA|NOPTR), $8

TEXT Â·svb_delta_encode(SB), NOSPLIT, $0-48
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVW prev+24(FP), R3
	MOVD out+32(FP), R4
	NOP                    // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADDW $3, R1, R8        // <--                                  // add	w8, w1, #3
	CMPW $4, R1            // <--                                  // cmp	w1, #4
	LSRW $2, R8, R8        // <--                                  // lsr	w8, w8, #2
	NOP                    // (skipped)                            // mov	x29, sp
	ADD  R8, R4, R8        // <--                                  // add	x8, x4, x8
	BCS  LBB6_4            // <--                                  // b.hs	.LBB6_4
	MOVW R1, R10           // <--                                  // mov	w10, w1
	MOVD R4, R9            // <--                                  // mov	x9, x4

LBB6_2:
	CBNZW R10, LBB6_8    // <--                                  // cbnz	w10, .LBB6_8
	SUB   R4, R8, R0     // <--                                  // sub	x0, x8, x4
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD  R0, ret+40(FP) // <--
	RET                  // <--                                  // ret

LBB6_4:
	MOVD $LCPI6_0<>(SB), R9   // <--                                  // adrp	x9, .LCPI6_0
	MOVD $LCPI6_1<>(SB), R11  // <--                                  // adrp	x11, .LCPI6_1
	WORD $0x4f000460          // VMOVI $3, V0.S4                      // movi	v0.4s, #3
	LSRW $2, R1, R10          // <--                                  // lsr	w10, w1, #2
	VDUP R3, V3.S4            // <--                                  // dup	v3.4s, w3
	WORD $0xfd400121          // FMOVD (R9), F1                       // ldr	d1, [x9, :lo12:.LCPI6_0]
	MOVD R4, R9               // <--                                  // mov	x9, x4
	WORD $0xfd400162          // FMOVD (R11), F2                      // ldr	d2, [x11, :lo12:.LCPI6_1]
	MOVD $shuf_lut<>(SB), R11 // <--                                  // adrp	x11, shuf_lut
	ADD  $0, R11, R11         // <--                                  // add	x11, x11, :lo12:shuf_lut

LBB6_5:
	WORD  $0x3cc10404                 // FMOVQ.P 16(R0), F4                   // ldr	q4, [x0], #16
	SUBSW $1, R10, R10                // <--                                  // subs	w10, w10, #1
	VEXT  $12, V4.B16, V3.B16, V3.B16 // <--                                  // ext	v3.16b, v3.16b, v4.16b, #12
	VSUB  V3.S4, V4.S4, V3.S4         // <--                                  // sub	v3.4s, v4.4s, v3.4s
	WORD  $0x6ea04865                 // VCLZ V3.S4, V5.S4                    // clz	v5.4s, v3.4s
	WORD  $0x6f3d04a5                 // VUSHR $3, V5.S4, V5.S4               // ushr	v5.4s, v5.4s, #3
	WORD  $0x6ea52c05                 // VUQSUB V5.S4, V0.S4, V5.S4           // uqsub	v5.4s, v0.4s, v5.4s
	VTBL  V1.B8, [V5.B16], V5.B8      // <--                                  // tbl	v5.8b, { v5.16b }, v1.8b
	WORD  $0x0ea29ca5                 // VMUL V2.S2, V5.S2, V5.S2             // mul	v5.2s, v5.2s, v2.2s
	FMOVS F5, R12                     // <--                                  // fmov	w12, s5
	LSRW  $20, R12, R13               // <--                                  // lsr	w13, w12, #20
	LSRW  $24, R12, R12               // <--                                  // lsr	w12, w12, #24
	AND   $1008, R13, R13             // <--                                  // and	x13, x13, #0x3f0
	WORD  $0x3800152c                 // MOVB.P R12, 1(R9)                    // strb	w12, [x9], #1
	WORD  $0x3ced6966                 // FMOVQ (R11)(R13), F6                 // ldr	q6, [x11, x13]
	VMOV  V5.S[1], R13                // <--                                  // mov	w13, v5.s[1]
	VTBL  V6.B16, [V3.B16], V3.B16    // <--                                  // tbl	v3.16b, { v3.16b }, v6.16b
	LSRW  $24, R13, R13               // <--                                  // lsr	w13, w13, #24
	ADD   R13, R8, R13                // <--                                  // add	x13, x8, x13
	WORD  $0x3d800103                 // FMOVQ F3, (R8)                       // str	q3, [x8]
	ADD   $4, R13, R8                 // <--                                  // add	x8, x13, #4
	VMOV  V4.B16, V3.B16              // <--                                  // mov	v3.16b, v4.16b
	BNE   LBB6_5                      // <--                                  // b.ne	.LBB6_5
	ANDW  $3, R1, R10                 // <--                                  // and	w10, w1, #0x3
	CMPW  $4, R1                      // <--                                  // cmp	w1, #4
	BCC   LBB6_2                      // <--                                  // b.lo	.LBB6_2
	CBZW  R10, LBB6_2                 // <--                                  // cbz	w10, .LBB6_2

LBB6_8:
	MOVW ZR, R11 // <--                                  // mov	w11, wzr
	JMP  LBB6_10 // <--                                  // b	.LBB6_10

LBB6_9:
	ADDW  $2, R11, R11 // <--                                  // add	w11, w11, #2
	SUBSW $1, R10, R10 // <--                                  // subs	w10, w10, #1
	WORD  $0x3800151f  // MOVB.P ZR, 1(R8)                     // strb	wzr, [x8], #1
	BEQ   LBB6_12      // <--                                  // b.eq	.LBB6_12

LBB6_10:
	ANDW $255, R11, R12 // <--                                  // and	w12, w11, #0xff
	CMPW $8, R12        // <--                                  // cmp	w12, #8
	BNE  LBB6_9         // <--                                  // b.ne	.LBB6_9
	MOVW ZR, R11        // <--                                  // mov	w11, wzr
	WORD $0x3800153f    // MOVB.P ZR, 1(R9)                     // strb	wzr, [x9], #1
	JMP  LBB6_9         // <--                                  // b	.LBB6_9

LBB6_12:
	WORD $0x3900013f    // MOVB ZR, (R9)                        // strb	wzr, [x9]
	SUB  R4, R8, R0     // <--                                  // sub	x0, x8, x4
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+40(FP) // <--
	RET                 // <--                                  // ret

DATA LCPI7_0<>+0x00(SB)/8, $0x0004080c0004080c
GLOBL LCPI7_0<>(SB), (RODATA|NOPTR), $8

DATA LCPI7_1<>+0x00(SB)/4, $0x40100401
DATA LCPI7_1<>+0x04(SB)/4, $0x01010101
GLOBL LCPI7_1<>(SB), (RODATA|NOPTR), $8

TEXT Â·svb_delta_encode_zz(SB), NOSPLIT, $0-48
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVW prev+24(FP), R3
	MOVD out+32(FP), R4
	NOP                    // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADDW $3, R1, R8        // <--                                  // add	w8, w1, #3
	CMPW $4, R1            // <--                                  // cmp	w1, #4
	LSRW $2, R8, R8        // <--                                  // lsr	w8, w8, #2
	NOP                    // (skipped)                            // mov	x29, sp
	ADD  R8, R4, R8        // <--                                  // add	x8, x4, x8
	BCS  LBB7_4            // <--                                  // b.hs	.LBB7_4
	MOVW R1, R10           // <--                                  // mov	w10, w1
	MOVD R4, R9            // <--                                  // mov	x9, x4

LBB7_2:
	CBNZW R10, LBB7_8    // <--                                  // cbnz	w10, .LBB7_8
	SUB   R4, R8, R0     // <--                                  // sub	x0, x8, x4
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD  R0, ret+40(FP) // <--
	RET                  // <--                                  // ret

LBB7_4:
	MOVD $LCPI7_0<>(SB), R9   // <--                                  // adrp	x9, .LCPI7_0
	MOVD $LCPI7_1<>(SB), R11  // <--                                  // adrp	x11, .LCPI7_1
	WORD $0x4f000460          // VMOVI $3, V0.S4                      // movi	v0.4s, #3
	LSRW $2, R1, R10          // <--                                  // lsr	w10, w1, #2
	VDUP R3, V3.S4            // <--                                  // dup	v3.4s, w3
	WORD $0xfd400121          // FMOVD (R9), F1                       // ldr	d1, [x9, :lo12:.LCPI7_0]
	MOVD R4, R9               // <--                                  // mov	x9, x4
	WORD $0xfd400162          // FMOVD (R11), F2                      // ldr	d2, [x11, :lo12:.LCPI7_1]
	MOVD $shuf_lut<>(SB), R11 // <--                                  // adrp	x11, shuf_lut
	ADD  $0, R11, R11         // <--                                  // add	x11, x11, :lo12:shuf_lut

LBB7_5:
	WORD  $0x3cc10404                 // FMOVQ.P 16(R0), F4                   // ldr	q4, [x0], #16
	SUBSW $1, R10, R10                // <--                                  // subs	w10, w10, #1
	VEXT  $12, V4.B16, V3.B16, V3.B16 // <--                                  // ext	v3.16b, v3.16b, v4.16b, #12
	VSUB  V3.S4, V4.S4, V3.S4         // <--                                  // sub	v3.4s, v4.4s, v3.4s
	VADD  V3.S4, V3.S4, V5.S4         // <--                                  // add	v5.4s, v3.4s, v3.4s
	WORD  $0x4ea0a863                 // VCMLT $0, V3.S4, V3.S4               // cmlt	v3.4s, v3.4s, #0
	VEOR  V3.B16, V5.B16, V3.B16      // <--                                  // eor	v3.16b, v5.16b, v3.16b
	WORD  $0x6ea04865                 // VCLZ V3.S4, V5.S4                    // clz	v5.4s, v3.4s
	WORD  $0x6f3d04a5                 // VUSHR $3, V5.S4, V5.S4               // ushr	v5.4s, v5.4s, #3
	WORD  $0x6ea52c05                 // VUQSUB V5.S4, V0.S4, V5.S4           // uqsub	v5.4s, v0.4s, v5.4s
	VTBL  V1.B8, [V5.B16], V5.B8      // <--                                  // tbl	v5.8b, { v5.16b }, v1.8b
	WORD  $0x0ea29ca5                 // VMUL V2.S2, V5.S2, V5.S2             // mul	v5.2s, v5.2s, v2.2s
	FMOVS F5, R12                     // <--                                  // fmov	w12, s5
	LSRW  $20, R12, R13               // <--                                  // lsr	w13, w12, #20
	LSRW  $24, R12, R12               // <--                                  // lsr	w12, w12, #24
	AND   $1008, R13, R13             // <--                                  // and	x13, x13, #0x3f0
	WORD  $0x3800152c                 // MOVB.P R12, 1(R9)                    // strb	w12, [x9], #1
	WORD  $0x3ced6966                 // FMOVQ (R11)(R13), F6                 // ldr	q6, [x11, x13]
	VMOV  V5.S[1], R13                // <--                                  // mov	w13, v5.s[1]
	VTBL  V6.B16, [V3.B16], V3.B16    // <--                                  // tbl	v3.16b, { v3.16b }, v6.16b
	LSRW  $24, R13, R13               // <--                                  // lsr	w13, w13, #24
	ADD   R13, R8, R13                // <--                                  // add	x13, x8, x13
	WORD  $0x3d800103                 // FMOVQ F3, (R8)                       // str	q3, [x8]
	ADD   $4, R13, R8                 // <--                                  // add	x8, x13, #4
	VMOV  V4.B16, V3.B16              // <--                                  // mov	v3.16b, v4.16b
	BNE   LBB7_5                      // <--                                  // b.ne	.LBB7_5
	ANDW  $3, R1, R10                 // <--                                  // and	w10, w1, #0x3
	CMPW  $4, R1                      // <--                                  // cmp	w1, #4
	BCC   LBB7_2                      // <--                                  // b.lo	.LBB7_2
	CBZW  R10, LBB7_2                 // <--                                  // cbz	w10, .LBB7_2

LBB7_8:
	MOVW ZR, R11 // <--                                  // mov	w11, wzr
	JMP  LBB7_10 // <--                                  // b	.LBB7_10

LBB7_9:
	ADDW  $2, R11, R11 // <--                                  // add	w11, w11, #2
	SUBSW $1, R10, R10 // <--                                  // subs	w10, w10, #1
	WORD  $0x3800151f  // MOVB.P ZR, 1(R8)                     // strb	wzr, [x8], #1
	BEQ   LBB7_12      // <--                                  // b.eq	.LBB7_12

LBB7_10:
	ANDW $255, R11, R12 // <--                                  // and	w12, w11, #0xff
	CMPW $8, R12        // <--                                  // cmp	w12, #8
	BNE  LBB7_9         // <--                                  // b.ne	.LBB7_9
	MOVW ZR, R11        // <--                                  // mov	w11, wzr
	WORD $0x3800153f    // MOVB.P ZR, 1(R9)                     // strb	wzr, [x9], #1
	JMP  LBB7_9         // <--                                  // b	.LBB7_9

LBB7_12:
	WORD $0x3900013f    // MOVB ZR, (R9)                        // strb	wzr, [x9]
	SUB  R4, R8, R0     // <--                                  // sub	x0, x8, x4
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+40(FP) // <--
	RET                 // <--                                  // ret

DATA LCPI8_0<>+0x00(SB)/8, $0xffffff0001020303
DATA LCPI8_0<>+0x08(SB)/8, $0xffffffffffffffff
GLOBL LCPI8_0<>(SB), (RODATA|NOPTR), $16

DATA LCPI8_1<>+0x00(SB)/8, $0x0004080c0004080c
GLOBL LCPI8_1<>(SB), (RODATA|NOPTR), $8

TEXT Â·svb_delta_encode_alt(SB), NOSPLIT, $0-48
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVW prev+24(FP), R3
	MOVD out+32(FP), R4
	NOP                    // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADDW $3, R1, R8        // <--                                  // add	w8, w1, #3
	CMPW $4, R1            // <--                                  // cmp	w1, #4
	LSRW $2, R8, R8        // <--                                  // lsr	w8, w8, #2
	NOP                    // (skipped)                            // mov	x29, sp
	ADD  R8, R4, R8        // <--                                  // add	x8, x4, x8
	BCS  LBB8_2            // <--                                  // b.hs	.LBB8_2
	MOVD R4, R9            // <--                                  // mov	x9, x4
	JMP  LBB8_6            // <--                                  // b	.LBB8_6

LBB8_2:
	MOVD  $LCPI8_1<>(SB), R11                   // <--                                  // adrp	x11, .LCPI8_1
	MOVD  $LCPI8_0<>(SB), R9                    // <--                                  // adrp	x9, .LCPI8_0
	LSRW  $2, R1, R10                           // <--                                  // lsr	w10, w1, #2
	MOVD  $lengthTable_0124<>(SB), R12          // <--                                  // adrp	x12, lengthTable_0124
	ADD   $0, R12, R12                          // <--                                  // add	x12, x12, :lo12:lengthTable_0124
	MOVD  $encodingShuffleTable_0124<>(SB), R13 // <--                                  // adrp	x13, encodingShuffleTable_0124
	ADD   $0, R13, R13                          // <--                                  // add	x13, x13, :lo12:encodingShuffleTable_0124
	WORD  $0xfd400161                           // FMOVD (R11), F1                      // ldr	d1, [x11, :lo12:.LCPI8_1]
	MOVW  $1025, R11                            // <--                                  // mov	w11, #1025
	WORD  $0x3dc00120                           // FMOVQ (R9), F0                       // ldr	q0, [x9, :lo12:.LCPI8_0]
	MOVKW $(16400<<16), R11                     // <--                                  // movk	w11, #16400, lsl #16
	MOVD  R4, R9                                // <--                                  // mov	x9, x4
	VDUP  R3, V2.S4                             // <--                                  // dup	v2.4s, w3
	JMP   LBB8_4                                // <--                                  // b	.LBB8_4

LBB8_3:
	WORD  $0x3cee79a4              // FMOVQ (R13)(R14<<4), F4              // ldr	q4, [x13, x14, lsl #4]
	WORD  $0x386e698e              // MOVBU (R12)(R14), R14                // ldrb	w14, [x12, x14]
	VTBL  V4.B16, [V3.B16], V3.B16 // <--                                  // tbl	v3.16b, { v3.16b }, v4.16b
	WORD  $0x3d800103              // FMOVQ F3, (R8)                       // str	q3, [x8]
	ADD   R14, R8, R8              // <--                                  // add	x8, x8, x14
	ADD   $1, R9, R9               // <--                                  // add	x9, x9, #1
	ADD   $16, R0, R0              // <--                                  // add	x0, x0, #16
	SUBSW $1, R10, R10             // <--                                  // subs	w10, w10, #1
	BEQ   LBB8_6                   // <--                                  // b.eq	.LBB8_6

LBB8_4:
	VMOV  V2.B16, V3.B16              // <--                                  // mov	v3.16b, v2.16b
	WORD  $0x3dc00002                 // FMOVQ (R0), F2                       // ldr	q2, [x0]
	VEXT  $12, V2.B16, V3.B16, V3.B16 // <--                                  // ext	v3.16b, v3.16b, v2.16b, #12
	VSUB  V3.S4, V2.S4, V3.S4         // <--                                  // sub	v3.4s, v2.4s, v3.4s
	WORD  $0x6ea04864                 // VCLZ V3.S4, V4.S4                    // clz	v4.4s, v3.4s
	WORD  $0x6f3d0484                 // VUSHR $3, V4.S4, V4.S4               // ushr	v4.4s, v4.4s, #3
	VTBL  V4.B16, [V0.B16], V4.B16    // <--                                  // tbl	v4.16b, { v0.16b }, v4.16b
	VTBL  V1.B8, [V4.B16], V4.B8      // <--                                  // tbl	v4.8b, { v4.16b }, v1.8b
	FMOVS F4, R14                     // <--                                  // fmov	w14, s4
	MULW  R11, R14, R15               // <--                                  // mul	w15, w14, w11
	LSR   $24, R15, R14               // <--                                  // lsr	x14, x15, #24
	LSRW  $24, R15, R15               // <--                                  // lsr	w15, w15, #24
	WORD  $0x3900012e                 // MOVB R14, (R9)                       // strb	w14, [x9]
	CBNZW R15, LBB8_3                 // <--                                  // cbnz	w15, .LBB8_3
	MOVD  ZR, R14                     // <--                                  // mov	x14, xzr
	ADD   ZR, R8, R8                  // <--                                  // add	x8, x8, xzr
	ADD   $1, R9, R9                  // <--                                  // add	x9, x9, #1
	ADD   $16, R0, R0                 // <--                                  // add	x0, x0, #16
	SUBSW $1, R10, R10                // <--                                  // subs	w10, w10, #1
	BNE   LBB8_4                      // <--                                  // b.ne	.LBB8_4

LBB8_6:
	TSTW $3, R1      // <--                                  // tst	w1, #0x3
	BEQ  LBB8_8      // <--                                  // b.eq	.LBB8_8
	WORD $0x3900013f // MOVB ZR, (R9)                        // strb	wzr, [x9]

LBB8_8:
	SUB  R4, R8, R0     // <--                                  // sub	x0, x8, x4
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+40(FP) // <--
	RET                 // <--                                  // ret

TEXT Â·svb_delta_decode(SB), NOSPLIT, $0-56
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVD count+24(FP), R3
	MOVW prev+32(FP), R4
	MOVD out+40(FP), R5
	CMP  $1, R3            // <--                                  // cmp	x3, #1
	BLT  LBB9_2            // <--                                  // b.lt	.LBB9_2
	ADD  $3, R3, R8        // <--                                  // add	x8, x3, #3
	LSR  $2, R8, R9        // <--                                  // lsr	x9, x8, #2
	CMP  R1, R9            // <--                                  // cmp	x9, x1
	BLS  LBB9_3            // <--                                  // b.ls	.LBB9_3

LBB9_2:
	MOVD ZR, R0         // <--                                  // mov	x0, xzr
	MOVD R0, ret+48(FP) // <--
	RET                 // <--                                  // ret

LBB9_3:
	NOP                                // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADD  R9, R0, R8                    // <--                                  // add	x8, x0, x9
	CMP  $4, R3                        // <--                                  // cmp	x3, #4
	NOP                                // (skipped)                            // mov	x29, sp
	BCC  LBB9_10                       // <--                                  // b.lo	.LBB9_10
	AND  $-16, R1, R10                 // <--                                  // and	x10, x1, #0xfffffffffffffff0
	CMP  R10, R9                       // <--                                  // cmp	x9, x10
	BGE  LBB9_10                       // <--                                  // b.ge	.LBB9_10
	WORD $0x6f00e400                   // VMOVI $0, V0.D2                      // movi	v0.2d, #0000000000000000
	ADD  R10, R0, R10                  // <--                                  // add	x10, x0, x10
	ADD  R3>>2, R0, R11                // <--                                  // add	x11, x0, x3, lsr #2
	MOVD R5, R9                        // <--                                  // mov	x9, x5
	MOVD $shuffleTable_1234<>(SB), R12 // <--                                  // adrp	x12, shuffleTable_1234
	ADD  $0, R12, R12                  // <--                                  // add	x12, x12, :lo12:shuffleTable_1234
	MOVD $lengthTable_1234<>(SB), R13  // <--                                  // adrp	x13, lengthTable_1234
	ADD  $0, R13, R13                  // <--                                  // add	x13, x13, :lo12:lengthTable_1234
	VDUP R4, V1.S4                     // <--                                  // dup	v1.4s, w4

LBB9_6:
	WORD $0x3840140e                 // MOVBU.P 1(R0), R14                   // ldrb	w14, [x0], #1
	WORD $0x3dc00103                 // FMOVQ (R8), F3                       // ldr	q3, [x8]
	VDUP V1.S[3], V1.S4              // <--                                  // dup	v1.4s, v1.s[3]
	CMP  R11, R0                     // <--                                  // cmp	x0, x11
	WORD $0x3cee7982                 // FMOVQ (R12)(R14<<4), F2              // ldr	q2, [x12, x14, lsl #4]
	WORD $0x386e69ae                 // MOVBU (R13)(R14), R14                // ldrb	w14, [x13, x14]
	VTBL V2.B16, [V3.B16], V2.B16    // <--                                  // tbl	v2.16b, { v3.16b }, v2.16b
	ADD  R14, R8, R8                 // <--                                  // add	x8, x8, x14
	VEXT $12, V2.B16, V0.B16, V3.B16 // <--                                  // ext	v3.16b, v0.16b, v2.16b, #12
	VADD V2.S4, V3.S4, V2.S4         // <--                                  // add	v2.4s, v3.4s, v2.4s
	VEXT $8, V2.B16, V0.B16, V3.B16  // <--                                  // ext	v3.16b, v0.16b, v2.16b, #8
	VADD V1.S4, V2.S4, V1.S4         // <--                                  // add	v1.4s, v2.4s, v1.4s
	VADD V3.S4, V1.S4, V1.S4         // <--                                  // add	v1.4s, v1.4s, v3.4s
	WORD $0x3c810521                 // FMOVQ.P F1, 16(R9)                   // str	q1, [x9], #16
	BCS  LBB9_8                      // <--                                  // b.hs	.LBB9_8
	CMP  R10, R8                     // <--                                  // cmp	x8, x10
	BCC  LBB9_6                      // <--                                  // b.lo	.LBB9_6

LBB9_8:
	SUB  R5, R9, R10    // <--                                  // sub	x10, x9, x5
	ASR  $2, R10, R10   // <--                                  // asr	x10, x10, #2
	SUB  R10, R3, R3    // <--                                  // sub	x3, x3, x10
	CMP  $1, R3         // <--                                  // cmp	x3, #1
	CCMP GE, R9, R5, $0 // <--                                  // ccmp	x9, x5, #0, ge
	BLS  LBB9_11        // <--                                  // b.ls	.LBB9_11
	WORD $0xb85fc124    // MOVWU -4(R9), R4                     // ldur	w4, [x9, #-4]
	JMP  LBB9_11        // <--                                  // b	.LBB9_11

LBB9_10:
	MOVD ZR, R10 // <--                                  // mov	x10, xzr
	MOVD R5, R9  // <--                                  // mov	x9, x5

LBB9_11:
	CBZ  R8, LBB9_25 // <--                                  // cbz	x8, .LBB9_25
	CBZW R3, LBB9_25 // <--                                  // cbz	w3, .LBB9_25
	MOVW ZR, R10     // <--                                  // mov	w10, wzr
	WORD $0x3840140b // MOVBU.P 1(R0), R11                   // ldrb	w11, [x0], #1
	JMP  LBB9_16     // <--                                  // b	.LBB9_16

LBB9_14:
	WORD $0x7940010c // MOVHU (R8), R12                      // ldrh	w12, [x8]
	MOVW $2, R13     // <--                                  // mov	w13, #2

LBB9_15:
	ADD   R13, R8, R8  // <--                                  // add	x8, x8, x13
	ADDW  R4, R12, R4  // <--                                  // add	w4, w12, w4
	ADDW  $2, R10, R10 // <--                                  // add	w10, w10, #2
	SUBSW $1, R3, R3   // <--                                  // subs	w3, w3, #1
	WORD  $0xb8004524  // MOVW.P R4, 4(R9)                     // str	w4, [x9], #4
	BEQ   LBB9_24      // <--                                  // b.eq	.LBB9_24

LBB9_16:
	ANDW $255, R10, R12 // <--                                  // and	w12, w10, #0xff
	CMPW $8, R12        // <--                                  // cmp	w12, #8
	BNE  LBB9_18        // <--                                  // b.ne	.LBB9_18
	MOVW ZR, R10        // <--                                  // mov	w10, wzr
	WORD $0x3840140b    // MOVBU.P 1(R0), R11                   // ldrb	w11, [x0], #1

LBB9_18:
	LSRW  R10, R11, R12 // <--                                  // lsr	w12, w11, w10
	ANDW  $3, R12, R12  // <--                                  // and	w12, w12, #0x3
	CMPW  $2, R12       // <--                                  // cmp	w12, #2
	BEQ   LBB9_22       // <--                                  // b.eq	.LBB9_22
	CMPW  $1, R12       // <--                                  // cmp	w12, #1
	BEQ   LBB9_14       // <--                                  // b.eq	.LBB9_14
	CBNZW R12, LBB9_23  // <--                                  // cbnz	w12, .LBB9_23
	WORD  $0x3940010c   // MOVBU (R8), R12                      // ldrb	w12, [x8]
	MOVW  $1, R13       // <--                                  // mov	w13, #1
	JMP   LBB9_15       // <--                                  // b	.LBB9_15

LBB9_22:
	WORD $0x3940090c       // MOVBU 2(R8), R12                     // ldrb	w12, [x8, #2]
	WORD $0x7940010d       // MOVHU (R8), R13                      // ldrh	w13, [x8]
	ORRW R12<<16, R13, R12 // <--                                  // orr	w12, w13, w12, lsl #16
	MOVW $3, R13           // <--                                  // mov	w13, #3
	JMP  LBB9_15           // <--                                  // b	.LBB9_15

LBB9_23:
	WORD $0xb940010c // MOVWU (R8), R12                      // ldr	w12, [x8]
	MOVW $4, R13     // <--                                  // mov	w13, #4
	JMP  LBB9_15     // <--                                  // b	.LBB9_15

LBB9_24:
	SUB R5, R9, R9  // <--                                  // sub	x9, x9, x5
	ASR $2, R9, R10 // <--                                  // asr	x10, x9, #2

LBB9_25:
	CMP  $0, R8          // <--                                  // cmp	x8, #0
	CSEL EQ, ZR, R10, R0 // <--                                  // csel	x0, xzr, x10, eq
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+48(FP)  // <--
	RET                  // <--                                  // ret

DATA shuf_lut<>+0x00(SB)/8, $0xff0f0e0d0c080400
DATA shuf_lut<>+0x08(SB)/8, $0xffffffffffffffff
DATA shuf_lut<>+0x10(SB)/8, $0x0f0e0d0c08040100
DATA shuf_lut<>+0x18(SB)/8, $0xffffffffffffffff
DATA shuf_lut<>+0x20(SB)/8, $0x0e0d0c0804020100
DATA shuf_lut<>+0x28(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x30(SB)/8, $0x0d0c080403020100
DATA shuf_lut<>+0x38(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x40(SB)/8, $0x0f0e0d0c08050400
DATA shuf_lut<>+0x48(SB)/8, $0xffffffffffffffff
DATA shuf_lut<>+0x50(SB)/8, $0x0e0d0c0805040100
DATA shuf_lut<>+0x58(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x60(SB)/8, $0x0d0c080504020100
DATA shuf_lut<>+0x68(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x70(SB)/8, $0x0c08050403020100
DATA shuf_lut<>+0x78(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x80(SB)/8, $0x0e0d0c0806050400
DATA shuf_lut<>+0x88(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x90(SB)/8, $0x0d0c080605040100
DATA shuf_lut<>+0x98(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0xa0(SB)/8, $0x0c08060504020100
DATA shuf_lut<>+0xa8(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0xb0(SB)/8, $0x0806050403020100
DATA shuf_lut<>+0xb8(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0xc0(SB)/8, $0x0d0c080706050400
DATA shuf_lut<>+0xc8(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0xd0(SB)/8, $0x0c08070605040100
DATA shuf_lut<>+0xd8(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0xe0(SB)/8, $0x0807060504020100
DATA shuf_lut<>+0xe8(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0xf0(SB)/8, $0x0706050403020100
DATA shuf_lut<>+0xf8(SB)/8, $0xffffff0f0e0d0c08
DATA shuf_lut<>+0x100(SB)/8, $0x0f0e0d0c09080400
DATA shuf_lut<>+0x108(SB)/8, $0xffffffffffffffff
DATA shuf_lut<>+0x110(SB)/8, $0x0e0d0c0908040100
DATA shuf_lut<>+0x118(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x120(SB)/8, $0x0d0c090804020100
DATA shuf_lut<>+0x128(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x130(SB)/8, $0x0c09080403020100
DATA shuf_lut<>+0x138(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x140(SB)/8, $0x0e0d0c0908050400
DATA shuf_lut<>+0x148(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x150(SB)/8, $0x0d0c090805040100
DATA shuf_lut<>+0x158(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x160(SB)/8, $0x0c09080504020100
DATA shuf_lut<>+0x168(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x170(SB)/8, $0x0908050403020100
DATA shuf_lut<>+0x178(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x180(SB)/8, $0x0d0c090806050400
DATA shuf_lut<>+0x188(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x190(SB)/8, $0x0c09080605040100
DATA shuf_lut<>+0x198(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x1a0(SB)/8, $0x0908060504020100
DATA shuf_lut<>+0x1a8(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x1b0(SB)/8, $0x0806050403020100
DATA shuf_lut<>+0x1b8(SB)/8, $0xffffff0f0e0d0c09
DATA shuf_lut<>+0x1c0(SB)/8, $0x0c09080706050400
DATA shuf_lut<>+0x1c8(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x1d0(SB)/8, $0x0908070605040100
DATA shuf_lut<>+0x1d8(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x1e0(SB)/8, $0x0807060504020100
DATA shuf_lut<>+0x1e8(SB)/8, $0xffffff0f0e0d0c09
DATA shuf_lut<>+0x1f0(SB)/8, $0x0706050403020100
DATA shuf_lut<>+0x1f8(SB)/8, $0xffff0f0e0d0c0908
DATA shuf_lut<>+0x200(SB)/8, $0x0e0d0c0a09080400
DATA shuf_lut<>+0x208(SB)/8, $0xffffffffffffff0f
DATA shuf_lut<>+0x210(SB)/8, $0x0d0c0a0908040100
DATA shuf_lut<>+0x218(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x220(SB)/8, $0x0c0a090804020100
DATA shuf_lut<>+0x228(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x230(SB)/8, $0x0a09080403020100
DATA shuf_lut<>+0x238(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x240(SB)/8, $0x0d0c0a0908050400
DATA shuf_lut<>+0x248(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x250(SB)/8, $0x0c0a090805040100
DATA shuf_lut<>+0x258(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x260(SB)/8, $0x0a09080504020100
DATA shuf_lut<>+0x268(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x270(SB)/8, $0x0908050403020100
DATA shuf_lut<>+0x278(SB)/8, $0xffffff0f0e0d0c0a
DATA shuf_lut<>+0x280(SB)/8, $0x0c0a090806050400
DATA shuf_lut<>+0x288(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x290(SB)/8, $0x0a09080605040100
DATA shuf_lut<>+0x298(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x2a0(SB)/8, $0x0908060504020100
DATA shuf_lut<>+0x2a8(SB)/8, $0xffffff0f0e0d0c0a
DATA shuf_lut<>+0x2b0(SB)/8, $0x0806050403020100
DATA shuf_lut<>+0x2b8(SB)/8, $0xffff0f0e0d0c0a09
DATA shuf_lut<>+0x2c0(SB)/8, $0x0a09080706050400
DATA shuf_lut<>+0x2c8(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x2d0(SB)/8, $0x0908070605040100
DATA shuf_lut<>+0x2d8(SB)/8, $0xffffff0f0e0d0c0a
DATA shuf_lut<>+0x2e0(SB)/8, $0x0807060504020100
DATA shuf_lut<>+0x2e8(SB)/8, $0xffff0f0e0d0c0a09
DATA shuf_lut<>+0x2f0(SB)/8, $0x0706050403020100
DATA shuf_lut<>+0x2f8(SB)/8, $0xff0f0e0d0c0a0908
DATA shuf_lut<>+0x300(SB)/8, $0x0d0c0b0a09080400
DATA shuf_lut<>+0x308(SB)/8, $0xffffffffffff0f0e
DATA shuf_lut<>+0x310(SB)/8, $0x0c0b0a0908040100
DATA shuf_lut<>+0x318(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x320(SB)/8, $0x0b0a090804020100
DATA shuf_lut<>+0x328(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x330(SB)/8, $0x0a09080403020100
DATA shuf_lut<>+0x338(SB)/8, $0xffffff0f0e0d0c0b
DATA shuf_lut<>+0x340(SB)/8, $0x0c0b0a0908050400
DATA shuf_lut<>+0x348(SB)/8, $0xffffffffff0f0e0d
DATA shuf_lut<>+0x350(SB)/8, $0x0b0a090805040100
DATA shuf_lut<>+0x358(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x360(SB)/8, $0x0a09080504020100
DATA shuf_lut<>+0x368(SB)/8, $0xffffff0f0e0d0c0b
DATA shuf_lut<>+0x370(SB)/8, $0x0908050403020100
DATA shuf_lut<>+0x378(SB)/8, $0xffff0f0e0d0c0b0a
DATA shuf_lut<>+0x380(SB)/8, $0x0b0a090806050400
DATA shuf_lut<>+0x388(SB)/8, $0xffffffff0f0e0d0c
DATA shuf_lut<>+0x390(SB)/8, $0x0a09080605040100
DATA shuf_lut<>+0x398(SB)/8, $0xffffff0f0e0d0c0b
DATA shuf_lut<>+0x3a0(SB)/8, $0x0908060504020100
DATA shuf_lut<>+0x3a8(SB)/8, $0xffff0f0e0d0c0b0a
DATA shuf_lut<>+0x3b0(SB)/8, $0x0806050403020100
DATA shuf_lut<>+0x3b8(SB)/8, $0xff0f0e0d0c0b0a09
DATA shuf_lut<>+0x3c0(SB)/8, $0x0a09080706050400
DATA shuf_lut<>+0x3c8(SB)/8, $0xffffff0f0e0d0c0b
DATA shuf_lut<>+0x3d0(SB)/8, $0x0908070605040100
DATA shuf_lut<>+0x3d8(SB)/8, $0xffff0f0e0d0c0b0a
DATA shuf_lut<>+0x3e0(SB)/8, $0x0807060504020100
DATA shuf_lut<>+0x3e8(SB)/8, $0xff0f0e0d0c0b0a09
DATA shuf_lut<>+0x3f0(SB)/8, $0x0706050403020100
DATA shuf_lut<>+0x3f8(SB)/8, $0x0f0e0d0c0b0a0908
GLOBL shuf_lut<>(SB), (RODATA|NOPTR), $1024

DATA lengthTable_0124<>+0x00(SB)/8, $0x0503020104020100
DATA lengthTable_0124<>+0x08(SB)/8, $0x0806050406040302
DATA lengthTable_0124<>+0x10(SB)/8, $0x0604030205030201
DATA lengthTable_0124<>+0x18(SB)/8, $0x0907060507050403
DATA lengthTable_0124<>+0x20(SB)/8, $0x0705040306040302
DATA lengthTable_0124<>+0x28(SB)/8, $0x0a08070608060504
DATA lengthTable_0124<>+0x30(SB)/8, $0x0907060508060504
DATA lengthTable_0124<>+0x38(SB)/8, $0x0c0a09080a080706
DATA lengthTable_0124<>+0x40(SB)/8, $0x0604030205030201
DATA lengthTable_0124<>+0x48(SB)/8, $0x0907060507050403
DATA lengthTable_0124<>+0x50(SB)/8, $0x0705040306040302
DATA lengthTable_0124<>+0x58(SB)/8, $0x0a08070608060504
DATA lengthTable_0124<>+0x60(SB)/8, $0x0806050407050403
DATA lengthTable_0124<>+0x68(SB)/8, $0x0b09080709070605
DATA lengthTable_0124<>+0x70(SB)/8, $0x0a08070609070605
DATA lengthTable_0124<>+0x78(SB)/8, $0x0d0b0a090b090807
DATA lengthTable_0124<>+0x80(SB)/8, $0x0705040306040302
DATA lengthTable_0124<>+0x88(SB)/8, $0x0a08070608060504
DATA lengthTable_0124<>+0x90(SB)/8, $0x0806050407050403
DATA lengthTable_0124<>+0x98(SB)/8, $0x0b09080709070605
DATA lengthTable_0124<>+0xa0(SB)/8, $0x0907060508060504
DATA lengthTable_0124<>+0xa8(SB)/8, $0x0c0a09080a080706
DATA lengthTable_0124<>+0xb0(SB)/8, $0x0b0908070a080706
DATA lengthTable_0124<>+0xb8(SB)/8, $0x0e0c0b0a0c0a0908
DATA lengthTable_0124<>+0xc0(SB)/8, $0x0907060508060504
DATA lengthTable_0124<>+0xc8(SB)/8, $0x0c0a09080a080706
DATA lengthTable_0124<>+0xd0(SB)/8, $0x0a08070609070605
DATA lengthTable_0124<>+0xd8(SB)/8, $0x0d0b0a090b090807
DATA lengthTable_0124<>+0xe0(SB)/8, $0x0b0908070a080706
DATA lengthTable_0124<>+0xe8(SB)/8, $0x0e0c0b0a0c0a0908
DATA lengthTable_0124<>+0xf0(SB)/8, $0x0d0b0a090c0a0908
DATA lengthTable_0124<>+0xf8(SB)/8, $0x100e0d0c0e0c0b0a
GLOBL lengthTable_0124<>(SB), (RODATA|NOPTR), $256

DATA encodingShuffleTable_0124<>+0x00(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x10(SB)/8, $0xffffffffffffff00
DATA encodingShuffleTable_0124<>+0x18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x20(SB)/8, $0xffffffffffff0100
DATA encodingShuffleTable_0124<>+0x28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x30(SB)/8, $0xffffffff03020100
DATA encodingShuffleTable_0124<>+0x38(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x40(SB)/8, $0xffffffffffffff04
DATA encodingShuffleTable_0124<>+0x48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x50(SB)/8, $0xffffffffffff0400
DATA encodingShuffleTable_0124<>+0x58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x60(SB)/8, $0xffffffffff040100
DATA encodingShuffleTable_0124<>+0x68(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x70(SB)/8, $0xffffff0403020100
DATA encodingShuffleTable_0124<>+0x78(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x80(SB)/8, $0xffffffffffff0504
DATA encodingShuffleTable_0124<>+0x88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x90(SB)/8, $0xffffffffff050400
DATA encodingShuffleTable_0124<>+0x98(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa0(SB)/8, $0xffffffff05040100
DATA encodingShuffleTable_0124<>+0xa8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb0(SB)/8, $0xffff050403020100
DATA encodingShuffleTable_0124<>+0xb8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc0(SB)/8, $0xffffffff07060504
DATA encodingShuffleTable_0124<>+0xc8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd0(SB)/8, $0xffffff0706050400
DATA encodingShuffleTable_0124<>+0xd8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe0(SB)/8, $0xffff070605040100
DATA encodingShuffleTable_0124<>+0xe8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xf0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xf8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x100(SB)/8, $0xffffffffffffff08
DATA encodingShuffleTable_0124<>+0x108(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x110(SB)/8, $0xffffffffffff0800
DATA encodingShuffleTable_0124<>+0x118(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x120(SB)/8, $0xffffffffff080100
DATA encodingShuffleTable_0124<>+0x128(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x130(SB)/8, $0xffffff0803020100
DATA encodingShuffleTable_0124<>+0x138(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x140(SB)/8, $0xffffffffffff0804
DATA encodingShuffleTable_0124<>+0x148(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x150(SB)/8, $0xffffffffff080400
DATA encodingShuffleTable_0124<>+0x158(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x160(SB)/8, $0xffffffff08040100
DATA encodingShuffleTable_0124<>+0x168(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x170(SB)/8, $0xffff080403020100
DATA encodingShuffleTable_0124<>+0x178(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x180(SB)/8, $0xffffffffff080504
DATA encodingShuffleTable_0124<>+0x188(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x190(SB)/8, $0xffffffff08050400
DATA encodingShuffleTable_0124<>+0x198(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1a0(SB)/8, $0xffffff0805040100
DATA encodingShuffleTable_0124<>+0x1a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1b0(SB)/8, $0xff08050403020100
DATA encodingShuffleTable_0124<>+0x1b8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1c0(SB)/8, $0xffffff0807060504
DATA encodingShuffleTable_0124<>+0x1c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1d0(SB)/8, $0xffff080706050400
DATA encodingShuffleTable_0124<>+0x1d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1e0(SB)/8, $0xff08070605040100
DATA encodingShuffleTable_0124<>+0x1e8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x1f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x1f8(SB)/8, $0xffffffffffffff08
DATA encodingShuffleTable_0124<>+0x200(SB)/8, $0xffffffffffff0908
DATA encodingShuffleTable_0124<>+0x208(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x210(SB)/8, $0xffffffffff090800
DATA encodingShuffleTable_0124<>+0x218(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x220(SB)/8, $0xffffffff09080100
DATA encodingShuffleTable_0124<>+0x228(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x230(SB)/8, $0xffff090803020100
DATA encodingShuffleTable_0124<>+0x238(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x240(SB)/8, $0xffffffffff090804
DATA encodingShuffleTable_0124<>+0x248(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x250(SB)/8, $0xffffffff09080400
DATA encodingShuffleTable_0124<>+0x258(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x260(SB)/8, $0xffffff0908040100
DATA encodingShuffleTable_0124<>+0x268(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x270(SB)/8, $0xff09080403020100
DATA encodingShuffleTable_0124<>+0x278(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x280(SB)/8, $0xffffffff09080504
DATA encodingShuffleTable_0124<>+0x288(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x290(SB)/8, $0xffffff0908050400
DATA encodingShuffleTable_0124<>+0x298(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2a0(SB)/8, $0xffff090805040100
DATA encodingShuffleTable_0124<>+0x2a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2b0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0x2b8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2c0(SB)/8, $0xffff090807060504
DATA encodingShuffleTable_0124<>+0x2c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2d0(SB)/8, $0xff09080706050400
DATA encodingShuffleTable_0124<>+0x2d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2e0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0x2e8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x2f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x2f8(SB)/8, $0xffffffffffff0908
DATA encodingShuffleTable_0124<>+0x300(SB)/8, $0xffffffff0b0a0908
DATA encodingShuffleTable_0124<>+0x308(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x310(SB)/8, $0xffffff0b0a090800
DATA encodingShuffleTable_0124<>+0x318(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x320(SB)/8, $0xffff0b0a09080100
DATA encodingShuffleTable_0124<>+0x328(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x330(SB)/8, $0x0b0a090803020100
DATA encodingShuffleTable_0124<>+0x338(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x340(SB)/8, $0xffffff0b0a090804
DATA encodingShuffleTable_0124<>+0x348(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x350(SB)/8, $0xffff0b0a09080400
DATA encodingShuffleTable_0124<>+0x358(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x360(SB)/8, $0xff0b0a0908040100
DATA encodingShuffleTable_0124<>+0x368(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x370(SB)/8, $0x0a09080403020100
DATA encodingShuffleTable_0124<>+0x378(SB)/8, $0xffffffffffffff0b
DATA encodingShuffleTable_0124<>+0x380(SB)/8, $0xffff0b0a09080504
DATA encodingShuffleTable_0124<>+0x388(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x390(SB)/8, $0xff0b0a0908050400
DATA encodingShuffleTable_0124<>+0x398(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x3a0(SB)/8, $0x0b0a090805040100
DATA encodingShuffleTable_0124<>+0x3a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x3b0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0x3b8(SB)/8, $0xffffffffffff0b0a
DATA encodingShuffleTable_0124<>+0x3c0(SB)/8, $0x0b0a090807060504
DATA encodingShuffleTable_0124<>+0x3c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x3d0(SB)/8, $0x0a09080706050400
DATA encodingShuffleTable_0124<>+0x3d8(SB)/8, $0xffffffffffffff0b
DATA encodingShuffleTable_0124<>+0x3e0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0x3e8(SB)/8, $0xffffffffffff0b0a
DATA encodingShuffleTable_0124<>+0x3f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x3f8(SB)/8, $0xffffffff0b0a0908
DATA encodingShuffleTable_0124<>+0x400(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x408(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x410(SB)/8, $0xffffffffffff0c00
DATA encodingShuffleTable_0124<>+0x418(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x420(SB)/8, $0xffffffffff0c0100
DATA encodingShuffleTable_0124<>+0x428(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x430(SB)/8, $0xffffff0c03020100
DATA encodingShuffleTable_0124<>+0x438(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x440(SB)/8, $0xffffffffffff0c04
DATA encodingShuffleTable_0124<>+0x448(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x450(SB)/8, $0xffffffffff0c0400
DATA encodingShuffleTable_0124<>+0x458(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x460(SB)/8, $0xffffffff0c040100
DATA encodingShuffleTable_0124<>+0x468(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x470(SB)/8, $0xffff0c0403020100
DATA encodingShuffleTable_0124<>+0x478(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x480(SB)/8, $0xffffffffff0c0504
DATA encodingShuffleTable_0124<>+0x488(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x490(SB)/8, $0xffffffff0c050400
DATA encodingShuffleTable_0124<>+0x498(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4a0(SB)/8, $0xffffff0c05040100
DATA encodingShuffleTable_0124<>+0x4a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4b0(SB)/8, $0xff0c050403020100
DATA encodingShuffleTable_0124<>+0x4b8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4c0(SB)/8, $0xffffff0c07060504
DATA encodingShuffleTable_0124<>+0x4c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4d0(SB)/8, $0xffff0c0706050400
DATA encodingShuffleTable_0124<>+0x4d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4e0(SB)/8, $0xff0c070605040100
DATA encodingShuffleTable_0124<>+0x4e8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x4f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x4f8(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x500(SB)/8, $0xffffffffffff0c08
DATA encodingShuffleTable_0124<>+0x508(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x510(SB)/8, $0xffffffffff0c0800
DATA encodingShuffleTable_0124<>+0x518(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x520(SB)/8, $0xffffffff0c080100
DATA encodingShuffleTable_0124<>+0x528(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x530(SB)/8, $0xffff0c0803020100
DATA encodingShuffleTable_0124<>+0x538(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x540(SB)/8, $0xffffffffff0c0804
DATA encodingShuffleTable_0124<>+0x548(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x550(SB)/8, $0xffffffff0c080400
DATA encodingShuffleTable_0124<>+0x558(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x560(SB)/8, $0xffffff0c08040100
DATA encodingShuffleTable_0124<>+0x568(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x570(SB)/8, $0xff0c080403020100
DATA encodingShuffleTable_0124<>+0x578(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x580(SB)/8, $0xffffffff0c080504
DATA encodingShuffleTable_0124<>+0x588(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x590(SB)/8, $0xffffff0c08050400
DATA encodingShuffleTable_0124<>+0x598(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5a0(SB)/8, $0xffff0c0805040100
DATA encodingShuffleTable_0124<>+0x5a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5b0(SB)/8, $0x0c08050403020100
DATA encodingShuffleTable_0124<>+0x5b8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5c0(SB)/8, $0xffff0c0807060504
DATA encodingShuffleTable_0124<>+0x5c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5d0(SB)/8, $0xff0c080706050400
DATA encodingShuffleTable_0124<>+0x5d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5e0(SB)/8, $0x0c08070605040100
DATA encodingShuffleTable_0124<>+0x5e8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x5f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x5f8(SB)/8, $0xffffffffffff0c08
DATA encodingShuffleTable_0124<>+0x600(SB)/8, $0xffffffffff0c0908
DATA encodingShuffleTable_0124<>+0x608(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x610(SB)/8, $0xffffffff0c090800
DATA encodingShuffleTable_0124<>+0x618(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x620(SB)/8, $0xffffff0c09080100
DATA encodingShuffleTable_0124<>+0x628(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x630(SB)/8, $0xff0c090803020100
DATA encodingShuffleTable_0124<>+0x638(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x640(SB)/8, $0xffffffff0c090804
DATA encodingShuffleTable_0124<>+0x648(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x650(SB)/8, $0xffffff0c09080400
DATA encodingShuffleTable_0124<>+0x658(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x660(SB)/8, $0xffff0c0908040100
DATA encodingShuffleTable_0124<>+0x668(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x670(SB)/8, $0x0c09080403020100
DATA encodingShuffleTable_0124<>+0x678(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x680(SB)/8, $0xffffff0c09080504
DATA encodingShuffleTable_0124<>+0x688(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x690(SB)/8, $0xffff0c0908050400
DATA encodingShuffleTable_0124<>+0x698(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x6a0(SB)/8, $0xff0c090805040100
DATA encodingShuffleTable_0124<>+0x6a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x6b0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0x6b8(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x6c0(SB)/8, $0xff0c090807060504
DATA encodingShuffleTable_0124<>+0x6c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x6d0(SB)/8, $0x0c09080706050400
DATA encodingShuffleTable_0124<>+0x6d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x6e0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0x6e8(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x6f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x6f8(SB)/8, $0xffffffffff0c0908
DATA encodingShuffleTable_0124<>+0x700(SB)/8, $0xffffff0c0b0a0908
DATA encodingShuffleTable_0124<>+0x708(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x710(SB)/8, $0xffff0c0b0a090800
DATA encodingShuffleTable_0124<>+0x718(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x720(SB)/8, $0xff0c0b0a09080100
DATA encodingShuffleTable_0124<>+0x728(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x730(SB)/8, $0x0b0a090803020100
DATA encodingShuffleTable_0124<>+0x738(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x740(SB)/8, $0xffff0c0b0a090804
DATA encodingShuffleTable_0124<>+0x748(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x750(SB)/8, $0xff0c0b0a09080400
DATA encodingShuffleTable_0124<>+0x758(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x760(SB)/8, $0x0c0b0a0908040100
DATA encodingShuffleTable_0124<>+0x768(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x770(SB)/8, $0x0a09080403020100
DATA encodingShuffleTable_0124<>+0x778(SB)/8, $0xffffffffffff0c0b
DATA encodingShuffleTable_0124<>+0x780(SB)/8, $0xff0c0b0a09080504
DATA encodingShuffleTable_0124<>+0x788(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x790(SB)/8, $0x0c0b0a0908050400
DATA encodingShuffleTable_0124<>+0x798(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x7a0(SB)/8, $0x0b0a090805040100
DATA encodingShuffleTable_0124<>+0x7a8(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x7b0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0x7b8(SB)/8, $0xffffffffff0c0b0a
DATA encodingShuffleTable_0124<>+0x7c0(SB)/8, $0x0b0a090807060504
DATA encodingShuffleTable_0124<>+0x7c8(SB)/8, $0xffffffffffffff0c
DATA encodingShuffleTable_0124<>+0x7d0(SB)/8, $0x0a09080706050400
DATA encodingShuffleTable_0124<>+0x7d8(SB)/8, $0xffffffffffff0c0b
DATA encodingShuffleTable_0124<>+0x7e0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0x7e8(SB)/8, $0xffffffffff0c0b0a
DATA encodingShuffleTable_0124<>+0x7f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x7f8(SB)/8, $0xffffff0c0b0a0908
DATA encodingShuffleTable_0124<>+0x800(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0x808(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x810(SB)/8, $0xffffffffff0d0c00
DATA encodingShuffleTable_0124<>+0x818(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x820(SB)/8, $0xffffffff0d0c0100
DATA encodingShuffleTable_0124<>+0x828(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x830(SB)/8, $0xffff0d0c03020100
DATA encodingShuffleTable_0124<>+0x838(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x840(SB)/8, $0xffffffffff0d0c04
DATA encodingShuffleTable_0124<>+0x848(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x850(SB)/8, $0xffffffff0d0c0400
DATA encodingShuffleTable_0124<>+0x858(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x860(SB)/8, $0xffffff0d0c040100
DATA encodingShuffleTable_0124<>+0x868(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x870(SB)/8, $0xff0d0c0403020100
DATA encodingShuffleTable_0124<>+0x878(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x880(SB)/8, $0xffffffff0d0c0504
DATA encodingShuffleTable_0124<>+0x888(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x890(SB)/8, $0xffffff0d0c050400
DATA encodingShuffleTable_0124<>+0x898(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8a0(SB)/8, $0xffff0d0c05040100
DATA encodingShuffleTable_0124<>+0x8a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8b0(SB)/8, $0x0d0c050403020100
DATA encodingShuffleTable_0124<>+0x8b8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8c0(SB)/8, $0xffff0d0c07060504
DATA encodingShuffleTable_0124<>+0x8c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8d0(SB)/8, $0xff0d0c0706050400
DATA encodingShuffleTable_0124<>+0x8d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8e0(SB)/8, $0x0d0c070605040100
DATA encodingShuffleTable_0124<>+0x8e8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x8f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x8f8(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0x900(SB)/8, $0xffffffffff0d0c08
DATA encodingShuffleTable_0124<>+0x908(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x910(SB)/8, $0xffffffff0d0c0800
DATA encodingShuffleTable_0124<>+0x918(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x920(SB)/8, $0xffffff0d0c080100
DATA encodingShuffleTable_0124<>+0x928(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x930(SB)/8, $0xff0d0c0803020100
DATA encodingShuffleTable_0124<>+0x938(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x940(SB)/8, $0xffffffff0d0c0804
DATA encodingShuffleTable_0124<>+0x948(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x950(SB)/8, $0xffffff0d0c080400
DATA encodingShuffleTable_0124<>+0x958(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x960(SB)/8, $0xffff0d0c08040100
DATA encodingShuffleTable_0124<>+0x968(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x970(SB)/8, $0x0d0c080403020100
DATA encodingShuffleTable_0124<>+0x978(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x980(SB)/8, $0xffffff0d0c080504
DATA encodingShuffleTable_0124<>+0x988(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x990(SB)/8, $0xffff0d0c08050400
DATA encodingShuffleTable_0124<>+0x998(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x9a0(SB)/8, $0xff0d0c0805040100
DATA encodingShuffleTable_0124<>+0x9a8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x9b0(SB)/8, $0x0c08050403020100
DATA encodingShuffleTable_0124<>+0x9b8(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0x9c0(SB)/8, $0xff0d0c0807060504
DATA encodingShuffleTable_0124<>+0x9c8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x9d0(SB)/8, $0x0d0c080706050400
DATA encodingShuffleTable_0124<>+0x9d8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0x9e0(SB)/8, $0x0c08070605040100
DATA encodingShuffleTable_0124<>+0x9e8(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0x9f0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0x9f8(SB)/8, $0xffffffffff0d0c08
DATA encodingShuffleTable_0124<>+0xa00(SB)/8, $0xffffffff0d0c0908
DATA encodingShuffleTable_0124<>+0xa08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa10(SB)/8, $0xffffff0d0c090800
DATA encodingShuffleTable_0124<>+0xa18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa20(SB)/8, $0xffff0d0c09080100
DATA encodingShuffleTable_0124<>+0xa28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa30(SB)/8, $0x0d0c090803020100
DATA encodingShuffleTable_0124<>+0xa38(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa40(SB)/8, $0xffffff0d0c090804
DATA encodingShuffleTable_0124<>+0xa48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa50(SB)/8, $0xffff0d0c09080400
DATA encodingShuffleTable_0124<>+0xa58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa60(SB)/8, $0xff0d0c0908040100
DATA encodingShuffleTable_0124<>+0xa68(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa70(SB)/8, $0x0c09080403020100
DATA encodingShuffleTable_0124<>+0xa78(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0xa80(SB)/8, $0xffff0d0c09080504
DATA encodingShuffleTable_0124<>+0xa88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xa90(SB)/8, $0xff0d0c0908050400
DATA encodingShuffleTable_0124<>+0xa98(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xaa0(SB)/8, $0x0d0c090805040100
DATA encodingShuffleTable_0124<>+0xaa8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xab0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0xab8(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0xac0(SB)/8, $0x0d0c090807060504
DATA encodingShuffleTable_0124<>+0xac8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xad0(SB)/8, $0x0c09080706050400
DATA encodingShuffleTable_0124<>+0xad8(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0xae0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0xae8(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0xaf0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xaf8(SB)/8, $0xffffffff0d0c0908
DATA encodingShuffleTable_0124<>+0xb00(SB)/8, $0xffff0d0c0b0a0908
DATA encodingShuffleTable_0124<>+0xb08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb10(SB)/8, $0xff0d0c0b0a090800
DATA encodingShuffleTable_0124<>+0xb18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb20(SB)/8, $0x0d0c0b0a09080100
DATA encodingShuffleTable_0124<>+0xb28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb30(SB)/8, $0x0b0a090803020100
DATA encodingShuffleTable_0124<>+0xb38(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0xb40(SB)/8, $0xff0d0c0b0a090804
DATA encodingShuffleTable_0124<>+0xb48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb50(SB)/8, $0x0d0c0b0a09080400
DATA encodingShuffleTable_0124<>+0xb58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb60(SB)/8, $0x0c0b0a0908040100
DATA encodingShuffleTable_0124<>+0xb68(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0xb70(SB)/8, $0x0a09080403020100
DATA encodingShuffleTable_0124<>+0xb78(SB)/8, $0xffffffffff0d0c0b
DATA encodingShuffleTable_0124<>+0xb80(SB)/8, $0x0d0c0b0a09080504
DATA encodingShuffleTable_0124<>+0xb88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xb90(SB)/8, $0x0c0b0a0908050400
DATA encodingShuffleTable_0124<>+0xb98(SB)/8, $0xffffffffffffff0d
DATA encodingShuffleTable_0124<>+0xba0(SB)/8, $0x0b0a090805040100
DATA encodingShuffleTable_0124<>+0xba8(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0xbb0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0xbb8(SB)/8, $0xffffffff0d0c0b0a
DATA encodingShuffleTable_0124<>+0xbc0(SB)/8, $0x0b0a090807060504
DATA encodingShuffleTable_0124<>+0xbc8(SB)/8, $0xffffffffffff0d0c
DATA encodingShuffleTable_0124<>+0xbd0(SB)/8, $0x0a09080706050400
DATA encodingShuffleTable_0124<>+0xbd8(SB)/8, $0xffffffffff0d0c0b
DATA encodingShuffleTable_0124<>+0xbe0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0xbe8(SB)/8, $0xffffffff0d0c0b0a
DATA encodingShuffleTable_0124<>+0xbf0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xbf8(SB)/8, $0xffff0d0c0b0a0908
DATA encodingShuffleTable_0124<>+0xc00(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xc08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc10(SB)/8, $0xffffff0f0e0d0c00
DATA encodingShuffleTable_0124<>+0xc18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc20(SB)/8, $0xffff0f0e0d0c0100
DATA encodingShuffleTable_0124<>+0xc28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc30(SB)/8, $0x0f0e0d0c03020100
DATA encodingShuffleTable_0124<>+0xc38(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc40(SB)/8, $0xffffff0f0e0d0c04
DATA encodingShuffleTable_0124<>+0xc48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc50(SB)/8, $0xffff0f0e0d0c0400
DATA encodingShuffleTable_0124<>+0xc58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc60(SB)/8, $0xff0f0e0d0c040100
DATA encodingShuffleTable_0124<>+0xc68(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc70(SB)/8, $0x0e0d0c0403020100
DATA encodingShuffleTable_0124<>+0xc78(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xc80(SB)/8, $0xffff0f0e0d0c0504
DATA encodingShuffleTable_0124<>+0xc88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xc90(SB)/8, $0xff0f0e0d0c050400
DATA encodingShuffleTable_0124<>+0xc98(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xca0(SB)/8, $0x0f0e0d0c05040100
DATA encodingShuffleTable_0124<>+0xca8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xcb0(SB)/8, $0x0d0c050403020100
DATA encodingShuffleTable_0124<>+0xcb8(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xcc0(SB)/8, $0x0f0e0d0c07060504
DATA encodingShuffleTable_0124<>+0xcc8(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xcd0(SB)/8, $0x0e0d0c0706050400
DATA encodingShuffleTable_0124<>+0xcd8(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xce0(SB)/8, $0x0d0c070605040100
DATA encodingShuffleTable_0124<>+0xce8(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xcf0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xcf8(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xd00(SB)/8, $0xffffff0f0e0d0c08
DATA encodingShuffleTable_0124<>+0xd08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd10(SB)/8, $0xffff0f0e0d0c0800
DATA encodingShuffleTable_0124<>+0xd18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd20(SB)/8, $0xff0f0e0d0c080100
DATA encodingShuffleTable_0124<>+0xd28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd30(SB)/8, $0x0e0d0c0803020100
DATA encodingShuffleTable_0124<>+0xd38(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xd40(SB)/8, $0xffff0f0e0d0c0804
DATA encodingShuffleTable_0124<>+0xd48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd50(SB)/8, $0xff0f0e0d0c080400
DATA encodingShuffleTable_0124<>+0xd58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd60(SB)/8, $0x0f0e0d0c08040100
DATA encodingShuffleTable_0124<>+0xd68(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd70(SB)/8, $0x0d0c080403020100
DATA encodingShuffleTable_0124<>+0xd78(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xd80(SB)/8, $0xff0f0e0d0c080504
DATA encodingShuffleTable_0124<>+0xd88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xd90(SB)/8, $0x0f0e0d0c08050400
DATA encodingShuffleTable_0124<>+0xd98(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xda0(SB)/8, $0x0e0d0c0805040100
DATA encodingShuffleTable_0124<>+0xda8(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xdb0(SB)/8, $0x0c08050403020100
DATA encodingShuffleTable_0124<>+0xdb8(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xdc0(SB)/8, $0x0e0d0c0807060504
DATA encodingShuffleTable_0124<>+0xdc8(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xdd0(SB)/8, $0x0d0c080706050400
DATA encodingShuffleTable_0124<>+0xdd8(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xde0(SB)/8, $0x0c08070605040100
DATA encodingShuffleTable_0124<>+0xde8(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xdf0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xdf8(SB)/8, $0xffffff0f0e0d0c08
DATA encodingShuffleTable_0124<>+0xe00(SB)/8, $0xffff0f0e0d0c0908
DATA encodingShuffleTable_0124<>+0xe08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe10(SB)/8, $0xff0f0e0d0c090800
DATA encodingShuffleTable_0124<>+0xe18(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe20(SB)/8, $0x0f0e0d0c09080100
DATA encodingShuffleTable_0124<>+0xe28(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe30(SB)/8, $0x0d0c090803020100
DATA encodingShuffleTable_0124<>+0xe38(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xe40(SB)/8, $0xff0f0e0d0c090804
DATA encodingShuffleTable_0124<>+0xe48(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe50(SB)/8, $0x0f0e0d0c09080400
DATA encodingShuffleTable_0124<>+0xe58(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe60(SB)/8, $0x0e0d0c0908040100
DATA encodingShuffleTable_0124<>+0xe68(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xe70(SB)/8, $0x0c09080403020100
DATA encodingShuffleTable_0124<>+0xe78(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xe80(SB)/8, $0x0f0e0d0c09080504
DATA encodingShuffleTable_0124<>+0xe88(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xe90(SB)/8, $0x0e0d0c0908050400
DATA encodingShuffleTable_0124<>+0xe98(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xea0(SB)/8, $0x0d0c090805040100
DATA encodingShuffleTable_0124<>+0xea8(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xeb0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0xeb8(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xec0(SB)/8, $0x0d0c090807060504
DATA encodingShuffleTable_0124<>+0xec8(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xed0(SB)/8, $0x0c09080706050400
DATA encodingShuffleTable_0124<>+0xed8(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xee0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0xee8(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xef0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xef8(SB)/8, $0xffff0f0e0d0c0908
DATA encodingShuffleTable_0124<>+0xf00(SB)/8, $0x0f0e0d0c0b0a0908
DATA encodingShuffleTable_0124<>+0xf08(SB)/8, $0xffffffffffffffff
DATA encodingShuffleTable_0124<>+0xf10(SB)/8, $0x0e0d0c0b0a090800
DATA encodingShuffleTable_0124<>+0xf18(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xf20(SB)/8, $0x0d0c0b0a09080100
DATA encodingShuffleTable_0124<>+0xf28(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xf30(SB)/8, $0x0b0a090803020100
DATA encodingShuffleTable_0124<>+0xf38(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xf40(SB)/8, $0x0e0d0c0b0a090804
DATA encodingShuffleTable_0124<>+0xf48(SB)/8, $0xffffffffffffff0f
DATA encodingShuffleTable_0124<>+0xf50(SB)/8, $0x0d0c0b0a09080400
DATA encodingShuffleTable_0124<>+0xf58(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xf60(SB)/8, $0x0c0b0a0908040100
DATA encodingShuffleTable_0124<>+0xf68(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xf70(SB)/8, $0x0a09080403020100
DATA encodingShuffleTable_0124<>+0xf78(SB)/8, $0xffffff0f0e0d0c0b
DATA encodingShuffleTable_0124<>+0xf80(SB)/8, $0x0d0c0b0a09080504
DATA encodingShuffleTable_0124<>+0xf88(SB)/8, $0xffffffffffff0f0e
DATA encodingShuffleTable_0124<>+0xf90(SB)/8, $0x0c0b0a0908050400
DATA encodingShuffleTable_0124<>+0xf98(SB)/8, $0xffffffffff0f0e0d
DATA encodingShuffleTable_0124<>+0xfa0(SB)/8, $0x0b0a090805040100
DATA encodingShuffleTable_0124<>+0xfa8(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xfb0(SB)/8, $0x0908050403020100
DATA encodingShuffleTable_0124<>+0xfb8(SB)/8, $0xffff0f0e0d0c0b0a
DATA encodingShuffleTable_0124<>+0xfc0(SB)/8, $0x0b0a090807060504
DATA encodingShuffleTable_0124<>+0xfc8(SB)/8, $0xffffffff0f0e0d0c
DATA encodingShuffleTable_0124<>+0xfd0(SB)/8, $0x0a09080706050400
DATA encodingShuffleTable_0124<>+0xfd8(SB)/8, $0xffffff0f0e0d0c0b
DATA encodingShuffleTable_0124<>+0xfe0(SB)/8, $0x0908070605040100
DATA encodingShuffleTable_0124<>+0xfe8(SB)/8, $0xffff0f0e0d0c0b0a
DATA encodingShuffleTable_0124<>+0xff0(SB)/8, $0x0706050403020100
DATA encodingShuffleTable_0124<>+0xff8(SB)/8, $0x0f0e0d0c0b0a0908
GLOBL encodingShuffleTable_0124<>(SB), (RODATA|NOPTR), $4096

DATA shuffleTable_1234<>+0x00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x08(SB)/8, $0xffffff03ffffff02
DATA shuffleTable_1234<>+0x10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x18(SB)/8, $0xffffff04ffffff03
DATA shuffleTable_1234<>+0x20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x28(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_1234<>+0x30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x38(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_1234<>+0x40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x48(SB)/8, $0xffffff04ffffff03
DATA shuffleTable_1234<>+0x50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x58(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_1234<>+0x60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x68(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_1234<>+0x70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x78(SB)/8, $0xffffff07ffffff06
DATA shuffleTable_1234<>+0x80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x88(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_1234<>+0x90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x98(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_1234<>+0xa0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xa8(SB)/8, $0xffffff07ffffff06
DATA shuffleTable_1234<>+0xb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xb8(SB)/8, $0xffffff08ffffff07
DATA shuffleTable_1234<>+0xc0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xc8(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_1234<>+0xd0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xd8(SB)/8, $0xffffff07ffffff06
DATA shuffleTable_1234<>+0xe0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xe8(SB)/8, $0xffffff08ffffff07
DATA shuffleTable_1234<>+0xf0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xf8(SB)/8, $0xffffff09ffffff08
DATA shuffleTable_1234<>+0x100(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x108(SB)/8, $0xffffff04ffff0302
DATA shuffleTable_1234<>+0x110(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x118(SB)/8, $0xffffff05ffff0403
DATA shuffleTable_1234<>+0x120(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x128(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_1234<>+0x130(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x138(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_1234<>+0x140(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x148(SB)/8, $0xffffff05ffff0403
DATA shuffleTable_1234<>+0x150(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x158(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_1234<>+0x160(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x168(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_1234<>+0x170(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x178(SB)/8, $0xffffff08ffff0706
DATA shuffleTable_1234<>+0x180(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x188(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_1234<>+0x190(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x198(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_1234<>+0x1a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x1a8(SB)/8, $0xffffff08ffff0706
DATA shuffleTable_1234<>+0x1b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x1b8(SB)/8, $0xffffff09ffff0807
DATA shuffleTable_1234<>+0x1c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x1c8(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_1234<>+0x1d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x1d8(SB)/8, $0xffffff08ffff0706
DATA shuffleTable_1234<>+0x1e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x1e8(SB)/8, $0xffffff09ffff0807
DATA shuffleTable_1234<>+0x1f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x1f8(SB)/8, $0xffffff0affff0908
DATA shuffleTable_1234<>+0x200(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x208(SB)/8, $0xffffff05ff040302
DATA shuffleTable_1234<>+0x210(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x218(SB)/8, $0xffffff06ff050403
DATA shuffleTable_1234<>+0x220(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x228(SB)/8, $0xffffff07ff060504
DATA shuffleTable_1234<>+0x230(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x238(SB)/8, $0xffffff08ff070605
DATA shuffleTable_1234<>+0x240(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x248(SB)/8, $0xffffff06ff050403
DATA shuffleTable_1234<>+0x250(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x258(SB)/8, $0xffffff07ff060504
DATA shuffleTable_1234<>+0x260(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x268(SB)/8, $0xffffff08ff070605
DATA shuffleTable_1234<>+0x270(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x278(SB)/8, $0xffffff09ff080706
DATA shuffleTable_1234<>+0x280(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x288(SB)/8, $0xffffff07ff060504
DATA shuffleTable_1234<>+0x290(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x298(SB)/8, $0xffffff08ff070605
DATA shuffleTable_1234<>+0x2a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x2a8(SB)/8, $0xffffff09ff080706
DATA shuffleTable_1234<>+0x2b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x2b8(SB)/8, $0xffffff0aff090807
DATA shuffleTable_1234<>+0x2c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x2c8(SB)/8, $0xffffff08ff070605
DATA shuffleTable_1234<>+0x2d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x2d8(SB)/8, $0xffffff09ff080706
DATA shuffleTable_1234<>+0x2e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x2e8(SB)/8, $0xffffff0aff090807
DATA shuffleTable_1234<>+0x2f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x2f8(SB)/8, $0xffffff0bff0a0908
DATA shuffleTable_1234<>+0x300(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x308(SB)/8, $0xffffff0605040302
DATA shuffleTable_1234<>+0x310(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x318(SB)/8, $0xffffff0706050403
DATA shuffleTable_1234<>+0x320(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x328(SB)/8, $0xffffff0807060504
DATA shuffleTable_1234<>+0x330(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x338(SB)/8, $0xffffff0908070605
DATA shuffleTable_1234<>+0x340(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x348(SB)/8, $0xffffff0706050403
DATA shuffleTable_1234<>+0x350(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x358(SB)/8, $0xffffff0807060504
DATA shuffleTable_1234<>+0x360(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x368(SB)/8, $0xffffff0908070605
DATA shuffleTable_1234<>+0x370(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x378(SB)/8, $0xffffff0a09080706
DATA shuffleTable_1234<>+0x380(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x388(SB)/8, $0xffffff0807060504
DATA shuffleTable_1234<>+0x390(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x398(SB)/8, $0xffffff0908070605
DATA shuffleTable_1234<>+0x3a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x3a8(SB)/8, $0xffffff0a09080706
DATA shuffleTable_1234<>+0x3b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x3b8(SB)/8, $0xffffff0b0a090807
DATA shuffleTable_1234<>+0x3c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x3c8(SB)/8, $0xffffff0908070605
DATA shuffleTable_1234<>+0x3d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x3d8(SB)/8, $0xffffff0a09080706
DATA shuffleTable_1234<>+0x3e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x3e8(SB)/8, $0xffffff0b0a090807
DATA shuffleTable_1234<>+0x3f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x3f8(SB)/8, $0xffffff0c0b0a0908
DATA shuffleTable_1234<>+0x400(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x408(SB)/8, $0xffff0403ffffff02
DATA shuffleTable_1234<>+0x410(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x418(SB)/8, $0xffff0504ffffff03
DATA shuffleTable_1234<>+0x420(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x428(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_1234<>+0x430(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x438(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_1234<>+0x440(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x448(SB)/8, $0xffff0504ffffff03
DATA shuffleTable_1234<>+0x450(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x458(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_1234<>+0x460(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x468(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_1234<>+0x470(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x478(SB)/8, $0xffff0807ffffff06
DATA shuffleTable_1234<>+0x480(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x488(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_1234<>+0x490(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x498(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_1234<>+0x4a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x4a8(SB)/8, $0xffff0807ffffff06
DATA shuffleTable_1234<>+0x4b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x4b8(SB)/8, $0xffff0908ffffff07
DATA shuffleTable_1234<>+0x4c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x4c8(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_1234<>+0x4d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x4d8(SB)/8, $0xffff0807ffffff06
DATA shuffleTable_1234<>+0x4e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x4e8(SB)/8, $0xffff0908ffffff07
DATA shuffleTable_1234<>+0x4f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x4f8(SB)/8, $0xffff0a09ffffff08
DATA shuffleTable_1234<>+0x500(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x508(SB)/8, $0xffff0504ffff0302
DATA shuffleTable_1234<>+0x510(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x518(SB)/8, $0xffff0605ffff0403
DATA shuffleTable_1234<>+0x520(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x528(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_1234<>+0x530(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x538(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_1234<>+0x540(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x548(SB)/8, $0xffff0605ffff0403
DATA shuffleTable_1234<>+0x550(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x558(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_1234<>+0x560(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x568(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_1234<>+0x570(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x578(SB)/8, $0xffff0908ffff0706
DATA shuffleTable_1234<>+0x580(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x588(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_1234<>+0x590(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x598(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_1234<>+0x5a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x5a8(SB)/8, $0xffff0908ffff0706
DATA shuffleTable_1234<>+0x5b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x5b8(SB)/8, $0xffff0a09ffff0807
DATA shuffleTable_1234<>+0x5c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x5c8(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_1234<>+0x5d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x5d8(SB)/8, $0xffff0908ffff0706
DATA shuffleTable_1234<>+0x5e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x5e8(SB)/8, $0xffff0a09ffff0807
DATA shuffleTable_1234<>+0x5f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x5f8(SB)/8, $0xffff0b0affff0908
DATA shuffleTable_1234<>+0x600(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x608(SB)/8, $0xffff0605ff040302
DATA shuffleTable_1234<>+0x610(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x618(SB)/8, $0xffff0706ff050403
DATA shuffleTable_1234<>+0x620(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x628(SB)/8, $0xffff0807ff060504
DATA shuffleTable_1234<>+0x630(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x638(SB)/8, $0xffff0908ff070605
DATA shuffleTable_1234<>+0x640(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x648(SB)/8, $0xffff0706ff050403
DATA shuffleTable_1234<>+0x650(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x658(SB)/8, $0xffff0807ff060504
DATA shuffleTable_1234<>+0x660(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x668(SB)/8, $0xffff0908ff070605
DATA shuffleTable_1234<>+0x670(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x678(SB)/8, $0xffff0a09ff080706
DATA shuffleTable_1234<>+0x680(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x688(SB)/8, $0xffff0807ff060504
DATA shuffleTable_1234<>+0x690(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x698(SB)/8, $0xffff0908ff070605
DATA shuffleTable_1234<>+0x6a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x6a8(SB)/8, $0xffff0a09ff080706
DATA shuffleTable_1234<>+0x6b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x6b8(SB)/8, $0xffff0b0aff090807
DATA shuffleTable_1234<>+0x6c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x6c8(SB)/8, $0xffff0908ff070605
DATA shuffleTable_1234<>+0x6d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x6d8(SB)/8, $0xffff0a09ff080706
DATA shuffleTable_1234<>+0x6e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x6e8(SB)/8, $0xffff0b0aff090807
DATA shuffleTable_1234<>+0x6f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x6f8(SB)/8, $0xffff0c0bff0a0908
DATA shuffleTable_1234<>+0x700(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x708(SB)/8, $0xffff070605040302
DATA shuffleTable_1234<>+0x710(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x718(SB)/8, $0xffff080706050403
DATA shuffleTable_1234<>+0x720(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x728(SB)/8, $0xffff090807060504
DATA shuffleTable_1234<>+0x730(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x738(SB)/8, $0xffff0a0908070605
DATA shuffleTable_1234<>+0x740(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x748(SB)/8, $0xffff080706050403
DATA shuffleTable_1234<>+0x750(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x758(SB)/8, $0xffff090807060504
DATA shuffleTable_1234<>+0x760(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x768(SB)/8, $0xffff0a0908070605
DATA shuffleTable_1234<>+0x770(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x778(SB)/8, $0xffff0b0a09080706
DATA shuffleTable_1234<>+0x780(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x788(SB)/8, $0xffff090807060504
DATA shuffleTable_1234<>+0x790(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x798(SB)/8, $0xffff0a0908070605
DATA shuffleTable_1234<>+0x7a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x7a8(SB)/8, $0xffff0b0a09080706
DATA shuffleTable_1234<>+0x7b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x7b8(SB)/8, $0xffff0c0b0a090807
DATA shuffleTable_1234<>+0x7c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x7c8(SB)/8, $0xffff0a0908070605
DATA shuffleTable_1234<>+0x7d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x7d8(SB)/8, $0xffff0b0a09080706
DATA shuffleTable_1234<>+0x7e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x7e8(SB)/8, $0xffff0c0b0a090807
DATA shuffleTable_1234<>+0x7f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x7f8(SB)/8, $0xffff0d0c0b0a0908
DATA shuffleTable_1234<>+0x800(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x808(SB)/8, $0xff050403ffffff02
DATA shuffleTable_1234<>+0x810(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x818(SB)/8, $0xff060504ffffff03
DATA shuffleTable_1234<>+0x820(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x828(SB)/8, $0xff070605ffffff04
DATA shuffleTable_1234<>+0x830(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x838(SB)/8, $0xff080706ffffff05
DATA shuffleTable_1234<>+0x840(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x848(SB)/8, $0xff060504ffffff03
DATA shuffleTable_1234<>+0x850(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x858(SB)/8, $0xff070605ffffff04
DATA shuffleTable_1234<>+0x860(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x868(SB)/8, $0xff080706ffffff05
DATA shuffleTable_1234<>+0x870(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x878(SB)/8, $0xff090807ffffff06
DATA shuffleTable_1234<>+0x880(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x888(SB)/8, $0xff070605ffffff04
DATA shuffleTable_1234<>+0x890(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x898(SB)/8, $0xff080706ffffff05
DATA shuffleTable_1234<>+0x8a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x8a8(SB)/8, $0xff090807ffffff06
DATA shuffleTable_1234<>+0x8b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x8b8(SB)/8, $0xff0a0908ffffff07
DATA shuffleTable_1234<>+0x8c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x8c8(SB)/8, $0xff080706ffffff05
DATA shuffleTable_1234<>+0x8d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x8d8(SB)/8, $0xff090807ffffff06
DATA shuffleTable_1234<>+0x8e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x8e8(SB)/8, $0xff0a0908ffffff07
DATA shuffleTable_1234<>+0x8f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x8f8(SB)/8, $0xff0b0a09ffffff08
DATA shuffleTable_1234<>+0x900(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0x908(SB)/8, $0xff060504ffff0302
DATA shuffleTable_1234<>+0x910(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0x918(SB)/8, $0xff070605ffff0403
DATA shuffleTable_1234<>+0x920(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0x928(SB)/8, $0xff080706ffff0504
DATA shuffleTable_1234<>+0x930(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0x938(SB)/8, $0xff090807ffff0605
DATA shuffleTable_1234<>+0x940(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0x948(SB)/8, $0xff070605ffff0403
DATA shuffleTable_1234<>+0x950(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0x958(SB)/8, $0xff080706ffff0504
DATA shuffleTable_1234<>+0x960(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0x968(SB)/8, $0xff090807ffff0605
DATA shuffleTable_1234<>+0x970(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0x978(SB)/8, $0xff0a0908ffff0706
DATA shuffleTable_1234<>+0x980(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0x988(SB)/8, $0xff080706ffff0504
DATA shuffleTable_1234<>+0x990(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0x998(SB)/8, $0xff090807ffff0605
DATA shuffleTable_1234<>+0x9a0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0x9a8(SB)/8, $0xff0a0908ffff0706
DATA shuffleTable_1234<>+0x9b0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0x9b8(SB)/8, $0xff0b0a09ffff0807
DATA shuffleTable_1234<>+0x9c0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0x9c8(SB)/8, $0xff090807ffff0605
DATA shuffleTable_1234<>+0x9d0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0x9d8(SB)/8, $0xff0a0908ffff0706
DATA shuffleTable_1234<>+0x9e0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0x9e8(SB)/8, $0xff0b0a09ffff0807
DATA shuffleTable_1234<>+0x9f0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0x9f8(SB)/8, $0xff0c0b0affff0908
DATA shuffleTable_1234<>+0xa00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xa08(SB)/8, $0xff070605ff040302
DATA shuffleTable_1234<>+0xa10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xa18(SB)/8, $0xff080706ff050403
DATA shuffleTable_1234<>+0xa20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xa28(SB)/8, $0xff090807ff060504
DATA shuffleTable_1234<>+0xa30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xa38(SB)/8, $0xff0a0908ff070605
DATA shuffleTable_1234<>+0xa40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xa48(SB)/8, $0xff080706ff050403
DATA shuffleTable_1234<>+0xa50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xa58(SB)/8, $0xff090807ff060504
DATA shuffleTable_1234<>+0xa60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xa68(SB)/8, $0xff0a0908ff070605
DATA shuffleTable_1234<>+0xa70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xa78(SB)/8, $0xff0b0a09ff080706
DATA shuffleTable_1234<>+0xa80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xa88(SB)/8, $0xff090807ff060504
DATA shuffleTable_1234<>+0xa90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xa98(SB)/8, $0xff0a0908ff070605
DATA shuffleTable_1234<>+0xaa0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xaa8(SB)/8, $0xff0b0a09ff080706
DATA shuffleTable_1234<>+0xab0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xab8(SB)/8, $0xff0c0b0aff090807
DATA shuffleTable_1234<>+0xac0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xac8(SB)/8, $0xff0a0908ff070605
DATA shuffleTable_1234<>+0xad0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xad8(SB)/8, $0xff0b0a09ff080706
DATA shuffleTable_1234<>+0xae0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xae8(SB)/8, $0xff0c0b0aff090807
DATA shuffleTable_1234<>+0xaf0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xaf8(SB)/8, $0xff0d0c0bff0a0908
DATA shuffleTable_1234<>+0xb00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xb08(SB)/8, $0xff08070605040302
DATA shuffleTable_1234<>+0xb10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xb18(SB)/8, $0xff09080706050403
DATA shuffleTable_1234<>+0xb20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xb28(SB)/8, $0xff0a090807060504
DATA shuffleTable_1234<>+0xb30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xb38(SB)/8, $0xff0b0a0908070605
DATA shuffleTable_1234<>+0xb40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xb48(SB)/8, $0xff09080706050403
DATA shuffleTable_1234<>+0xb50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xb58(SB)/8, $0xff0a090807060504
DATA shuffleTable_1234<>+0xb60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xb68(SB)/8, $0xff0b0a0908070605
DATA shuffleTable_1234<>+0xb70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xb78(SB)/8, $0xff0c0b0a09080706
DATA shuffleTable_1234<>+0xb80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xb88(SB)/8, $0xff0a090807060504
DATA shuffleTable_1234<>+0xb90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xb98(SB)/8, $0xff0b0a0908070605
DATA shuffleTable_1234<>+0xba0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xba8(SB)/8, $0xff0c0b0a09080706
DATA shuffleTable_1234<>+0xbb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xbb8(SB)/8, $0xff0d0c0b0a090807
DATA shuffleTable_1234<>+0xbc0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xbc8(SB)/8, $0xff0b0a0908070605
DATA shuffleTable_1234<>+0xbd0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xbd8(SB)/8, $0xff0c0b0a09080706
DATA shuffleTable_1234<>+0xbe0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xbe8(SB)/8, $0xff0d0c0b0a090807
DATA shuffleTable_1234<>+0xbf0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xbf8(SB)/8, $0xff0e0d0c0b0a0908
DATA shuffleTable_1234<>+0xc00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xc08(SB)/8, $0x06050403ffffff02
DATA shuffleTable_1234<>+0xc10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xc18(SB)/8, $0x07060504ffffff03
DATA shuffleTable_1234<>+0xc20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xc28(SB)/8, $0x08070605ffffff04
DATA shuffleTable_1234<>+0xc30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xc38(SB)/8, $0x09080706ffffff05
DATA shuffleTable_1234<>+0xc40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xc48(SB)/8, $0x07060504ffffff03
DATA shuffleTable_1234<>+0xc50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xc58(SB)/8, $0x08070605ffffff04
DATA shuffleTable_1234<>+0xc60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xc68(SB)/8, $0x09080706ffffff05
DATA shuffleTable_1234<>+0xc70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xc78(SB)/8, $0x0a090807ffffff06
DATA shuffleTable_1234<>+0xc80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xc88(SB)/8, $0x08070605ffffff04
DATA shuffleTable_1234<>+0xc90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xc98(SB)/8, $0x09080706ffffff05
DATA shuffleTable_1234<>+0xca0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xca8(SB)/8, $0x0a090807ffffff06
DATA shuffleTable_1234<>+0xcb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xcb8(SB)/8, $0x0b0a0908ffffff07
DATA shuffleTable_1234<>+0xcc0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xcc8(SB)/8, $0x09080706ffffff05
DATA shuffleTable_1234<>+0xcd0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xcd8(SB)/8, $0x0a090807ffffff06
DATA shuffleTable_1234<>+0xce0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xce8(SB)/8, $0x0b0a0908ffffff07
DATA shuffleTable_1234<>+0xcf0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xcf8(SB)/8, $0x0c0b0a09ffffff08
DATA shuffleTable_1234<>+0xd00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xd08(SB)/8, $0x07060504ffff0302
DATA shuffleTable_1234<>+0xd10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xd18(SB)/8, $0x08070605ffff0403
DATA shuffleTable_1234<>+0xd20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xd28(SB)/8, $0x09080706ffff0504
DATA shuffleTable_1234<>+0xd30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xd38(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_1234<>+0xd40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xd48(SB)/8, $0x08070605ffff0403
DATA shuffleTable_1234<>+0xd50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xd58(SB)/8, $0x09080706ffff0504
DATA shuffleTable_1234<>+0xd60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xd68(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_1234<>+0xd70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xd78(SB)/8, $0x0b0a0908ffff0706
DATA shuffleTable_1234<>+0xd80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xd88(SB)/8, $0x09080706ffff0504
DATA shuffleTable_1234<>+0xd90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xd98(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_1234<>+0xda0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xda8(SB)/8, $0x0b0a0908ffff0706
DATA shuffleTable_1234<>+0xdb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xdb8(SB)/8, $0x0c0b0a09ffff0807
DATA shuffleTable_1234<>+0xdc0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xdc8(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_1234<>+0xdd0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xdd8(SB)/8, $0x0b0a0908ffff0706
DATA shuffleTable_1234<>+0xde0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xde8(SB)/8, $0x0c0b0a09ffff0807
DATA shuffleTable_1234<>+0xdf0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xdf8(SB)/8, $0x0d0c0b0affff0908
DATA shuffleTable_1234<>+0xe00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xe08(SB)/8, $0x08070605ff040302
DATA shuffleTable_1234<>+0xe10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xe18(SB)/8, $0x09080706ff050403
DATA shuffleTable_1234<>+0xe20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xe28(SB)/8, $0x0a090807ff060504
DATA shuffleTable_1234<>+0xe30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xe38(SB)/8, $0x0b0a0908ff070605
DATA shuffleTable_1234<>+0xe40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xe48(SB)/8, $0x09080706ff050403
DATA shuffleTable_1234<>+0xe50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xe58(SB)/8, $0x0a090807ff060504
DATA shuffleTable_1234<>+0xe60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xe68(SB)/8, $0x0b0a0908ff070605
DATA shuffleTable_1234<>+0xe70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xe78(SB)/8, $0x0c0b0a09ff080706
DATA shuffleTable_1234<>+0xe80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xe88(SB)/8, $0x0a090807ff060504
DATA shuffleTable_1234<>+0xe90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xe98(SB)/8, $0x0b0a0908ff070605
DATA shuffleTable_1234<>+0xea0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xea8(SB)/8, $0x0c0b0a09ff080706
DATA shuffleTable_1234<>+0xeb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xeb8(SB)/8, $0x0d0c0b0aff090807
DATA shuffleTable_1234<>+0xec0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xec8(SB)/8, $0x0b0a0908ff070605
DATA shuffleTable_1234<>+0xed0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xed8(SB)/8, $0x0c0b0a09ff080706
DATA shuffleTable_1234<>+0xee0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xee8(SB)/8, $0x0d0c0b0aff090807
DATA shuffleTable_1234<>+0xef0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xef8(SB)/8, $0x0e0d0c0bff0a0908
DATA shuffleTable_1234<>+0xf00(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_1234<>+0xf08(SB)/8, $0x0908070605040302
DATA shuffleTable_1234<>+0xf10(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_1234<>+0xf18(SB)/8, $0x0a09080706050403
DATA shuffleTable_1234<>+0xf20(SB)/8, $0xffffff03ff020100
DATA shuffleTable_1234<>+0xf28(SB)/8, $0x0b0a090807060504
DATA shuffleTable_1234<>+0xf30(SB)/8, $0xffffff0403020100
DATA shuffleTable_1234<>+0xf38(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_1234<>+0xf40(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_1234<>+0xf48(SB)/8, $0x0a09080706050403
DATA shuffleTable_1234<>+0xf50(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_1234<>+0xf58(SB)/8, $0x0b0a090807060504
DATA shuffleTable_1234<>+0xf60(SB)/8, $0xffff0403ff020100
DATA shuffleTable_1234<>+0xf68(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_1234<>+0xf70(SB)/8, $0xffff050403020100
DATA shuffleTable_1234<>+0xf78(SB)/8, $0x0d0c0b0a09080706
DATA shuffleTable_1234<>+0xf80(SB)/8, $0xff030201ffffff00
DATA shuffleTable_1234<>+0xf88(SB)/8, $0x0b0a090807060504
DATA shuffleTable_1234<>+0xf90(SB)/8, $0xff040302ffff0100
DATA shuffleTable_1234<>+0xf98(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_1234<>+0xfa0(SB)/8, $0xff050403ff020100
DATA shuffleTable_1234<>+0xfa8(SB)/8, $0x0d0c0b0a09080706
DATA shuffleTable_1234<>+0xfb0(SB)/8, $0xff06050403020100
DATA shuffleTable_1234<>+0xfb8(SB)/8, $0x0e0d0c0b0a090807
DATA shuffleTable_1234<>+0xfc0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_1234<>+0xfc8(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_1234<>+0xfd0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_1234<>+0xfd8(SB)/8, $0x0d0c0b0a09080706
DATA shuffleTable_1234<>+0xfe0(SB)/8, $0x06050403ff020100
DATA shuffleTable_1234<>+0xfe8(SB)/8, $0x0e0d0c0b0a090807
DATA shuffleTable_1234<>+0xff0(SB)/8, $0x0706050403020100
DATA shuffleTable_1234<>+0xff8(SB)/8, $0x0f0e0d0c0b0a0908
GLOBL shuffleTable_1234<>(SB), (RODATA|NOPTR), $4096

DATA lengthTable_1234<>+0x00(SB)/8, $0x0807060507060504
DATA lengthTable_1234<>+0x08(SB)/8, $0x0a09080709080706
DATA lengthTable_1234<>+0x10(SB)/8, $0x0908070608070605
DATA lengthTable_1234<>+0x18(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0x20(SB)/8, $0x0a09080709080706
DATA lengthTable_1234<>+0x28(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0x30(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0x38(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0x40(SB)/8, $0x0908070608070605
DATA lengthTable_1234<>+0x48(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0x50(SB)/8, $0x0a09080709080706
DATA lengthTable_1234<>+0x58(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0x60(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0x68(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0x70(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0x78(SB)/8, $0x0e0d0c0b0d0c0b0a
DATA lengthTable_1234<>+0x80(SB)/8, $0x0a09080709080706
DATA lengthTable_1234<>+0x88(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0x90(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0x98(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0xa0(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0xa8(SB)/8, $0x0e0d0c0b0d0c0b0a
DATA lengthTable_1234<>+0xb0(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0xb8(SB)/8, $0x0f0e0d0c0e0d0c0b
DATA lengthTable_1234<>+0xc0(SB)/8, $0x0b0a09080a090807
DATA lengthTable_1234<>+0xc8(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0xd0(SB)/8, $0x0c0b0a090b0a0908
DATA lengthTable_1234<>+0xd8(SB)/8, $0x0e0d0c0b0d0c0b0a
DATA lengthTable_1234<>+0xe0(SB)/8, $0x0d0c0b0a0c0b0a09
DATA lengthTable_1234<>+0xe8(SB)/8, $0x0f0e0d0c0e0d0c0b
DATA lengthTable_1234<>+0xf0(SB)/8, $0x0e0d0c0b0d0c0b0a
DATA lengthTable_1234<>+0xf8(SB)/8, $0x100f0e0d0f0e0d0c
GLOBL lengthTable_1234<>(SB), (RODATA|NOPTR), $256

DATA shuffleTable_0124<>+0x00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x08(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x18(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x28(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x38(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x48(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x58(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x68(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x78(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x88(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x98(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xa0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xa8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xb8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xc0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xc8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xd0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xd8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xe0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xe8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xf0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xf8(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x100(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x108(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x110(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x118(SB)/8, $0xffffffffffffff01
DATA shuffleTable_0124<>+0x120(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x128(SB)/8, $0xffffffffffffff02
DATA shuffleTable_0124<>+0x130(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x138(SB)/8, $0xffffffffffffff04
DATA shuffleTable_0124<>+0x140(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x148(SB)/8, $0xffffffffffffff01
DATA shuffleTable_0124<>+0x150(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x158(SB)/8, $0xffffffffffffff02
DATA shuffleTable_0124<>+0x160(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x168(SB)/8, $0xffffffffffffff03
DATA shuffleTable_0124<>+0x170(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x178(SB)/8, $0xffffffffffffff05
DATA shuffleTable_0124<>+0x180(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x188(SB)/8, $0xffffffffffffff02
DATA shuffleTable_0124<>+0x190(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x198(SB)/8, $0xffffffffffffff03
DATA shuffleTable_0124<>+0x1a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x1a8(SB)/8, $0xffffffffffffff04
DATA shuffleTable_0124<>+0x1b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x1b8(SB)/8, $0xffffffffffffff06
DATA shuffleTable_0124<>+0x1c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x1c8(SB)/8, $0xffffffffffffff04
DATA shuffleTable_0124<>+0x1d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x1d8(SB)/8, $0xffffffffffffff05
DATA shuffleTable_0124<>+0x1e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x1e8(SB)/8, $0xffffffffffffff06
DATA shuffleTable_0124<>+0x1f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x1f8(SB)/8, $0xffffffffffffff08
DATA shuffleTable_0124<>+0x200(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x208(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x210(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x218(SB)/8, $0xffffffffffff0201
DATA shuffleTable_0124<>+0x220(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x228(SB)/8, $0xffffffffffff0302
DATA shuffleTable_0124<>+0x230(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x238(SB)/8, $0xffffffffffff0504
DATA shuffleTable_0124<>+0x240(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x248(SB)/8, $0xffffffffffff0201
DATA shuffleTable_0124<>+0x250(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x258(SB)/8, $0xffffffffffff0302
DATA shuffleTable_0124<>+0x260(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x268(SB)/8, $0xffffffffffff0403
DATA shuffleTable_0124<>+0x270(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x278(SB)/8, $0xffffffffffff0605
DATA shuffleTable_0124<>+0x280(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x288(SB)/8, $0xffffffffffff0302
DATA shuffleTable_0124<>+0x290(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x298(SB)/8, $0xffffffffffff0403
DATA shuffleTable_0124<>+0x2a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x2a8(SB)/8, $0xffffffffffff0504
DATA shuffleTable_0124<>+0x2b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x2b8(SB)/8, $0xffffffffffff0706
DATA shuffleTable_0124<>+0x2c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x2c8(SB)/8, $0xffffffffffff0504
DATA shuffleTable_0124<>+0x2d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x2d8(SB)/8, $0xffffffffffff0605
DATA shuffleTable_0124<>+0x2e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x2e8(SB)/8, $0xffffffffffff0706
DATA shuffleTable_0124<>+0x2f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x2f8(SB)/8, $0xffffffffffff0908
DATA shuffleTable_0124<>+0x300(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x308(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x310(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x318(SB)/8, $0xffffffff04030201
DATA shuffleTable_0124<>+0x320(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x328(SB)/8, $0xffffffff05040302
DATA shuffleTable_0124<>+0x330(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x338(SB)/8, $0xffffffff07060504
DATA shuffleTable_0124<>+0x340(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x348(SB)/8, $0xffffffff04030201
DATA shuffleTable_0124<>+0x350(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x358(SB)/8, $0xffffffff05040302
DATA shuffleTable_0124<>+0x360(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x368(SB)/8, $0xffffffff06050403
DATA shuffleTable_0124<>+0x370(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x378(SB)/8, $0xffffffff08070605
DATA shuffleTable_0124<>+0x380(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x388(SB)/8, $0xffffffff05040302
DATA shuffleTable_0124<>+0x390(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x398(SB)/8, $0xffffffff06050403
DATA shuffleTable_0124<>+0x3a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x3a8(SB)/8, $0xffffffff07060504
DATA shuffleTable_0124<>+0x3b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x3b8(SB)/8, $0xffffffff09080706
DATA shuffleTable_0124<>+0x3c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x3c8(SB)/8, $0xffffffff07060504
DATA shuffleTable_0124<>+0x3d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x3d8(SB)/8, $0xffffffff08070605
DATA shuffleTable_0124<>+0x3e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x3e8(SB)/8, $0xffffffff09080706
DATA shuffleTable_0124<>+0x3f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x3f8(SB)/8, $0xffffffff0b0a0908
DATA shuffleTable_0124<>+0x400(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x408(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x410(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x418(SB)/8, $0xffffff01ffffffff
DATA shuffleTable_0124<>+0x420(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x428(SB)/8, $0xffffff02ffffffff
DATA shuffleTable_0124<>+0x430(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x438(SB)/8, $0xffffff04ffffffff
DATA shuffleTable_0124<>+0x440(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x448(SB)/8, $0xffffff01ffffffff
DATA shuffleTable_0124<>+0x450(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x458(SB)/8, $0xffffff02ffffffff
DATA shuffleTable_0124<>+0x460(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x468(SB)/8, $0xffffff03ffffffff
DATA shuffleTable_0124<>+0x470(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x478(SB)/8, $0xffffff05ffffffff
DATA shuffleTable_0124<>+0x480(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x488(SB)/8, $0xffffff02ffffffff
DATA shuffleTable_0124<>+0x490(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x498(SB)/8, $0xffffff03ffffffff
DATA shuffleTable_0124<>+0x4a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x4a8(SB)/8, $0xffffff04ffffffff
DATA shuffleTable_0124<>+0x4b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x4b8(SB)/8, $0xffffff06ffffffff
DATA shuffleTable_0124<>+0x4c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x4c8(SB)/8, $0xffffff04ffffffff
DATA shuffleTable_0124<>+0x4d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x4d8(SB)/8, $0xffffff05ffffffff
DATA shuffleTable_0124<>+0x4e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x4e8(SB)/8, $0xffffff06ffffffff
DATA shuffleTable_0124<>+0x4f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x4f8(SB)/8, $0xffffff08ffffffff
DATA shuffleTable_0124<>+0x500(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x508(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x510(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x518(SB)/8, $0xffffff02ffffff01
DATA shuffleTable_0124<>+0x520(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x528(SB)/8, $0xffffff03ffffff02
DATA shuffleTable_0124<>+0x530(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x538(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_0124<>+0x540(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x548(SB)/8, $0xffffff02ffffff01
DATA shuffleTable_0124<>+0x550(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x558(SB)/8, $0xffffff03ffffff02
DATA shuffleTable_0124<>+0x560(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x568(SB)/8, $0xffffff04ffffff03
DATA shuffleTable_0124<>+0x570(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x578(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_0124<>+0x580(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x588(SB)/8, $0xffffff03ffffff02
DATA shuffleTable_0124<>+0x590(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x598(SB)/8, $0xffffff04ffffff03
DATA shuffleTable_0124<>+0x5a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x5a8(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_0124<>+0x5b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x5b8(SB)/8, $0xffffff07ffffff06
DATA shuffleTable_0124<>+0x5c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x5c8(SB)/8, $0xffffff05ffffff04
DATA shuffleTable_0124<>+0x5d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x5d8(SB)/8, $0xffffff06ffffff05
DATA shuffleTable_0124<>+0x5e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x5e8(SB)/8, $0xffffff07ffffff06
DATA shuffleTable_0124<>+0x5f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x5f8(SB)/8, $0xffffff09ffffff08
DATA shuffleTable_0124<>+0x600(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x608(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x610(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x618(SB)/8, $0xffffff03ffff0201
DATA shuffleTable_0124<>+0x620(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x628(SB)/8, $0xffffff04ffff0302
DATA shuffleTable_0124<>+0x630(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x638(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_0124<>+0x640(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x648(SB)/8, $0xffffff03ffff0201
DATA shuffleTable_0124<>+0x650(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x658(SB)/8, $0xffffff04ffff0302
DATA shuffleTable_0124<>+0x660(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x668(SB)/8, $0xffffff05ffff0403
DATA shuffleTable_0124<>+0x670(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x678(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_0124<>+0x680(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x688(SB)/8, $0xffffff04ffff0302
DATA shuffleTable_0124<>+0x690(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x698(SB)/8, $0xffffff05ffff0403
DATA shuffleTable_0124<>+0x6a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x6a8(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_0124<>+0x6b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x6b8(SB)/8, $0xffffff08ffff0706
DATA shuffleTable_0124<>+0x6c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x6c8(SB)/8, $0xffffff06ffff0504
DATA shuffleTable_0124<>+0x6d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x6d8(SB)/8, $0xffffff07ffff0605
DATA shuffleTable_0124<>+0x6e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x6e8(SB)/8, $0xffffff08ffff0706
DATA shuffleTable_0124<>+0x6f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x6f8(SB)/8, $0xffffff0affff0908
DATA shuffleTable_0124<>+0x700(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x708(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x710(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x718(SB)/8, $0xffffff0504030201
DATA shuffleTable_0124<>+0x720(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x728(SB)/8, $0xffffff0605040302
DATA shuffleTable_0124<>+0x730(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x738(SB)/8, $0xffffff0807060504
DATA shuffleTable_0124<>+0x740(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x748(SB)/8, $0xffffff0504030201
DATA shuffleTable_0124<>+0x750(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x758(SB)/8, $0xffffff0605040302
DATA shuffleTable_0124<>+0x760(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x768(SB)/8, $0xffffff0706050403
DATA shuffleTable_0124<>+0x770(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x778(SB)/8, $0xffffff0908070605
DATA shuffleTable_0124<>+0x780(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x788(SB)/8, $0xffffff0605040302
DATA shuffleTable_0124<>+0x790(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x798(SB)/8, $0xffffff0706050403
DATA shuffleTable_0124<>+0x7a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x7a8(SB)/8, $0xffffff0807060504
DATA shuffleTable_0124<>+0x7b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x7b8(SB)/8, $0xffffff0a09080706
DATA shuffleTable_0124<>+0x7c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x7c8(SB)/8, $0xffffff0807060504
DATA shuffleTable_0124<>+0x7d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x7d8(SB)/8, $0xffffff0908070605
DATA shuffleTable_0124<>+0x7e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x7e8(SB)/8, $0xffffff0a09080706
DATA shuffleTable_0124<>+0x7f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x7f8(SB)/8, $0xffffff0c0b0a0908
DATA shuffleTable_0124<>+0x800(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x808(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x810(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x818(SB)/8, $0xffff0201ffffffff
DATA shuffleTable_0124<>+0x820(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x828(SB)/8, $0xffff0302ffffffff
DATA shuffleTable_0124<>+0x830(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x838(SB)/8, $0xffff0504ffffffff
DATA shuffleTable_0124<>+0x840(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x848(SB)/8, $0xffff0201ffffffff
DATA shuffleTable_0124<>+0x850(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x858(SB)/8, $0xffff0302ffffffff
DATA shuffleTable_0124<>+0x860(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x868(SB)/8, $0xffff0403ffffffff
DATA shuffleTable_0124<>+0x870(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x878(SB)/8, $0xffff0605ffffffff
DATA shuffleTable_0124<>+0x880(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x888(SB)/8, $0xffff0302ffffffff
DATA shuffleTable_0124<>+0x890(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x898(SB)/8, $0xffff0403ffffffff
DATA shuffleTable_0124<>+0x8a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x8a8(SB)/8, $0xffff0504ffffffff
DATA shuffleTable_0124<>+0x8b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x8b8(SB)/8, $0xffff0706ffffffff
DATA shuffleTable_0124<>+0x8c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x8c8(SB)/8, $0xffff0504ffffffff
DATA shuffleTable_0124<>+0x8d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x8d8(SB)/8, $0xffff0605ffffffff
DATA shuffleTable_0124<>+0x8e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x8e8(SB)/8, $0xffff0706ffffffff
DATA shuffleTable_0124<>+0x8f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x8f8(SB)/8, $0xffff0908ffffffff
DATA shuffleTable_0124<>+0x900(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0x908(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x910(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0x918(SB)/8, $0xffff0302ffffff01
DATA shuffleTable_0124<>+0x920(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0x928(SB)/8, $0xffff0403ffffff02
DATA shuffleTable_0124<>+0x930(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0x938(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_0124<>+0x940(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0x948(SB)/8, $0xffff0302ffffff01
DATA shuffleTable_0124<>+0x950(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0x958(SB)/8, $0xffff0403ffffff02
DATA shuffleTable_0124<>+0x960(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0x968(SB)/8, $0xffff0504ffffff03
DATA shuffleTable_0124<>+0x970(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0x978(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_0124<>+0x980(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0x988(SB)/8, $0xffff0403ffffff02
DATA shuffleTable_0124<>+0x990(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0x998(SB)/8, $0xffff0504ffffff03
DATA shuffleTable_0124<>+0x9a0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0x9a8(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_0124<>+0x9b0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0x9b8(SB)/8, $0xffff0807ffffff06
DATA shuffleTable_0124<>+0x9c0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0x9c8(SB)/8, $0xffff0605ffffff04
DATA shuffleTable_0124<>+0x9d0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0x9d8(SB)/8, $0xffff0706ffffff05
DATA shuffleTable_0124<>+0x9e0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0x9e8(SB)/8, $0xffff0807ffffff06
DATA shuffleTable_0124<>+0x9f0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0x9f8(SB)/8, $0xffff0a09ffffff08
DATA shuffleTable_0124<>+0xa00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xa08(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xa10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xa18(SB)/8, $0xffff0403ffff0201
DATA shuffleTable_0124<>+0xa20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xa28(SB)/8, $0xffff0504ffff0302
DATA shuffleTable_0124<>+0xa30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xa38(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_0124<>+0xa40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xa48(SB)/8, $0xffff0403ffff0201
DATA shuffleTable_0124<>+0xa50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xa58(SB)/8, $0xffff0504ffff0302
DATA shuffleTable_0124<>+0xa60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xa68(SB)/8, $0xffff0605ffff0403
DATA shuffleTable_0124<>+0xa70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xa78(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_0124<>+0xa80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xa88(SB)/8, $0xffff0504ffff0302
DATA shuffleTable_0124<>+0xa90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xa98(SB)/8, $0xffff0605ffff0403
DATA shuffleTable_0124<>+0xaa0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xaa8(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_0124<>+0xab0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xab8(SB)/8, $0xffff0908ffff0706
DATA shuffleTable_0124<>+0xac0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xac8(SB)/8, $0xffff0706ffff0504
DATA shuffleTable_0124<>+0xad0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xad8(SB)/8, $0xffff0807ffff0605
DATA shuffleTable_0124<>+0xae0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xae8(SB)/8, $0xffff0908ffff0706
DATA shuffleTable_0124<>+0xaf0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xaf8(SB)/8, $0xffff0b0affff0908
DATA shuffleTable_0124<>+0xb00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xb08(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xb10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xb18(SB)/8, $0xffff060504030201
DATA shuffleTable_0124<>+0xb20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xb28(SB)/8, $0xffff070605040302
DATA shuffleTable_0124<>+0xb30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xb38(SB)/8, $0xffff090807060504
DATA shuffleTable_0124<>+0xb40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xb48(SB)/8, $0xffff060504030201
DATA shuffleTable_0124<>+0xb50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xb58(SB)/8, $0xffff070605040302
DATA shuffleTable_0124<>+0xb60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xb68(SB)/8, $0xffff080706050403
DATA shuffleTable_0124<>+0xb70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xb78(SB)/8, $0xffff0a0908070605
DATA shuffleTable_0124<>+0xb80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xb88(SB)/8, $0xffff070605040302
DATA shuffleTable_0124<>+0xb90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xb98(SB)/8, $0xffff080706050403
DATA shuffleTable_0124<>+0xba0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xba8(SB)/8, $0xffff090807060504
DATA shuffleTable_0124<>+0xbb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xbb8(SB)/8, $0xffff0b0a09080706
DATA shuffleTable_0124<>+0xbc0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xbc8(SB)/8, $0xffff090807060504
DATA shuffleTable_0124<>+0xbd0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xbd8(SB)/8, $0xffff0a0908070605
DATA shuffleTable_0124<>+0xbe0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xbe8(SB)/8, $0xffff0b0a09080706
DATA shuffleTable_0124<>+0xbf0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xbf8(SB)/8, $0xffff0d0c0b0a0908
DATA shuffleTable_0124<>+0xc00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xc08(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xc10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xc18(SB)/8, $0x04030201ffffffff
DATA shuffleTable_0124<>+0xc20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xc28(SB)/8, $0x05040302ffffffff
DATA shuffleTable_0124<>+0xc30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xc38(SB)/8, $0x07060504ffffffff
DATA shuffleTable_0124<>+0xc40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xc48(SB)/8, $0x04030201ffffffff
DATA shuffleTable_0124<>+0xc50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xc58(SB)/8, $0x05040302ffffffff
DATA shuffleTable_0124<>+0xc60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xc68(SB)/8, $0x06050403ffffffff
DATA shuffleTable_0124<>+0xc70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xc78(SB)/8, $0x08070605ffffffff
DATA shuffleTable_0124<>+0xc80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xc88(SB)/8, $0x05040302ffffffff
DATA shuffleTable_0124<>+0xc90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xc98(SB)/8, $0x06050403ffffffff
DATA shuffleTable_0124<>+0xca0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xca8(SB)/8, $0x07060504ffffffff
DATA shuffleTable_0124<>+0xcb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xcb8(SB)/8, $0x09080706ffffffff
DATA shuffleTable_0124<>+0xcc0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xcc8(SB)/8, $0x07060504ffffffff
DATA shuffleTable_0124<>+0xcd0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xcd8(SB)/8, $0x08070605ffffffff
DATA shuffleTable_0124<>+0xce0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xce8(SB)/8, $0x09080706ffffffff
DATA shuffleTable_0124<>+0xcf0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xcf8(SB)/8, $0x0b0a0908ffffffff
DATA shuffleTable_0124<>+0xd00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xd08(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xd10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xd18(SB)/8, $0x05040302ffffff01
DATA shuffleTable_0124<>+0xd20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xd28(SB)/8, $0x06050403ffffff02
DATA shuffleTable_0124<>+0xd30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xd38(SB)/8, $0x08070605ffffff04
DATA shuffleTable_0124<>+0xd40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xd48(SB)/8, $0x05040302ffffff01
DATA shuffleTable_0124<>+0xd50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xd58(SB)/8, $0x06050403ffffff02
DATA shuffleTable_0124<>+0xd60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xd68(SB)/8, $0x07060504ffffff03
DATA shuffleTable_0124<>+0xd70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xd78(SB)/8, $0x09080706ffffff05
DATA shuffleTable_0124<>+0xd80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xd88(SB)/8, $0x06050403ffffff02
DATA shuffleTable_0124<>+0xd90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xd98(SB)/8, $0x07060504ffffff03
DATA shuffleTable_0124<>+0xda0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xda8(SB)/8, $0x08070605ffffff04
DATA shuffleTable_0124<>+0xdb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xdb8(SB)/8, $0x0a090807ffffff06
DATA shuffleTable_0124<>+0xdc0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xdc8(SB)/8, $0x08070605ffffff04
DATA shuffleTable_0124<>+0xdd0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xdd8(SB)/8, $0x09080706ffffff05
DATA shuffleTable_0124<>+0xde0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xde8(SB)/8, $0x0a090807ffffff06
DATA shuffleTable_0124<>+0xdf0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xdf8(SB)/8, $0x0c0b0a09ffffff08
DATA shuffleTable_0124<>+0xe00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xe08(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xe10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xe18(SB)/8, $0x06050403ffff0201
DATA shuffleTable_0124<>+0xe20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xe28(SB)/8, $0x07060504ffff0302
DATA shuffleTable_0124<>+0xe30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xe38(SB)/8, $0x09080706ffff0504
DATA shuffleTable_0124<>+0xe40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xe48(SB)/8, $0x06050403ffff0201
DATA shuffleTable_0124<>+0xe50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xe58(SB)/8, $0x07060504ffff0302
DATA shuffleTable_0124<>+0xe60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xe68(SB)/8, $0x08070605ffff0403
DATA shuffleTable_0124<>+0xe70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xe78(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_0124<>+0xe80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xe88(SB)/8, $0x07060504ffff0302
DATA shuffleTable_0124<>+0xe90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xe98(SB)/8, $0x08070605ffff0403
DATA shuffleTable_0124<>+0xea0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xea8(SB)/8, $0x09080706ffff0504
DATA shuffleTable_0124<>+0xeb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xeb8(SB)/8, $0x0b0a0908ffff0706
DATA shuffleTable_0124<>+0xec0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xec8(SB)/8, $0x09080706ffff0504
DATA shuffleTable_0124<>+0xed0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xed8(SB)/8, $0x0a090807ffff0605
DATA shuffleTable_0124<>+0xee0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xee8(SB)/8, $0x0b0a0908ffff0706
DATA shuffleTable_0124<>+0xef0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xef8(SB)/8, $0x0d0c0b0affff0908
DATA shuffleTable_0124<>+0xf00(SB)/8, $0xffffffffffffffff
DATA shuffleTable_0124<>+0xf08(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xf10(SB)/8, $0xffffffffffffff00
DATA shuffleTable_0124<>+0xf18(SB)/8, $0x0807060504030201
DATA shuffleTable_0124<>+0xf20(SB)/8, $0xffffffffffff0100
DATA shuffleTable_0124<>+0xf28(SB)/8, $0x0908070605040302
DATA shuffleTable_0124<>+0xf30(SB)/8, $0xffffffff03020100
DATA shuffleTable_0124<>+0xf38(SB)/8, $0x0b0a090807060504
DATA shuffleTable_0124<>+0xf40(SB)/8, $0xffffff00ffffffff
DATA shuffleTable_0124<>+0xf48(SB)/8, $0x0807060504030201
DATA shuffleTable_0124<>+0xf50(SB)/8, $0xffffff01ffffff00
DATA shuffleTable_0124<>+0xf58(SB)/8, $0x0908070605040302
DATA shuffleTable_0124<>+0xf60(SB)/8, $0xffffff02ffff0100
DATA shuffleTable_0124<>+0xf68(SB)/8, $0x0a09080706050403
DATA shuffleTable_0124<>+0xf70(SB)/8, $0xffffff0403020100
DATA shuffleTable_0124<>+0xf78(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_0124<>+0xf80(SB)/8, $0xffff0100ffffffff
DATA shuffleTable_0124<>+0xf88(SB)/8, $0x0908070605040302
DATA shuffleTable_0124<>+0xf90(SB)/8, $0xffff0201ffffff00
DATA shuffleTable_0124<>+0xf98(SB)/8, $0x0a09080706050403
DATA shuffleTable_0124<>+0xfa0(SB)/8, $0xffff0302ffff0100
DATA shuffleTable_0124<>+0xfa8(SB)/8, $0x0b0a090807060504
DATA shuffleTable_0124<>+0xfb0(SB)/8, $0xffff050403020100
DATA shuffleTable_0124<>+0xfb8(SB)/8, $0x0d0c0b0a09080706
DATA shuffleTable_0124<>+0xfc0(SB)/8, $0x03020100ffffffff
DATA shuffleTable_0124<>+0xfc8(SB)/8, $0x0b0a090807060504
DATA shuffleTable_0124<>+0xfd0(SB)/8, $0x04030201ffffff00
DATA shuffleTable_0124<>+0xfd8(SB)/8, $0x0c0b0a0908070605
DATA shuffleTable_0124<>+0xfe0(SB)/8, $0x05040302ffff0100
DATA shuffleTable_0124<>+0xfe8(SB)/8, $0x0d0c0b0a09080706
DATA shuffleTable_0124<>+0xff0(SB)/8, $0x0706050403020100
DATA shuffleTable_0124<>+0xff8(SB)/8, $0x0f0e0d0c0b0a0908
GLOBL shuffleTable_0124<>(SB), (RODATA|NOPTR), $4096

TEXT Â·svb_delta_decode_alt(SB), NOSPLIT, $0-56
	MOVD in+0(FP), R0
	MOVD in_len+8(FP), R1
	MOVD in_cap+16(FP), R2
	MOVD count+24(FP), R3
	MOVW prev+32(FP), R4
	MOVD out+40(FP), R5
	CMP  $1, R3            // <--                                  // cmp	x3, #1
	BLT  LBB10_2           // <--                                  // b.lt	.LBB10_2
	ADD  $3, R3, R8        // <--                                  // add	x8, x3, #3
	LSR  $2, R8, R9        // <--                                  // lsr	x9, x8, #2
	CMP  R1, R9            // <--                                  // cmp	x9, x1
	BLS  LBB10_3           // <--                                  // b.ls	.LBB10_3

LBB10_2:
	MOVD ZR, R0         // <--                                  // mov	x0, xzr
	MOVD R0, ret+48(FP) // <--
	RET                 // <--                                  // ret

LBB10_3:
	NOP                                // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ADD  R9, R0, R8                    // <--                                  // add	x8, x0, x9
	CMP  $4, R3                        // <--                                  // cmp	x3, #4
	NOP                                // (skipped)                            // mov	x29, sp
	BCC  LBB10_10                      // <--                                  // b.lo	.LBB10_10
	AND  $-16, R1, R10                 // <--                                  // and	x10, x1, #0xfffffffffffffff0
	CMP  R10, R9                       // <--                                  // cmp	x9, x10
	BGE  LBB10_10                      // <--                                  // b.ge	.LBB10_10
	WORD $0x6f00e400                   // VMOVI $0, V0.D2                      // movi	v0.2d, #0000000000000000
	ADD  R10, R0, R10                  // <--                                  // add	x10, x0, x10
	ADD  R3>>2, R0, R11                // <--                                  // add	x11, x0, x3, lsr #2
	MOVD R5, R9                        // <--                                  // mov	x9, x5
	MOVD $lengthTable_0124<>(SB), R12  // <--                                  // adrp	x12, lengthTable_0124
	ADD  $0, R12, R12                  // <--                                  // add	x12, x12, :lo12:lengthTable_0124
	MOVD $shuffleTable_0124<>(SB), R13 // <--                                  // adrp	x13, shuffleTable_0124
	ADD  $0, R13, R13                  // <--                                  // add	x13, x13, :lo12:shuffleTable_0124
	VDUP R4, V1.S4                     // <--                                  // dup	v1.4s, w4

LBB10_6:
	WORD $0x3840140e                 // MOVBU.P 1(R0), R14                   // ldrb	w14, [x0], #1
	WORD $0x3dc00103                 // FMOVQ (R8), F3                       // ldr	q3, [x8]
	VDUP V1.S[3], V1.S4              // <--                                  // dup	v1.4s, v1.s[3]
	CMP  R11, R0                     // <--                                  // cmp	x0, x11
	WORD $0x3cee79a2                 // FMOVQ (R13)(R14<<4), F2              // ldr	q2, [x13, x14, lsl #4]
	WORD $0x386e698e                 // MOVBU (R12)(R14), R14                // ldrb	w14, [x12, x14]
	VTBL V2.B16, [V3.B16], V2.B16    // <--                                  // tbl	v2.16b, { v3.16b }, v2.16b
	ADD  R14, R8, R8                 // <--                                  // add	x8, x8, x14
	VEXT $12, V2.B16, V0.B16, V3.B16 // <--                                  // ext	v3.16b, v0.16b, v2.16b, #12
	VADD V2.S4, V3.S4, V2.S4         // <--                                  // add	v2.4s, v3.4s, v2.4s
	VEXT $8, V2.B16, V0.B16, V3.B16  // <--                                  // ext	v3.16b, v0.16b, v2.16b, #8
	VADD V1.S4, V2.S4, V1.S4         // <--                                  // add	v1.4s, v2.4s, v1.4s
	VADD V3.S4, V1.S4, V1.S4         // <--                                  // add	v1.4s, v1.4s, v3.4s
	WORD $0x3c810521                 // FMOVQ.P F1, 16(R9)                   // str	q1, [x9], #16
	BCS  LBB10_8                     // <--                                  // b.hs	.LBB10_8
	CMP  R10, R8                     // <--                                  // cmp	x8, x10
	BCC  LBB10_6                     // <--                                  // b.lo	.LBB10_6

LBB10_8:
	SUB  R5, R9, R10    // <--                                  // sub	x10, x9, x5
	ASR  $2, R10, R10   // <--                                  // asr	x10, x10, #2
	SUB  R10, R3, R3    // <--                                  // sub	x3, x3, x10
	CMP  $1, R3         // <--                                  // cmp	x3, #1
	CCMP GE, R9, R5, $0 // <--                                  // ccmp	x9, x5, #0, ge
	BLS  LBB10_11       // <--                                  // b.ls	.LBB10_11
	WORD $0xb85fc124    // MOVWU -4(R9), R4                     // ldur	w4, [x9, #-4]
	JMP  LBB10_11       // <--                                  // b	.LBB10_11

LBB10_10:
	MOVD ZR, R10 // <--                                  // mov	x10, xzr
	MOVD R5, R9  // <--                                  // mov	x9, x5

LBB10_11:
	CBZ  R8, LBB10_24 // <--                                  // cbz	x8, .LBB10_24
	CBZW R3, LBB10_24 // <--                                  // cbz	w3, .LBB10_24
	MOVW ZR, R10      // <--                                  // mov	w10, wzr
	WORD $0x3840140b  // MOVBU.P 1(R0), R11                   // ldrb	w11, [x0], #1
	JMP  LBB10_16     // <--                                  // b	.LBB10_16

LBB10_14:
	WORD $0x7840250c // MOVHU.P 2(R8), R12                   // ldrh	w12, [x8], #2

LBB10_15:
	ADDW  R4, R12, R4  // <--                                  // add	w4, w12, w4
	ADDW  $2, R10, R10 // <--                                  // add	w10, w10, #2
	SUBSW $1, R3, R3   // <--                                  // subs	w3, w3, #1
	WORD  $0xb8004524  // MOVW.P R4, 4(R9)                     // str	w4, [x9], #4
	BEQ   LBB10_23     // <--                                  // b.eq	.LBB10_23

LBB10_16:
	ANDW $255, R10, R12 // <--                                  // and	w12, w10, #0xff
	CMPW $8, R12        // <--                                  // cmp	w12, #8
	BNE  LBB10_18       // <--                                  // b.ne	.LBB10_18
	MOVW ZR, R10        // <--                                  // mov	w10, wzr
	WORD $0x3840140b    // MOVBU.P 1(R0), R11                   // ldrb	w11, [x0], #1

LBB10_18:
	LSRW  R10, R11, R12 // <--                                  // lsr	w12, w11, w10
	ANDSW $3, R12, R12  // <--                                  // ands	w12, w12, #0x3
	BEQ   LBB10_15      // <--                                  // b.eq	.LBB10_15
	CMPW  $2, R12       // <--                                  // cmp	w12, #2
	BEQ   LBB10_14      // <--                                  // b.eq	.LBB10_14
	CMPW  $1, R12       // <--                                  // cmp	w12, #1
	BNE   LBB10_22      // <--                                  // b.ne	.LBB10_22
	WORD  $0x3840150c   // MOVBU.P 1(R8), R12                   // ldrb	w12, [x8], #1
	JMP   LBB10_15      // <--                                  // b	.LBB10_15

LBB10_22:
	WORD $0xb840450c // MOVWU.P 4(R8), R12                   // ldr	w12, [x8], #4
	JMP  LBB10_15    // <--                                  // b	.LBB10_15

LBB10_23:
	SUB R5, R9, R9  // <--                                  // sub	x9, x9, x5
	ASR $2, R9, R10 // <--                                  // asr	x10, x9, #2

LBB10_24:
	CMP  $0, R8          // <--                                  // cmp	x8, #0
	CSEL EQ, ZR, R10, R0 // <--                                  // csel	x0, xzr, x10, eq
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+48(FP)  // <--
	RET                  // <--                                  // ret
